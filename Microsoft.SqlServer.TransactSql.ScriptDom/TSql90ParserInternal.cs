using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using antlr;
using antlr.collections.impl;

namespace Microsoft.SqlServer.TransactSql.ScriptDom
{
	// Token: 0x020001B9 RID: 441
	internal class TSql90ParserInternal : TSql90ParserBaseInternal
	{
		// Token: 0x06001488 RID: 5256 RVA: 0x00077801 File Offset: 0x00075A01
		public TSql90ParserInternal(bool initialQuotedIdentifiersOn) : base(initialQuotedIdentifiersOn)
		{
			this.initialize();
		}

		// Token: 0x06001489 RID: 5257 RVA: 0x00077810 File Offset: 0x00075A10
		protected void initialize()
		{
			this.tokenNames = TSql90ParserInternal.tokenNames_;
		}

		// Token: 0x0600148A RID: 5258 RVA: 0x0007781D File Offset: 0x00075A1D
		protected TSql90ParserInternal(TokenBuffer tokenBuf, int k) : base(tokenBuf, k)
		{
			this.initialize();
		}

		// Token: 0x0600148B RID: 5259 RVA: 0x0007782D File Offset: 0x00075A2D
		public TSql90ParserInternal(TokenBuffer tokenBuf) : this(tokenBuf, 2)
		{
		}

		// Token: 0x0600148C RID: 5260 RVA: 0x00077837 File Offset: 0x00075A37
		protected TSql90ParserInternal(TokenStream lexer, int k) : base(lexer, k)
		{
			this.initialize();
		}

		// Token: 0x0600148D RID: 5261 RVA: 0x00077847 File Offset: 0x00075A47
		public TSql90ParserInternal(TokenStream lexer) : this(lexer, 2)
		{
		}

		// Token: 0x0600148E RID: 5262 RVA: 0x00077851 File Offset: 0x00075A51
		public TSql90ParserInternal(ParserSharedInputState state) : base(state, 2)
		{
			this.initialize();
		}

		// Token: 0x0600148F RID: 5263 RVA: 0x00077864 File Offset: 0x00075A64
		public ChildObjectName entryPointChildObjectName()
		{
			ChildObjectName result = this.childObjectNameWithThreePrefixes();
			this.match(1);
			return result;
		}

		// Token: 0x06001490 RID: 5264 RVA: 0x00077884 File Offset: 0x00075A84
		public ChildObjectName childObjectNameWithThreePrefixes()
		{
			ChildObjectName childObjectName = base.FragmentFactory.CreateFragment<ChildObjectName>();
			List<Identifier> otherCollection = this.identifierList(4);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(childObjectName, childObjectName.Identifiers, otherCollection);
			}
			return childObjectName;
		}

		// Token: 0x06001491 RID: 5265 RVA: 0x000778C0 File Offset: 0x00075AC0
		public SchemaObjectName entryPointSchemaObjectName()
		{
			SchemaObjectName result = this.schemaObjectFourPartName();
			this.match(1);
			return result;
		}

		// Token: 0x06001492 RID: 5266 RVA: 0x000778E0 File Offset: 0x00075AE0
		public SchemaObjectName schemaObjectFourPartName()
		{
			SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
			List<Identifier> list = this.identifierList(4);
			if (this.inputState.guessing == 0)
			{
				foreach (Identifier item in list)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, item);
				}
			}
			return schemaObjectName;
		}

		// Token: 0x06001493 RID: 5267 RVA: 0x00077958 File Offset: 0x00075B58
		public DataTypeReference entryPointScalarDataType()
		{
			DataTypeReference result = this.scalarDataType();
			this.match(1);
			return result;
		}

		// Token: 0x06001494 RID: 5268 RVA: 0x00077978 File Offset: 0x00075B78
		public DataTypeReference scalarDataType()
		{
			SqlDataTypeOption sqlDataTypeOption = SqlDataTypeOption.None;
			bool flag = false;
			int num = this.LA(1);
			DataTypeReference result;
			if (num != 53)
			{
				if (num != 96)
				{
					switch (num)
					{
					case 232:
					case 233:
					{
						SchemaObjectName schemaObjectName = this.dataTypeSchemaObjectName();
						if (this.inputState.guessing == 0 && (schemaObjectName.SchemaIdentifier == null || (schemaObjectName.SchemaIdentifier != null && TSql90ParserBaseInternal.IsSys(schemaObjectName.SchemaIdentifier))))
						{
							sqlDataTypeOption = TSql80ParserBaseInternal.ParseDataType(schemaObjectName.BaseIdentifier.Value);
							flag = TSql90ParserBaseInternal.IsXml(schemaObjectName.BaseIdentifier);
						}
						if (TSql90ParserInternal.tokenSet_0_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_1_.member(this.LA(2)) && flag)
						{
							result = this.xmlDataType(schemaObjectName);
						}
						else if (TSql90ParserInternal.tokenSet_2_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_1_.member(this.LA(2)) && sqlDataTypeOption != SqlDataTypeOption.None)
						{
							result = this.sqlDataTypeWithoutNational(schemaObjectName, sqlDataTypeOption);
						}
						else
						{
							if (!TSql90ParserInternal.tokenSet_0_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							result = this.userDataType(schemaObjectName);
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					result = this.sqlDataTypeWithNational();
				}
			}
			else
			{
				result = this.doubleDataType();
			}
			return result;
		}

		// Token: 0x06001495 RID: 5269 RVA: 0x00077AE4 File Offset: 0x00075CE4
		public ScalarExpression entryPointExpression()
		{
			ScalarExpression result = this.expression();
			this.match(1);
			return result;
		}

		// Token: 0x06001496 RID: 5270 RVA: 0x00077B04 File Offset: 0x00075D04
		public ScalarExpression expression()
		{
			return this.expressionWithFlags(ExpressionFlags.None);
		}

		// Token: 0x06001497 RID: 5271 RVA: 0x00077B1C File Offset: 0x00075D1C
		public BooleanExpression entryPointBooleanExpression()
		{
			BooleanExpression result = this.booleanExpression();
			this.match(1);
			return result;
		}

		// Token: 0x06001498 RID: 5272 RVA: 0x00077B3C File Offset: 0x00075D3C
		public BooleanExpression booleanExpression()
		{
			return this.booleanExpressionWithFlags(ExpressionFlags.None);
		}

		// Token: 0x06001499 RID: 5273 RVA: 0x00077B54 File Offset: 0x00075D54
		public StatementList entryPointStatementList()
		{
			bool flag = false;
			StatementList result = this.statementList(ref flag);
			if (this.inputState.guessing == 0 && flag)
			{
				result = null;
			}
			this.match(1);
			return result;
		}

		// Token: 0x0600149A RID: 5274 RVA: 0x00077B88 File Offset: 0x00075D88
		public StatementList statementList(ref bool vParseErrorOccurred)
		{
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			int num = 0;
			while (TSql90ParserInternal.tokenSet_3_.member(this.LA(1)))
			{
				TSqlStatement tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement != null)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(statementList, statementList.Statements, tsqlStatement);
					}
					else
					{
						vParseErrorOccurred = true;
					}
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return statementList;
		}

		// Token: 0x0600149B RID: 5275 RVA: 0x00077C00 File Offset: 0x00075E00
		public SelectStatement entryPointSubqueryExpressionWithOptionalCTE()
		{
			SelectStatement result = null;
			SelectFunctionReturnType selectFunctionReturnType = this.functionReturnClauseRelational();
			if (this.inputState.guessing == 0)
			{
				result = selectFunctionReturnType.SelectStatement;
			}
			this.match(1);
			return result;
		}

		// Token: 0x0600149C RID: 5276 RVA: 0x00077C34 File Offset: 0x00075E34
		public SelectFunctionReturnType functionReturnClauseRelational()
		{
			SelectFunctionReturnType selectFunctionReturnType = base.FragmentFactory.CreateFragment<SelectFunctionReturnType>();
			if ((this.LA(1) == 140 || this.LA(1) == 171 || this.LA(1) == 191) && TSql90ParserInternal.tokenSet_4_.member(this.LA(2)))
			{
				SelectStatement selectStatement = this.subqueryExpressionWithOptionalCTE();
				if (this.inputState.guessing == 0)
				{
					selectFunctionReturnType.SelectStatement = selectStatement;
				}
			}
			else
			{
				if (this.LA(1) != 191 || this.LA(2) != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(191);
				WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
				QueryExpression queryExpression = this.subqueryExpression();
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(selectFunctionReturnType, token);
					SelectStatement selectStatement = base.FragmentFactory.CreateFragment<SelectStatement>();
					selectStatement.QueryExpression = queryExpression;
					selectStatement.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
					selectFunctionReturnType.SelectStatement = selectStatement;
					TSql80ParserBaseInternal.UpdateTokenInfo(selectFunctionReturnType, token2);
				}
			}
			return selectFunctionReturnType;
		}

		// Token: 0x0600149D RID: 5277 RVA: 0x00077D60 File Offset: 0x00075F60
		public IPv4 entryPointIPv4Address()
		{
			IPv4 result = this.ipAddressV4();
			this.match(1);
			return result;
		}

		// Token: 0x0600149E RID: 5278 RVA: 0x00077D80 File Offset: 0x00075F80
		public IPv4 ipAddressV4()
		{
			IPv4 pv = base.FragmentFactory.CreateFragment<IPv4>();
			switch (this.LA(1))
			{
			case 221:
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					pv.OctetOne = literal;
				}
				int num = this.LA(1);
				if (num != 200)
				{
					if (num != 222)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(222);
					if (this.inputState.guessing == 0)
					{
						pv.OctetTwo = base.GetIPv4FragmentFromDotNumberNumeric(token);
					}
					int num2 = this.LA(1);
					if (num2 != 200)
					{
						if (num2 != 222)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token2 = this.LT(1);
						this.match(222);
						this.ipV4DotNumberTail(pv);
						if (this.inputState.guessing == 0)
						{
							pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token2);
						}
					}
					else
					{
						this.ipV4DotLastTwoPartsTail(pv);
					}
				}
				else
				{
					this.match(200);
					switch (this.LA(1))
					{
					case 221:
					{
						Literal literal2 = this.integer();
						if (this.inputState.guessing == 0)
						{
							pv.OctetTwo = literal2;
						}
						int num3 = this.LA(1);
						if (num3 != 200)
						{
							if (num3 != 222)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							IToken token3 = this.LT(1);
							this.match(222);
							this.ipV4DotNumberTail(pv);
							if (this.inputState.guessing == 0)
							{
								pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token3);
							}
						}
						else
						{
							this.ipV4DotLastTwoPartsTail(pv);
						}
						break;
					}
					case 222:
					{
						IToken token4 = this.LT(1);
						this.match(222);
						int num4 = this.LA(1);
						if (num4 != 200)
						{
							switch (num4)
							{
							case 221:
							{
								Literal literal2 = this.integer();
								this.ipV4DotNumberTail(pv);
								if (this.inputState.guessing == 0)
								{
									pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token4);
									pv.OctetThree = literal2;
								}
								break;
							}
							case 222:
							{
								IToken token5 = this.LT(1);
								this.match(222);
								int num5 = this.LA(1);
								if (num5 <= 192)
								{
									if (num5 != 1 && num5 != 192)
									{
										goto IL_657;
									}
								}
								else if (num5 != 202)
								{
									if (num5 != 221)
									{
										goto IL_657;
									}
									Literal literal2 = this.integer();
									if (this.inputState.guessing == 0)
									{
										pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token4);
										pv.OctetThree = base.GetIPv4FragmentFromNumberDotNumeric(token5);
										pv.OctetFour = literal2;
										break;
									}
									break;
								}
								if (this.inputState.guessing != 0)
								{
									break;
								}
								Literal literal3;
								Literal literal4;
								if (base.SplitNumericIntoIpParts(token4, out literal3, out literal4))
								{
									pv.OctetTwo = literal3;
									pv.OctetThree = literal4;
									pv.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token5);
									break;
								}
								base.GetIPv4FragmentsFromNumberDotNumberNumeric(token5, out literal3, out literal4);
								pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token4);
								pv.OctetThree = literal3;
								pv.OctetFour = literal4;
								break;
								IL_657:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							default:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(200);
							Literal literal2 = this.integer();
							if (this.inputState.guessing == 0)
							{
								Literal literal3;
								Literal literal4;
								base.GetIPv4FragmentsFromNumberDotNumberNumeric(token4, out literal3, out literal4);
								pv.OctetTwo = literal3;
								pv.OctetThree = literal4;
								pv.OctetFour = literal2;
							}
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				break;
			}
			case 222:
			{
				IToken token6 = this.LT(1);
				this.match(222);
				int num6 = this.LA(1);
				if (num6 != 200)
				{
					switch (num6)
					{
					case 221:
					{
						Literal literal = this.integer();
						if (this.inputState.guessing == 0)
						{
							pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
							pv.OctetTwo = literal;
						}
						int num7 = this.LA(1);
						if (num7 != 200)
						{
							if (num7 != 222)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							IToken token7 = this.LT(1);
							this.match(222);
							this.ipV4DotNumberTail(pv);
							if (this.inputState.guessing == 0)
							{
								pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token7);
							}
						}
						else
						{
							this.ipV4DotLastTwoPartsTail(pv);
						}
						break;
					}
					case 222:
					{
						IToken token8 = this.LT(1);
						this.match(222);
						int num8 = this.LA(1);
						if (num8 != 200)
						{
							switch (num8)
							{
							case 221:
							{
								Literal literal = this.integer();
								this.ipV4DotNumberTail(pv);
								if (this.inputState.guessing == 0)
								{
									pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
									pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token8);
									pv.OctetThree = literal;
								}
								break;
							}
							case 222:
							{
								IToken token9 = this.LT(1);
								this.match(222);
								int num9 = this.LA(1);
								if (num9 <= 192)
								{
									if (num9 != 1 && num9 != 192)
									{
										goto IL_226;
									}
								}
								else if (num9 != 202)
								{
									if (num9 != 221)
									{
										goto IL_226;
									}
									Literal literal = this.integer();
									if (this.inputState.guessing == 0)
									{
										pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
										pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token8);
										pv.OctetThree = base.GetIPv4FragmentFromNumberDotNumeric(token9);
										pv.OctetFour = literal;
										break;
									}
									break;
								}
								if (this.inputState.guessing != 0)
								{
									break;
								}
								Literal literal3;
								Literal literal4;
								if (base.SplitNumericIntoIpParts(token6, out literal3, out literal4))
								{
									pv.OctetOne = literal3;
									pv.OctetTwo = literal4;
									pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token8);
									pv.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token9);
									break;
								}
								if (base.SplitNumericIntoIpParts(token8, out literal3, out literal4))
								{
									pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
									pv.OctetTwo = literal3;
									pv.OctetThree = literal4;
									pv.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token9);
									break;
								}
								base.GetIPv4FragmentsFromNumberDotNumberNumeric(token9, out literal3, out literal4);
								pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
								pv.OctetTwo = base.GetIPv4FragmentFromNumberDotNumeric(token8);
								pv.OctetThree = literal3;
								pv.OctetFour = literal4;
								break;
								IL_226:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							default:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(200);
							Literal literal = this.integer();
							if (this.inputState.guessing == 0)
							{
								Literal literal3;
								Literal literal4;
								if (base.SplitNumericIntoIpParts(token6, out literal3, out literal4))
								{
									pv.OctetOne = literal3;
									pv.OctetTwo = literal4;
									pv.OctetThree = base.GetIPv4FragmentFromDotNumberNumeric(token8);
								}
								else
								{
									base.GetIPv4FragmentsFromNumberDotNumberNumeric(token8, out literal3, out literal4);
									pv.OctetOne = base.GetIPv4FragmentFromNumberDotNumeric(token6);
									pv.OctetTwo = literal3;
									pv.OctetThree = literal4;
								}
								pv.OctetFour = literal;
							}
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.ipV4DotLastTwoPartsTail(pv);
					if (this.inputState.guessing == 0)
					{
						Literal literal3;
						Literal literal4;
						base.GetIPv4FragmentsFromNumberDotNumberNumeric(token6, out literal3, out literal4);
						pv.OctetOne = literal3;
						pv.OctetTwo = literal4;
					}
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return pv;
		}

		// Token: 0x0600149F RID: 5279 RVA: 0x00078558 File Offset: 0x00076758
		public TSqlFragment entryPointConstantOrIdentifier()
		{
			TSqlFragment result = this.possibleNegativeConstantOrIdentifier();
			this.match(1);
			return result;
		}

		// Token: 0x060014A0 RID: 5280 RVA: 0x00078578 File Offset: 0x00076778
		public ScalarExpression possibleNegativeConstantOrIdentifier()
		{
			int num = this.LA(1);
			if (num <= 193)
			{
				if (num != 100 && num != 193)
				{
					goto IL_7F;
				}
			}
			else if (num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
					goto IL_7F;
				case 232:
				case 233:
					return this.identifierLiteral();
				default:
					goto IL_7F;
				}
			}
			return this.possibleNegativeConstant();
			IL_7F:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060014A1 RID: 5281 RVA: 0x00078618 File Offset: 0x00076818
		public TSqlFragment entryPointConstantOrIdentifierWithDefault()
		{
			TSqlFragment result = this.possibleNegativeConstantOrIdentifierWithDefault();
			this.match(1);
			return result;
		}

		// Token: 0x060014A2 RID: 5282 RVA: 0x00078638 File Offset: 0x00076838
		public ScalarExpression possibleNegativeConstantOrIdentifierWithDefault()
		{
			int num = this.LA(1);
			if (num <= 100)
			{
				if (num == 47)
				{
					return this.defaultLiteral();
				}
				if (num != 100)
				{
					goto IL_81;
				}
			}
			else if (num != 193 && num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
					goto IL_81;
				default:
					goto IL_81;
				}
			}
			return this.possibleNegativeConstantOrIdentifier();
			IL_81:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060014A3 RID: 5283 RVA: 0x000786DC File Offset: 0x000768DC
		public TSqlScript script()
		{
			TSqlScript tsqlScript = base.FragmentFactory.CreateFragment<TSqlScript>();
			if (tsqlScript.ScriptTokenStream != null && tsqlScript.ScriptTokenStream.Count > 0)
			{
				tsqlScript.UpdateTokenInfo(0, tsqlScript.ScriptTokenStream.Count - 1);
			}
			TSqlBatch tsqlBatch = this.batch();
			if (this.inputState.guessing == 0 && tsqlBatch != null)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlBatch>(tsqlScript, tsqlScript.Batches, tsqlBatch);
			}
			while (this.LA(1) == 219)
			{
				this.match(219);
				if (this.inputState.guessing == 0)
				{
					base.ResetQuotedIdentifiersSettingToInitial();
					base.ThrowPartialAstIfPhaseOne(null);
				}
				tsqlBatch = this.batch();
				if (this.inputState.guessing == 0 && tsqlBatch != null)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlBatch>(tsqlScript, tsqlScript.Batches, tsqlBatch);
				}
			}
			IToken token = this.LT(1);
			this.match(1);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlScript, token);
			}
			return tsqlScript;
		}

		// Token: 0x060014A4 RID: 5284 RVA: 0x000787C4 File Offset: 0x000769C4
		public TSqlBatch batch()
		{
			TSqlBatch tsqlBatch = null;
			try
			{
				while (this.LA(1) == 204)
				{
					this.LT(1);
					this.match(204);
				}
				bool flag = false;
				if ((this.LA(1) == 6 || this.LA(1) == 35) && TSql90ParserInternal.tokenSet_5_.member(this.LA(2)))
				{
					int pos = this.mark();
					flag = true;
					this.inputState.guessing++;
					try
					{
						int num = this.LA(1);
						if (num == 6)
						{
							this.match(6);
							int num2 = this.LA(1);
							if (num2 <= 121)
							{
								if (num2 == 73)
								{
									this.match(73);
									goto IL_21E;
								}
								switch (num2)
								{
								case 120:
									this.match(120);
									goto IL_21E;
								case 121:
									this.match(121);
									goto IL_21E;
								}
							}
							else
							{
								if (num2 == 155)
								{
									this.match(155);
									goto IL_21E;
								}
								if (num2 == 166)
								{
									this.match(166);
									goto IL_21E;
								}
							}
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						if (num == 35)
						{
							this.match(35);
							int num3 = this.LA(1);
							if (num3 <= 121)
							{
								if (num3 == 47)
								{
									this.match(47);
									goto IL_21E;
								}
								if (num3 == 73)
								{
									this.match(73);
									goto IL_21E;
								}
								switch (num3)
								{
								case 120:
									this.match(120);
									goto IL_21E;
								case 121:
									this.match(121);
									goto IL_21E;
								}
							}
							else
							{
								switch (num3)
								{
								case 137:
									this.match(137);
									goto IL_21E;
								case 138:
									break;
								case 139:
									this.match(139);
									goto IL_21E;
								default:
									if (num3 == 155)
									{
										this.match(155);
										goto IL_21E;
									}
									if (num3 == 166)
									{
										this.match(166);
										goto IL_21E;
									}
									break;
								}
							}
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						throw new NoViableAltException(this.LT(1), this.getFilename());
						IL_21E:;
					}
					catch (RecognitionException)
					{
						flag = false;
					}
					this.rewind(pos);
					this.inputState.guessing--;
				}
				if (flag)
				{
					TSqlStatement tsqlStatement = this.lastStatementOptSemi();
					if (this.inputState.guessing == 0 && tsqlStatement != null)
					{
						if (tsqlBatch == null)
						{
							tsqlBatch = base.FragmentFactory.CreateFragment<TSqlBatch>();
						}
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(tsqlBatch, tsqlBatch.Statements, tsqlStatement);
					}
				}
				else
				{
					if (!TSql90ParserInternal.tokenSet_6_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_7_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					TSqlStatement tsqlStatement = this.optSimpleExecute();
					if (this.inputState.guessing == 0 && tsqlStatement != null)
					{
						base.ThrowPartialAstIfPhaseOne(tsqlStatement);
						if (tsqlBatch == null)
						{
							tsqlBatch = base.FragmentFactory.CreateFragment<TSqlBatch>();
						}
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(tsqlBatch, tsqlBatch.Statements, tsqlStatement);
					}
					while (TSql90ParserInternal.tokenSet_3_.member(this.LA(1)))
					{
						tsqlStatement = this.statementOptSemi();
						if (this.inputState.guessing == 0 && tsqlStatement != null)
						{
							if (tsqlBatch == null)
							{
								tsqlBatch = base.FragmentFactory.CreateFragment<TSqlBatch>();
							}
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(tsqlBatch, tsqlBatch.Statements, tsqlStatement);
						}
					}
				}
			}
			catch (TSqlParseErrorException ex)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				if (!ex.DoNotLog)
				{
					base.AddParseError(ex.ParseError);
				}
				base.RecoverAtBatchLevel();
			}
			catch (NoViableAltException ex2)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError faultTolerantUnexpectedTokenError = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex2.token, ex2, this._tokenSource.LastToken.Offset);
				base.AddParseError(faultTolerantUnexpectedTokenError);
				base.RecoverAtBatchLevel();
			}
			catch (MismatchedTokenException ex3)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError faultTolerantUnexpectedTokenError2 = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex3.token, ex3, this._tokenSource.LastToken.Offset);
				base.AddParseError(faultTolerantUnexpectedTokenError2);
				base.RecoverAtBatchLevel();
			}
			catch (RecognitionException)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError unexpectedTokenError = base.GetUnexpectedTokenError();
				base.AddParseError(unexpectedTokenError);
				base.RecoverAtBatchLevel();
			}
			catch (TokenStreamRecognitionException exception)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError parseError = TSql80ParserBaseInternal.ProcessTokenStreamRecognitionException(exception, this._tokenSource.LastToken.Offset);
				base.AddParseError(parseError);
				base.RecoverAtBatchLevel();
			}
			catch (ANTLRException exception2)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				base.CreateInternalError("batch", exception2);
			}
			return tsqlBatch;
		}

		// Token: 0x060014A5 RID: 5285 RVA: 0x00078D0C File Offset: 0x00076F0C
		public TSqlStatement lastStatementOptSemi()
		{
			TSqlStatement tsqlStatement = this.lastStatement();
			this.optSemicolons(tsqlStatement);
			return tsqlStatement;
		}

		// Token: 0x060014A6 RID: 5286 RVA: 0x00078D2C File Offset: 0x00076F2C
		public ExecuteStatement optSimpleExecute()
		{
			ExecuteStatement executeStatement = null;
			if (TSql90ParserInternal.tokenSet_8_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_9_.member(this.LA(2)) && !base.NextTokenMatches("DISABLE") && !base.NextTokenMatches("ENABLE") && !base.NextTokenMatches("MOVE") && !base.NextTokenMatches("GET") && !base.NextTokenMatches("RECEIVE") && !base.NextTokenMatches("SEND"))
			{
				ExecutableProcedureReference executableEntity = this.execProc();
				if (this.inputState.guessing == 0)
				{
					executeStatement = base.FragmentFactory.CreateFragment<ExecuteStatement>();
					ExecuteSpecification executeSpecification = base.FragmentFactory.CreateFragment<ExecuteSpecification>();
					executeSpecification.ExecutableEntity = executableEntity;
					executeStatement.ExecuteSpecification = executeSpecification;
				}
				this.optSemicolons(executeStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_10_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executeStatement;
		}

		// Token: 0x060014A7 RID: 5287 RVA: 0x00078E38 File Offset: 0x00077038
		public TSqlStatement statementOptSemi()
		{
			TSqlStatement tsqlStatement = this.statement();
			this.optSemicolons(tsqlStatement);
			return tsqlStatement;
		}

		// Token: 0x060014A8 RID: 5288 RVA: 0x00078E58 File Offset: 0x00077058
		public TSqlStatement statement()
		{
			TSqlStatement result = null;
			int line = this.LT(1).getLine();
			int column = this.LT(1).getColumn();
			try
			{
				int num = this.LA(1);
				if (num > 95)
				{
					if (num <= 162)
					{
						if (num <= 134)
						{
							if (num == 106)
							{
								result = this.openStatements();
								goto IL_661;
							}
							if (num == 119)
							{
								result = this.printStatement();
								goto IL_661;
							}
							switch (num)
							{
							case 123:
								result = this.raiseErrorStatements();
								goto IL_661;
							case 124:
							case 127:
							case 128:
							case 130:
							case 133:
								goto IL_43A;
							case 125:
								result = this.readTextStatement();
								goto IL_661;
							case 126:
								result = this.reconfigureStatement();
								goto IL_661;
							case 129:
								break;
							case 131:
								result = this.returnStatement();
								goto IL_661;
							case 132:
								result = this.revokeStatement90();
								goto IL_661;
							case 134:
								result = this.rollbackTransactionStatement();
								goto IL_661;
							default:
								goto IL_43A;
							}
						}
						else
						{
							switch (num)
							{
							case 138:
								result = this.saveTransactionStatement();
								goto IL_661;
							case 139:
							case 140:
							case 141:
								goto IL_43A;
							case 142:
								result = this.setStatements();
								goto IL_661;
							case 143:
								result = this.setUserStatement();
								goto IL_661;
							case 144:
								result = this.shutdownStatement();
								goto IL_661;
							default:
								if (num == 156)
								{
									result = this.truncateTableStatement();
									goto IL_661;
								}
								switch (num)
								{
								case 161:
									result = this.updateTextStatement();
									goto IL_661;
								case 162:
									result = this.useStatement();
									goto IL_661;
								default:
									goto IL_43A;
								}
								break;
							}
						}
					}
					else if (num <= 176)
					{
						if (num == 167)
						{
							result = this.waitForStatement();
							goto IL_661;
						}
						switch (num)
						{
						case 170:
							result = this.whileStatement();
							goto IL_661;
						case 171:
							goto IL_43A;
						case 172:
							result = this.writeTextStatement();
							goto IL_661;
						default:
							if (num != 176)
							{
								goto IL_43A;
							}
							result = this.revertStatement();
							goto IL_661;
						}
					}
					else
					{
						switch (num)
						{
						case 180:
							goto IL_296;
						case 181:
							break;
						default:
							if (num == 220)
							{
								result = this.labelStatement();
								goto IL_661;
							}
							if (num != 232)
							{
								goto IL_43A;
							}
							result = this.identifierStatements();
							goto IL_661;
						}
					}
					result = this.restoreStatements();
					goto IL_661;
				}
				if (num <= 49)
				{
					if (num <= 23)
					{
						if (num == 4)
						{
							result = this.addSignatureStatement();
							goto IL_661;
						}
						switch (num)
						{
						case 12:
							break;
						case 13:
							result = this.beginStatements();
							goto IL_661;
						case 14:
						case 16:
							goto IL_43A;
						case 15:
							result = this.breakStatement();
							goto IL_661;
						case 17:
							result = this.bulkInsertStatement();
							goto IL_661;
						default:
							switch (num)
							{
							case 22:
								result = this.checkpointStatement();
								goto IL_661;
							case 23:
								result = this.closeStatements();
								goto IL_661;
							default:
								goto IL_43A;
							}
							break;
						}
					}
					else
					{
						if (num == 28)
						{
							result = this.commitTransactionStatement();
							goto IL_661;
						}
						if (num == 33)
						{
							result = this.continueStatement();
							goto IL_661;
						}
						switch (num)
						{
						case 44:
							result = this.dbccStatement();
							goto IL_661;
						case 45:
							result = this.deallocateCursorStatement();
							goto IL_661;
						case 46:
							result = this.declareStatements();
							goto IL_661;
						case 47:
						case 48:
							goto IL_43A;
						case 49:
							result = this.denyStatement90();
							goto IL_661;
						default:
							goto IL_43A;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 54:
						result = this.dropStatements();
						goto IL_661;
					case 55:
						goto IL_43A;
					case 56:
						result = this.endConversationStatement();
						goto IL_661;
					default:
						if (num == 64)
						{
							result = this.fetchCursorStatement();
							goto IL_661;
						}
						switch (num)
						{
						case 74:
							result = this.gotoStatement();
							goto IL_661;
						case 75:
							result = this.grantStatement90();
							goto IL_661;
						default:
							goto IL_43A;
						}
						break;
					}
				}
				else
				{
					if (num == 82)
					{
						result = this.ifStatement();
						goto IL_661;
					}
					if (num == 92)
					{
						result = this.killStatements();
						goto IL_661;
					}
					if (num != 95)
					{
						goto IL_43A;
					}
					result = this.lineNoStatement();
					goto IL_661;
				}
				IL_296:
				result = this.backupStatements();
				goto IL_661;
				IL_43A:
				if (this.LA(1) == 35 && this.LA(2) == 148)
				{
					result = this.createTableStatement();
				}
				else if (this.LA(1) == 6 && this.LA(2) == 148)
				{
					result = this.alterTableStatement();
				}
				else if (this.LA(1) == 35 && TSql90ParserInternal.tokenSet_12_.member(this.LA(2)))
				{
					result = this.createIndexStatement();
				}
				else if (this.LA(1) == 35 && this.LA(2) == 146)
				{
					result = this.createStatisticsStatement();
				}
				else if (this.LA(1) == 160 && this.LA(2) == 146)
				{
					result = this.updateStatisticsStatement();
				}
				else if (this.LA(1) == 6 && this.LA(2) == 43)
				{
					result = this.alterDatabaseStatements();
				}
				else if ((this.LA(1) == 60 || this.LA(1) == 61) && TSql90ParserInternal.tokenSet_13_.member(this.LA(2)))
				{
					result = this.executeStatement();
				}
				else if (TSql90ParserInternal.tokenSet_14_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_15_.member(this.LA(2)))
				{
					result = this.withCommonTableExpressionsAndXmlNamespacesStatements();
				}
				else if (this.LA(1) == 6 && TSql90ParserInternal.tokenSet_16_.member(this.LA(2)))
				{
					result = this.alter2005Statements();
				}
				else if (this.LA(1) == 35 && (this.LA(2) == 118 || this.LA(2) == 163 || this.LA(2) == 232))
				{
					result = this.create2005Statements();
				}
				else if (this.LA(1) == 35 && this.LA(2) == 43)
				{
					result = this.createDatabaseStatement();
				}
				else if (this.LA(1) == 86 && this.LA(2) == 17)
				{
					result = this.insertBulkStatement();
				}
				else
				{
					if ((this.LA(1) != 60 && this.LA(1) != 61) || this.LA(2) != 9)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					result = this.executeAsStatement();
				}
				IL_661:;
			}
			catch (TSqlParseErrorException ex)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				if (!ex.DoNotLog)
				{
					base.AddParseError(ex.ParseError);
				}
				base.RecoverAtStatementLevel(line, column);
			}
			catch (NoViableAltException ex2)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError faultTolerantUnexpectedTokenError = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex2.token, ex2, this._tokenSource.LastToken.Offset);
				base.AddParseError(faultTolerantUnexpectedTokenError);
				base.RecoverAtStatementLevel(line, column);
			}
			catch (MismatchedTokenException ex3)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError faultTolerantUnexpectedTokenError2 = TSql80ParserBaseInternal.GetFaultTolerantUnexpectedTokenError(ex3.token, ex3, this._tokenSource.LastToken.Offset);
				base.AddParseError(faultTolerantUnexpectedTokenError2);
				base.RecoverAtStatementLevel(line, column);
			}
			catch (RecognitionException)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError unexpectedTokenError = base.GetUnexpectedTokenError();
				base.AddParseError(unexpectedTokenError);
				base.RecoverAtStatementLevel(line, column);
			}
			catch (TokenStreamRecognitionException exception)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				ParseError parseError = TSql80ParserBaseInternal.ProcessTokenStreamRecognitionException(exception, this._tokenSource.LastToken.Offset);
				base.AddParseError(parseError);
				base.RecoverAtStatementLevel(line, column);
			}
			catch (ANTLRException exception2)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				base.CreateInternalError("statement", exception2);
			}
			return result;
		}

		// Token: 0x060014A9 RID: 5289 RVA: 0x000796B0 File Offset: 0x000778B0
		public void optSemicolons(TSqlStatement vParent)
		{
			int num = 0;
			while (this.LA(1) == 204 && TSql90ParserInternal.tokenSet_17_.member(this.LA(2)))
			{
				IToken token = this.LT(1);
				this.match(204);
				if (this.inputState.guessing == 0)
				{
					num++;
					if (vParent != null)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					}
				}
			}
		}

		// Token: 0x060014AA RID: 5290 RVA: 0x00079714 File Offset: 0x00077914
		public TSqlStatement lastStatement()
		{
			TSqlStatement result;
			if (this.LA(1) == 35 && (this.LA(2) == 120 || this.LA(2) == 121))
			{
				result = this.createProcedureStatement();
			}
			else if (this.LA(1) == 6 && (this.LA(2) == 120 || this.LA(2) == 121))
			{
				result = this.alterProcedureStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 155)
			{
				result = this.createTriggerStatement();
			}
			else if (this.LA(1) == 6 && this.LA(2) == 155)
			{
				result = this.alterTriggerStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 47)
			{
				result = this.createDefaultStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 137)
			{
				result = this.createRuleStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 166)
			{
				result = this.createViewStatement();
			}
			else if (this.LA(1) == 6 && this.LA(2) == 166)
			{
				result = this.alterViewStatement();
			}
			else if (this.LA(1) == 35 && this.LA(2) == 73)
			{
				result = this.createFunctionStatement();
			}
			else if (this.LA(1) == 6 && this.LA(2) == 73)
			{
				result = this.alterFunctionStatement();
			}
			else
			{
				if (this.LA(1) != 35 || this.LA(2) != 139)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.createSchemaStatement();
			}
			return result;
		}

		// Token: 0x060014AB RID: 5291 RVA: 0x000798C8 File Offset: 0x00077AC8
		public ExecutableProcedureReference execProc()
		{
			ExecutableProcedureReference executableProcedureReference = base.FragmentFactory.CreateFragment<ExecutableProcedureReference>();
			int num = this.LA(1);
			ProcedureReferenceName procedureReference;
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
					procedureReference = this.varObjectReference();
					goto IL_5B;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			procedureReference = this.procObjectReference();
			IL_5B:
			if (this.inputState.guessing == 0)
			{
				executableProcedureReference.ProcedureReference = procedureReference;
			}
			if (TSql90ParserInternal.tokenSet_18_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_19_.member(this.LA(2)))
			{
				this.setParamList(executableProcedureReference);
			}
			else if (!TSql90ParserInternal.tokenSet_20_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executableProcedureReference;
		}

		// Token: 0x060014AC RID: 5292 RVA: 0x000799B0 File Offset: 0x00077BB0
		public CreateTableStatement createTableStatement()
		{
			CreateTableStatement createTableStatement = base.FragmentFactory.CreateFragment<CreateTableStatement>();
			IToken token = this.LT(1);
			this.match(35);
			this.match(148);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTableStatement, token);
				createTableStatement.SchemaObjectName = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createTableStatement);
			}
			this.match(191);
			TableDefinition definition = this.tableDefinitionCreateTable();
			if (this.inputState.guessing == 0)
			{
				createTableStatement.Definition = definition;
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTableStatement, token2);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_364;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_364;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_364;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								goto IL_364;
							default:
								if (num == 28)
								{
									goto IL_364;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						goto IL_364;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_364;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								goto IL_364;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_364;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						goto IL_364;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						FileGroupOrPartitionScheme onFileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
						if (this.inputState.guessing == 0)
						{
							createTableStatement.OnFileGroupOrPartitionScheme = onFileGroupOrPartitionScheme;
							goto IL_364;
						}
						goto IL_364;
					}
					case 106:
						goto IL_364;
					default:
						if (num == 119)
						{
							goto IL_364;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_364;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_364;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_364;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_364;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_364;
				default:
					if (num == 191)
					{
						goto IL_364;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_364;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_364;
				default:
					if (num == 232)
					{
						goto IL_364;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_364:
			if (this.LA(1) == 232 && this.LA(2) >= 230 && this.LA(2) <= 233)
			{
				IToken token3 = this.LT(1);
				this.match(232);
				IdentifierOrValueExpression textImageOn = this.stringOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "TEXTIMAGE_ON");
					createTableStatement.TextImageOn = textImageOn;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createTableStatement;
		}

		// Token: 0x060014AD RID: 5293 RVA: 0x00079DC4 File Offset: 0x00077FC4
		public AlterTableStatement alterTableStatement()
		{
			AlterTableStatement alterTableStatement = null;
			IToken token = null;
			SchemaObjectName schemaObjectName = null;
			ConstraintEnforcement vExistingRowsCheck = ConstraintEnforcement.NotSpecified;
			try
			{
				token = this.LT(1);
				this.match(6);
				this.match(148);
				schemaObjectName = this.schemaObjectThreePartName();
				int num = this.LA(1);
				if (num <= 21)
				{
					switch (num)
					{
					case 4:
						break;
					case 5:
						goto IL_122;
					case 6:
						alterTableStatement = this.alterTableAlterColumnStatement();
						goto IL_18D;
					default:
						if (num != 21)
						{
							goto IL_122;
						}
						break;
					}
				}
				else
				{
					if (num == 54)
					{
						alterTableStatement = this.alterTableDropTableElementStatement();
						goto IL_18D;
					}
					if (num != 97 && num != 171)
					{
						goto IL_122;
					}
				}
				int num2 = this.LA(1);
				if (num2 <= 21)
				{
					if (num2 == 4 || num2 == 21)
					{
						goto IL_DC;
					}
				}
				else
				{
					if (num2 == 97)
					{
						goto IL_DC;
					}
					if (num2 == 171)
					{
						this.match(171);
						vExistingRowsCheck = this.constraintEnforcement();
						goto IL_DC;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_DC:
				int num3 = this.LA(1);
				if (num3 == 4)
				{
					alterTableStatement = this.alterTableAddTableElementStatement(vExistingRowsCheck);
					goto IL_18D;
				}
				if (num3 != 21 && num3 != 97)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				alterTableStatement = this.alterTableConstraintModificationStatement(vExistingRowsCheck);
				goto IL_18D;
				IL_122:
				if (this.LA(1) == 232 && this.LA(2) == 155)
				{
					alterTableStatement = this.alterTableTriggerModificationStatement();
				}
				else
				{
					if (this.LA(1) != 232 || (this.LA(2) != 151 && this.LA(2) != 232))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					alterTableStatement = this.alterTableSwitchStatement();
				}
				IL_18D:
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableStatement, token);
					alterTableStatement.SchemaObjectName = schemaObjectName;
				}
			}
			catch (PhaseOnePartialAstException ex)
			{
				if (this.inputState.guessing == 0)
				{
					AlterTableStatement alterTableStatement2 = ex.Statement as AlterTableStatement;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableStatement2, token);
					alterTableStatement2.SchemaObjectName = schemaObjectName;
					throw;
				}
				throw;
			}
			return alterTableStatement;
		}

		// Token: 0x060014AE RID: 5294 RVA: 0x00079FCC File Offset: 0x000781CC
		public CreateIndexStatement createIndexStatement()
		{
			CreateIndexStatement createIndexStatement = base.FragmentFactory.CreateFragment<CreateIndexStatement>();
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createIndexStatement, token);
			}
			int num = this.LA(1);
			if (num <= 84)
			{
				if (num == 24 || num == 84)
				{
					goto IL_94;
				}
			}
			else
			{
				if (num == 98)
				{
					goto IL_94;
				}
				if (num == 159)
				{
					this.match(159);
					if (this.inputState.guessing == 0)
					{
						createIndexStatement.Unique = true;
						goto IL_94;
					}
					goto IL_94;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_94:
			int num2 = this.LA(1);
			if (num2 != 24)
			{
				if (num2 != 84)
				{
					if (num2 != 98)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(98);
					if (this.inputState.guessing == 0)
					{
						createIndexStatement.Clustered = new bool?(false);
					}
				}
			}
			else
			{
				this.match(24);
				if (this.inputState.guessing == 0)
				{
					createIndexStatement.Clustered = new bool?(true);
				}
			}
			this.match(84);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createIndexStatement.Name = name;
			}
			this.match(105);
			SchemaObjectName onName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				createIndexStatement.OnName = onName;
				base.ThrowPartialAstIfPhaseOne(createIndexStatement);
			}
			this.match(191);
			ColumnWithSortOrder item = this.columnWithSortOrder();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(createIndexStatement, createIndexStatement.Columns, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.columnWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(createIndexStatement, createIndexStatement.Columns, item);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createIndexStatement, token2);
			}
			if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("INCLUDE"))
			{
				this.LT(1);
				this.match(232);
				this.identifierColumnList(createIndexStatement, createIndexStatement.IncludeColumns);
			}
			else if (!TSql90ParserInternal.tokenSet_21_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && (this.LA(2) == 66 || this.LA(2) == 191 || this.LA(2) == 232))
			{
				this.match(171);
				int num3 = this.LA(1);
				if (num3 != 66)
				{
					if (num3 == 191)
					{
						this.indexOptionList(IndexAffectingStatement.CreateIndex, createIndexStatement.IndexOptions, createIndexStatement);
						goto IL_34D;
					}
					if (num3 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				this.indexLegacyOptionList(createIndexStatement);
				if (this.inputState.guessing == 0)
				{
					createIndexStatement.Translated80SyntaxTo90 = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_21_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IL_34D:
			int num4 = this.LA(1);
			if (num4 <= 92)
			{
				if (num4 <= 28)
				{
					if (num4 <= 6)
					{
						if (num4 == 1)
						{
							return createIndexStatement;
						}
						switch (num4)
						{
						case 4:
						case 6:
							return createIndexStatement;
						}
					}
					else
					{
						switch (num4)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return createIndexStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num4)
							{
							case 22:
							case 23:
								return createIndexStatement;
							default:
								if (num4 == 28)
								{
									return createIndexStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num4 <= 75)
				{
					switch (num4)
					{
					case 33:
					case 35:
						return createIndexStatement;
					case 34:
						break;
					default:
						switch (num4)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return createIndexStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num4)
							{
							case 74:
							case 75:
								return createIndexStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num4 == 82 || num4 == 86 || num4 == 92)
				{
					return createIndexStatement;
				}
			}
			else if (num4 <= 172)
			{
				if (num4 <= 119)
				{
					if (num4 == 95)
					{
						return createIndexStatement;
					}
					switch (num4)
					{
					case 105:
					{
						this.match(105);
						FileGroupOrPartitionScheme onFileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
						if (this.inputState.guessing == 0)
						{
							createIndexStatement.OnFileGroupOrPartitionScheme = onFileGroupOrPartitionScheme;
							return createIndexStatement;
						}
						return createIndexStatement;
					}
					case 106:
						return createIndexStatement;
					default:
						if (num4 == 119)
						{
							return createIndexStatement;
						}
						break;
					}
				}
				else
				{
					switch (num4)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createIndexStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num4)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createIndexStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num4)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createIndexStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num4 <= 191)
			{
				if (num4 == 176)
				{
					return createIndexStatement;
				}
				switch (num4)
				{
				case 180:
				case 181:
					return createIndexStatement;
				default:
					if (num4 == 191)
					{
						return createIndexStatement;
					}
					break;
				}
			}
			else
			{
				if (num4 == 204)
				{
					return createIndexStatement;
				}
				switch (num4)
				{
				case 219:
				case 220:
					return createIndexStatement;
				default:
					if (num4 == 232)
					{
						return createIndexStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060014AF RID: 5295 RVA: 0x0007A5E4 File Offset: 0x000787E4
		public TSqlStatement declareStatements()
		{
			TSqlStatement tsqlStatement = null;
			IToken token = null;
			token = this.LT(1);
			this.match(46);
			bool flag = false;
			if (this.LA(1) == 234 && (this.LA(2) == 9 || this.LA(2) == 148))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(234);
					int num = this.LA(1);
					if (num != 9)
					{
						if (num != 148)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(9);
					}
					this.match(148);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				DeclareTableVariableBody body = this.declareTableBody(IndexAffectingStatement.DeclareTableVariable);
				if (this.inputState.guessing == 0)
				{
					DeclareTableVariableStatement declareTableVariableStatement = base.FragmentFactory.CreateFragment<DeclareTableVariableStatement>();
					declareTableVariableStatement.Body = body;
					tsqlStatement = declareTableVariableStatement;
				}
			}
			else if (this.LA(1) == 234 && TSql90ParserInternal.tokenSet_22_.member(this.LA(2)))
			{
				tsqlStatement = this.declareVariableStatement();
			}
			else
			{
				if (this.LA(1) != 232 && this.LA(1) != 233)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.declareCursorStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x060014B0 RID: 5296 RVA: 0x0007A77C File Offset: 0x0007897C
		public TSqlStatement setStatements()
		{
			IToken token = this.LT(1);
			this.match(142);
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num <= 135)
			{
				if (num <= 80)
				{
					if (num == 57)
					{
						tsqlStatement = this.setErrorLevelStatement();
						goto IL_16E;
					}
					if (num == 80)
					{
						tsqlStatement = this.setIdentityInsertStatement();
						goto IL_16E;
					}
				}
				else
				{
					if (num == 104)
					{
						tsqlStatement = this.setOffsetsStatement();
						goto IL_16E;
					}
					if (num == 135)
					{
						tsqlStatement = this.setRowcountStatement();
						goto IL_16E;
					}
				}
			}
			else if (num <= 149)
			{
				if (num == 146)
				{
					tsqlStatement = this.setStatisticsStatement();
					goto IL_16E;
				}
				if (num == 149)
				{
					tsqlStatement = this.setTextSizeStatement();
					goto IL_16E;
				}
			}
			else
			{
				switch (num)
				{
				case 153:
				case 154:
					tsqlStatement = this.setTransactionIsolationLevelStatement();
					goto IL_16E;
				default:
					if (num == 234)
					{
						tsqlStatement = this.setVariableStatement();
						goto IL_16E;
					}
					break;
				}
			}
			if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 105 || this.LA(2) == 198) && !base.NextTokenMatches("FIPS_FLAGGER"))
			{
				tsqlStatement = this.predicateSetStatement();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_23_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.setCommandStatement();
			}
			IL_16E:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x060014B1 RID: 5297 RVA: 0x0007A90C File Offset: 0x00078B0C
		public TSqlStatement beginStatements()
		{
			bool flag = false;
			if (this.LA(1) == 13 && (this.LA(2) == 52 || this.LA(2) == 153 || this.LA(2) == 154))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(13);
					int num = this.LA(1);
					if (num != 52)
					{
						switch (num)
						{
						case 153:
						case 154:
							break;
						default:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(52);
					}
					switch (this.LA(1))
					{
					case 153:
						this.match(153);
						break;
					case 154:
						this.match(154);
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			TSqlStatement result;
			if (flag)
			{
				result = this.beginTransactionStatement();
			}
			else if (this.LA(1) == 13 && this.LA(2) == 232 && base.NextTokenMatches("TRY", 2))
			{
				result = this.tryCatchStatement();
			}
			else if (this.LA(1) == 13 && this.LA(2) == 232 && base.NextTokenMatches("CONVERSATION", 2))
			{
				result = this.beginConversationTimerStatement();
			}
			else if (this.LA(1) == 13 && this.LA(2) == 232 && base.NextTokenMatches("DIALOG", 2))
			{
				result = this.beginDialogStatement();
			}
			else
			{
				if (this.LA(1) != 13 || !TSql90ParserInternal.tokenSet_24_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.beginEndBlockStatement();
			}
			return result;
		}

		// Token: 0x060014B2 RID: 5298 RVA: 0x0007AB14 File Offset: 0x00078D14
		public BreakStatement breakStatement()
		{
			BreakStatement breakStatement = base.FragmentFactory.CreateFragment<BreakStatement>();
			IToken token = this.LT(1);
			this.match(15);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(breakStatement, token);
			}
			return breakStatement;
		}

		// Token: 0x060014B3 RID: 5299 RVA: 0x0007AB54 File Offset: 0x00078D54
		public ContinueStatement continueStatement()
		{
			ContinueStatement continueStatement = base.FragmentFactory.CreateFragment<ContinueStatement>();
			IToken token = this.LT(1);
			this.match(33);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(continueStatement, token);
			}
			return continueStatement;
		}

		// Token: 0x060014B4 RID: 5300 RVA: 0x0007AB94 File Offset: 0x00078D94
		public IfStatement ifStatement()
		{
			IfStatement ifStatement = base.FragmentFactory.CreateFragment<IfStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(82);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(ifStatement, token);
			}
			BooleanExpression predicate = this.booleanExpression();
			if (this.inputState.guessing == 0)
			{
				ifStatement.Predicate = predicate;
			}
			TSqlStatement tsqlStatement = this.statementOptSemi();
			if (this.inputState.guessing == 0)
			{
				if (tsqlStatement == null)
				{
					flag = true;
				}
				else
				{
					ifStatement.ThenStatement = tsqlStatement;
				}
			}
			if (this.LA(1) == 55 && TSql90ParserInternal.tokenSet_3_.member(this.LA(2)))
			{
				this.match(55);
				tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement == null)
					{
						flag = true;
					}
					else
					{
						ifStatement.ElseStatement = tsqlStatement;
					}
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0 && flag)
			{
				ifStatement = null;
			}
			return ifStatement;
		}

		// Token: 0x060014B5 RID: 5301 RVA: 0x0007ACAC File Offset: 0x00078EAC
		public WhileStatement whileStatement()
		{
			WhileStatement whileStatement = base.FragmentFactory.CreateFragment<WhileStatement>();
			IToken token = this.LT(1);
			this.match(170);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(whileStatement, token);
			}
			BooleanExpression predicate = this.booleanExpression();
			if (this.inputState.guessing == 0)
			{
				whileStatement.Predicate = predicate;
			}
			TSqlStatement tsqlStatement = this.statementOptSemi();
			if (this.inputState.guessing == 0)
			{
				if (tsqlStatement == null)
				{
					whileStatement = null;
				}
				else
				{
					whileStatement.Statement = tsqlStatement;
				}
			}
			return whileStatement;
		}

		// Token: 0x060014B6 RID: 5302 RVA: 0x0007AD2C File Offset: 0x00078F2C
		public LabelStatement labelStatement()
		{
			LabelStatement labelStatement = base.FragmentFactory.CreateFragment<LabelStatement>();
			IToken token = this.LT(1);
			this.match(220);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(labelStatement, token);
				labelStatement.Value = token.getText();
			}
			return labelStatement;
		}

		// Token: 0x060014B7 RID: 5303 RVA: 0x0007AD7C File Offset: 0x00078F7C
		public TSqlStatement backupStatements()
		{
			IToken token = this.backupStart();
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE"))
			{
				tsqlStatement = this.backupCertificateStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SERVICE"))
			{
				tsqlStatement = this.backupServiceMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				tsqlStatement = this.backupMasterKeyStatement();
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_25_.member(this.LA(1)) || this.LA(2) < 232 || this.LA(2) > 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.backupStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x060014B8 RID: 5304 RVA: 0x0007AE88 File Offset: 0x00079088
		public TSqlStatement restoreStatements()
		{
			IToken token = this.restoreStart();
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("SERVICE"))
			{
				tsqlStatement = this.restoreServiceMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				tsqlStatement = this.restoreMasterKeyStatement();
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_25_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_26_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.restoreStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x060014B9 RID: 5305 RVA: 0x0007AF48 File Offset: 0x00079148
		public GoToStatement gotoStatement()
		{
			GoToStatement goToStatement = base.FragmentFactory.CreateFragment<GoToStatement>();
			IToken token = this.LT(1);
			this.match(74);
			Identifier labelName = this.nonQuotedIdentifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(goToStatement, token);
				goToStatement.LabelName = labelName;
			}
			return goToStatement;
		}

		// Token: 0x060014BA RID: 5306 RVA: 0x0007AF98 File Offset: 0x00079198
		public SaveTransactionStatement saveTransactionStatement()
		{
			SaveTransactionStatement saveTransactionStatement = base.FragmentFactory.CreateFragment<SaveTransactionStatement>();
			IToken token = this.LT(1);
			this.match(138);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(saveTransactionStatement, token);
			}
			switch (this.LA(1))
			{
			case 153:
				this.match(153);
				break;
			case 154:
				this.match(154);
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.transactionName(saveTransactionStatement);
			return saveTransactionStatement;
		}

		// Token: 0x060014BB RID: 5307 RVA: 0x0007B030 File Offset: 0x00079230
		public RollbackTransactionStatement rollbackTransactionStatement()
		{
			RollbackTransactionStatement rollbackTransactionStatement = base.FragmentFactory.CreateFragment<RollbackTransactionStatement>();
			IToken token = this.LT(1);
			this.match(134);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(rollbackTransactionStatement, token);
			}
			bool flag = false;
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_17_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(232);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "WORK");
				}
			}
			else if (this.LA(1) == 153 || this.LA(1) == 154)
			{
				switch (this.LA(1))
				{
				case 153:
				{
					IToken token3 = this.LT(1);
					this.match(153);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(rollbackTransactionStatement, token3);
					}
					break;
				}
				case 154:
				{
					IToken token4 = this.LT(1);
					this.match(154);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(rollbackTransactionStatement, token4);
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (TSql90ParserInternal.tokenSet_27_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_28_.member(this.LA(2)))
				{
					this.transactionName(rollbackTransactionStatement);
				}
				else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return rollbackTransactionStatement;
		}

		// Token: 0x060014BC RID: 5308 RVA: 0x0007B278 File Offset: 0x00079478
		public CommitTransactionStatement commitTransactionStatement()
		{
			CommitTransactionStatement commitTransactionStatement = base.FragmentFactory.CreateFragment<CommitTransactionStatement>();
			IToken token = this.LT(1);
			this.match(28);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(commitTransactionStatement, token);
			}
			bool flag = false;
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_17_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(232);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "WORK");
				}
			}
			else if (this.LA(1) == 153 || this.LA(1) == 154)
			{
				switch (this.LA(1))
				{
				case 153:
				{
					IToken token3 = this.LT(1);
					this.match(153);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(commitTransactionStatement, token3);
					}
					break;
				}
				case 154:
				{
					IToken token4 = this.LT(1);
					this.match(154);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(commitTransactionStatement, token4);
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (TSql90ParserInternal.tokenSet_27_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_28_.member(this.LA(2)))
				{
					this.transactionName(commitTransactionStatement);
				}
				else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return commitTransactionStatement;
		}

		// Token: 0x060014BD RID: 5309 RVA: 0x0007B4C0 File Offset: 0x000796C0
		public CreateStatisticsStatement createStatisticsStatement()
		{
			CreateStatisticsStatement createStatisticsStatement = base.FragmentFactory.CreateFragment<CreateStatisticsStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(35);
			IToken token2 = this.LT(1);
			this.match(146);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createStatisticsStatement, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(createStatisticsStatement, token2);
				createStatisticsStatement.Name = name;
			}
			this.match(105);
			SchemaObjectName onName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				createStatisticsStatement.OnName = onName;
				base.ThrowPartialAstIfPhaseOne(createStatisticsStatement);
			}
			this.identifierColumnList(createStatisticsStatement, createStatisticsStatement.Columns);
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				StatisticsOption item = this.createStatisticsStatementWithOption(ref flag);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<StatisticsOption>(createStatisticsStatement, createStatisticsStatement.StatisticsOptions, item);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					item = this.createStatisticsStatementWithOption(ref flag);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<StatisticsOption>(createStatisticsStatement, createStatisticsStatement.StatisticsOptions, item);
					}
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createStatisticsStatement;
		}

		// Token: 0x060014BE RID: 5310 RVA: 0x0007B62C File Offset: 0x0007982C
		public UpdateStatisticsStatement updateStatisticsStatement()
		{
			UpdateStatisticsStatement updateStatisticsStatement = base.FragmentFactory.CreateFragment<UpdateStatisticsStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(160);
			this.match(146);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateStatisticsStatement, token);
				updateStatisticsStatement.SchemaObjectName = schemaObjectName;
			}
			bool flag2 = false;
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				int pos = this.mark();
				flag2 = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.identifier();
				}
				catch (RecognitionException)
				{
					flag2 = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag2)
			{
				this.columnNameList(updateStatisticsStatement, updateStatisticsStatement.SubElements);
			}
			else if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_17_.member(this.LA(2)))
			{
				Identifier item = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(updateStatisticsStatement, updateStatisticsStatement.SubElements, item);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && TSql90ParserInternal.tokenSet_29_.member(this.LA(2)))
			{
				this.match(171);
				StatisticsOption item2 = this.updateStatisticsStatementWithOption(ref flag);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<StatisticsOption>(updateStatisticsStatement, updateStatisticsStatement.StatisticsOptions, item2);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					item2 = this.updateStatisticsStatementWithOption(ref flag);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<StatisticsOption>(updateStatisticsStatement, updateStatisticsStatement.StatisticsOptions, item2);
					}
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return updateStatisticsStatement;
		}

		// Token: 0x060014BF RID: 5311 RVA: 0x0007B88C File Offset: 0x00079A8C
		public AlterDatabaseStatement alterDatabaseStatements()
		{
			AlterDatabaseStatement alterDatabaseStatement = null;
			IToken token = null;
			Identifier databaseName = null;
			try
			{
				token = this.LT(1);
				this.match(6);
				this.match(43);
				int num = this.LA(1);
				if (num != 226)
				{
					switch (num)
					{
					case 232:
					case 233:
						databaseName = this.identifier();
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					databaseName = this.sqlCommandIdentifier();
				}
				int num2 = this.LA(1);
				if (num2 != 4)
				{
					if (num2 != 26)
					{
						if (num2 != 142)
						{
							if (this.LA(1) == 232 && (this.LA(2) == 65 || this.LA(2) == 232) && base.NextTokenMatches("REMOVE"))
							{
								alterDatabaseStatement = this.alterDbRemove();
							}
							else if (this.LA(1) == 232 && (this.LA(2) == 65 || this.LA(2) == 232) && base.NextTokenMatches("MODIFY"))
							{
								alterDatabaseStatement = this.alterDbModify();
							}
							else
							{
								if (this.LA(1) != 232 || this.LA(2) != 232)
								{
									throw new NoViableAltException(this.LT(1), this.getFilename());
								}
								alterDatabaseStatement = this.alterDbRebuild();
							}
						}
						else
						{
							alterDatabaseStatement = this.alterDbSet();
						}
					}
					else
					{
						alterDatabaseStatement = this.alterDbCollate();
					}
				}
				else
				{
					alterDatabaseStatement = this.alterDbAdd();
				}
				if (this.inputState.guessing == 0)
				{
					alterDatabaseStatement.DatabaseName = databaseName;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseStatement, token);
					base.ThrowPartialAstIfPhaseOne(alterDatabaseStatement);
				}
			}
			catch (PhaseOnePartialAstException ex)
			{
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(ex.Statement, token);
					(ex.Statement as AlterDatabaseStatement).DatabaseName = databaseName;
					throw;
				}
				throw;
			}
			return alterDatabaseStatement;
		}

		// Token: 0x060014C0 RID: 5312 RVA: 0x0007BA6C File Offset: 0x00079C6C
		public ExecuteStatement executeStatement()
		{
			ExecuteStatement executeStatement = base.FragmentFactory.CreateFragment<ExecuteStatement>();
			ExecuteSpecification executeSpecification = this.executeSpecification();
			if (this.inputState.guessing == 0)
			{
				executeStatement.ExecuteSpecification = executeSpecification;
				base.ThrowPartialAstIfPhaseOne(executeStatement);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				ExecuteOption item = this.executeOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExecuteOption>(executeStatement, executeStatement.Options, item);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executeStatement;
		}

		// Token: 0x060014C1 RID: 5313 RVA: 0x0007BB2C File Offset: 0x00079D2C
		public StatementWithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespacesStatements()
		{
			WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = null;
			int num = this.LA(1);
			if (num <= 140)
			{
				if (num == 48 || num == 86 || num == 140)
				{
					goto IL_5E;
				}
			}
			else
			{
				if (num == 160)
				{
					goto IL_5E;
				}
				if (num == 171)
				{
					withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
					goto IL_5E;
				}
				if (num == 191)
				{
					goto IL_5E;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_5E:
			int num2 = this.LA(1);
			StatementWithCtesAndXmlNamespaces statementWithCtesAndXmlNamespaces;
			if (num2 > 86)
			{
				if (num2 != 140)
				{
					if (num2 == 160)
					{
						statementWithCtesAndXmlNamespaces = this.updateStatement();
						goto IL_C6;
					}
					if (num2 != 191)
					{
						goto IL_B3;
					}
				}
				statementWithCtesAndXmlNamespaces = this.select();
				goto IL_C6;
			}
			if (num2 == 48)
			{
				statementWithCtesAndXmlNamespaces = this.deleteStatement();
				goto IL_C6;
			}
			if (num2 == 86)
			{
				statementWithCtesAndXmlNamespaces = this.insertStatement();
				goto IL_C6;
			}
			IL_B3:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_C6:
			if (this.inputState.guessing == 0)
			{
				statementWithCtesAndXmlNamespaces.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
			}
			return statementWithCtesAndXmlNamespaces;
		}

		// Token: 0x060014C2 RID: 5314 RVA: 0x0007BC14 File Offset: 0x00079E14
		public TSqlStatement raiseErrorStatements()
		{
			IToken token = this.LT(1);
			this.match(123);
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num <= 199)
			{
				if (num == 191)
				{
					tsqlStatement = this.raiseErrorStatement();
					goto IL_6D;
				}
				if (num != 199)
				{
					goto IL_5A;
				}
			}
			else if (num != 221 && num != 234)
			{
				goto IL_5A;
			}
			tsqlStatement = this.raiseErrorLegacyStatement();
			goto IL_6D;
			IL_5A:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_6D:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x060014C3 RID: 5315 RVA: 0x0007BCA4 File Offset: 0x00079EA4
		public TSqlStatement alter2005Statements()
		{
			IToken token = this.LT(1);
			this.match(6);
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num <= 84)
			{
				if (num == 11)
				{
					tsqlStatement = this.alterAuthorizationStatement();
					goto IL_4C9;
				}
				if (num == 84)
				{
					tsqlStatement = this.alterIndexStatement();
					goto IL_4C9;
				}
			}
			else
			{
				if (num == 139)
				{
					tsqlStatement = this.alterSchemaStatement();
					goto IL_4C9;
				}
				if (num == 163)
				{
					tsqlStatement = this.alterUserStatement();
					goto IL_4C9;
				}
			}
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("APPLICATION"))
			{
				tsqlStatement = this.alterApplicationRoleStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ASSEMBLY"))
			{
				tsqlStatement = this.alterAssemblyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("ASYMMETRIC"))
			{
				tsqlStatement = this.alterAsymmetricKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("REMOTE"))
			{
				tsqlStatement = this.alterRemoteServiceBindingStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE"))
			{
				tsqlStatement = this.alterCertificateStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CREDENTIAL"))
			{
				tsqlStatement = this.alterCredentialStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ENDPOINT"))
			{
				tsqlStatement = this.alterEndpointStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 232) && base.NextTokenMatches("FULLTEXT"))
			{
				tsqlStatement = this.alterFulltextStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("LOGIN"))
			{
				tsqlStatement = this.alterLoginStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
			{
				tsqlStatement = this.alterMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE"))
			{
				tsqlStatement = this.alterMessageTypeStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 73 || this.LA(2) == 232) && base.NextTokenMatches("PARTITION"))
			{
				tsqlStatement = this.alterPartitionStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE"))
			{
				tsqlStatement = this.alterQueueStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROLE"))
			{
				tsqlStatement = this.alterRoleStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROUTE"))
			{
				tsqlStatement = this.alterRouteStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SERVICE"))
			{
				tsqlStatement = this.alterServiceStatements();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC"))
			{
				tsqlStatement = this.alterSymmetricKeyStatement();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 139 || !base.NextTokenMatches("XML"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.alterXmlSchemaCollectionStatement();
			}
			IL_4C9:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
				base.ThrowPartialAstIfPhaseOne(tsqlStatement);
			}
			return tsqlStatement;
		}

		// Token: 0x060014C4 RID: 5316 RVA: 0x0007C198 File Offset: 0x0007A398
		public TSqlStatement create2005Statements()
		{
			TSqlStatement tsqlStatement = null;
			IToken token = null;
			try
			{
				token = this.LT(1);
				this.match(35);
				int num = this.LA(1);
				if (num != 118)
				{
					if (num != 163)
					{
						if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AGGREGATE"))
						{
							tsqlStatement = this.createAggregateStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("APPLICATION"))
						{
							tsqlStatement = this.createApplicationRoleStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ASSEMBLY"))
						{
							tsqlStatement = this.createAssemblyStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("ASYMMETRIC"))
						{
							tsqlStatement = this.createAsymmetricKeyStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE"))
						{
							tsqlStatement = this.createCertificateStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CONTRACT"))
						{
							tsqlStatement = this.createContractStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CREDENTIAL"))
						{
							tsqlStatement = this.createCredentialStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ENDPOINT"))
						{
							tsqlStatement = this.createEndpointStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("EVENT"))
						{
							tsqlStatement = this.createEventNotificationStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 232) && base.NextTokenMatches("FULLTEXT"))
						{
							tsqlStatement = this.createFulltextStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 139) && base.NextTokenMatches("XML"))
						{
							tsqlStatement = this.createXmlStatements();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("LOGIN"))
						{
							tsqlStatement = this.createLoginStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE"))
						{
							tsqlStatement = this.createMessageTypeStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
						{
							tsqlStatement = this.createMasterKeyStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 73 || this.LA(2) == 232) && base.NextTokenMatches("PARTITION"))
						{
							tsqlStatement = this.createPartitionStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE"))
						{
							tsqlStatement = this.createQueueStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("REMOTE"))
						{
							tsqlStatement = this.createRemoteServiceBindingStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROLE"))
						{
							tsqlStatement = this.createRoleStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROUTE"))
						{
							tsqlStatement = this.createRouteStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SERVICE"))
						{
							tsqlStatement = this.createServiceStatement();
						}
						else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC"))
						{
							tsqlStatement = this.createSymmetricKeyStatement();
						}
						else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SYNONYM"))
						{
							tsqlStatement = this.createSynonymStatement();
						}
						else
						{
							if (this.LA(1) != 232 || (this.LA(2) != 200 && this.LA(2) != 232 && this.LA(2) != 233) || !base.NextTokenMatches("TYPE"))
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							tsqlStatement = this.createTypeStatement();
						}
					}
					else
					{
						tsqlStatement = this.createUserStatement();
					}
				}
				else
				{
					tsqlStatement = this.createPrimaryXmlIndexStatement();
				}
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
					base.ThrowPartialAstIfPhaseOne(tsqlStatement);
				}
			}
			catch (PhaseOnePartialAstException ex)
			{
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(ex.Statement, token);
					throw;
				}
				throw;
			}
			return tsqlStatement;
		}

		// Token: 0x060014C5 RID: 5317 RVA: 0x0007C818 File Offset: 0x0007AA18
		public CreateDatabaseStatement createDatabaseStatement()
		{
			CreateDatabaseStatement createDatabaseStatement = base.FragmentFactory.CreateFragment<CreateDatabaseStatement>();
			IToken token = this.LT(1);
			this.match(35);
			this.match(43);
			Identifier databaseName = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createDatabaseStatement.DatabaseName = databaseName;
				TSql80ParserBaseInternal.UpdateTokenInfo(createDatabaseStatement, token);
				base.ThrowPartialAstIfPhaseOne(createDatabaseStatement);
			}
			this.recoveryUnitList(createDatabaseStatement);
			this.collationOpt(createDatabaseStatement);
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_2E3;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_2E3;
						case 5:
							goto IL_2D0;
						default:
							switch (num)
							{
							case 9:
								break;
							case 10:
							case 11:
							case 14:
							case 16:
								goto IL_2D0;
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_2E3;
							default:
								goto IL_2D0;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_2E3;
						default:
							if (num == 28)
							{
								goto IL_2E3;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_2E3;
							case 34:
								goto IL_2D0;
							default:
								goto IL_2D0;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_2E3;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						goto IL_2D0;
					default:
						if (num != 67)
						{
							switch (num)
							{
							case 74:
							case 75:
								goto IL_2E3;
							default:
								goto IL_2D0;
							}
						}
						break;
					}
				}
				else
				{
					if (num != 82 && num != 86 && num != 92)
					{
						goto IL_2D0;
					}
					goto IL_2E3;
				}
				this.dbAddendums(createDatabaseStatement);
				goto IL_2E3;
			}
			if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						goto IL_2E3;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_2E3;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_2E3;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_2E3;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_2E3;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_2E3;
				default:
					if (num == 191)
					{
						goto IL_2E3;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_2E3;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_2E3;
				default:
					if (num == 232)
					{
						goto IL_2E3;
					}
					break;
				}
			}
			IL_2D0:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_2E3:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.withTrustOptionsOnOff(createDatabaseStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createDatabaseStatement;
		}

		// Token: 0x060014C6 RID: 5318 RVA: 0x0007CB68 File Offset: 0x0007AD68
		public AddSignatureStatement addSignatureStatement()
		{
			AddSignatureStatement addSignatureStatement = base.FragmentFactory.CreateFragment<AddSignatureStatement>();
			IToken token = this.LT(1);
			this.match(4);
			this.signatureType(addSignatureStatement);
			this.match(151);
			this.signableElement(addSignatureStatement);
			this.match(18);
			this.cryptoListWithOptionalPasswordSignature(addSignatureStatement);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(addSignatureStatement, token);
			}
			return addSignatureStatement;
		}

		// Token: 0x060014C7 RID: 5319 RVA: 0x0007CBD0 File Offset: 0x0007ADD0
		public TSqlStatement identifierStatements()
		{
			TSqlStatement result;
			if (this.LA(1) == 232 && this.LA(2) == 155 && base.NextTokenMatches("DISABLE"))
			{
				result = this.disableTriggerStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 155 && base.NextTokenMatches("ENABLE"))
			{
				result = this.enableTriggerStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MOVE"))
			{
				result = this.moveConversationStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("GET"))
			{
				result = this.getConversationGroupStatement();
			}
			else if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_30_.member(this.LA(2)) && base.NextTokenMatches("RECEIVE"))
			{
				result = this.receiveStatement();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 105 || !base.NextTokenMatches("SEND"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.sendStatement();
			}
			return result;
		}

		// Token: 0x060014C8 RID: 5320 RVA: 0x0007CD28 File Offset: 0x0007AF28
		public PrintStatement printStatement()
		{
			PrintStatement printStatement = base.FragmentFactory.CreateFragment<PrintStatement>();
			IToken token = this.LT(1);
			this.match(119);
			ScalarExpression expression = this.expression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(printStatement, token);
				printStatement.Expression = expression;
			}
			return printStatement;
		}

		// Token: 0x060014C9 RID: 5321 RVA: 0x0007CD78 File Offset: 0x0007AF78
		public WaitForStatement waitForStatement()
		{
			WaitForStatement waitForStatement = base.FragmentFactory.CreateFragment<WaitForStatement>();
			IToken token = this.LT(1);
			this.match(167);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(waitForStatement, token);
			}
			int num = this.LA(1);
			if (num == 191)
			{
				this.match(191);
				WaitForSupportedStatement statement = this.waitforInnerStatement();
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					waitForStatement.Statement = statement;
					waitForStatement.WaitForOption = WaitForOption.Statement;
					TSql80ParserBaseInternal.UpdateTokenInfo(waitForStatement, token2);
				}
				int num2 = this.LA(1);
				if (num2 <= 95)
				{
					if (num2 <= 35)
					{
						if (num2 <= 17)
						{
							if (num2 == 1)
							{
								return waitForStatement;
							}
							switch (num2)
							{
							case 4:
							case 6:
								return waitForStatement;
							case 5:
								break;
							default:
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									return waitForStatement;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 22:
							case 23:
								return waitForStatement;
							default:
								if (num2 == 28)
								{
									return waitForStatement;
								}
								switch (num2)
								{
								case 33:
								case 35:
									return waitForStatement;
								}
								break;
							}
						}
					}
					else if (num2 <= 82)
					{
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return waitForStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								return waitForStatement;
							default:
								if (num2 == 82)
								{
									return waitForStatement;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 86 || num2 == 92 || num2 == 95)
					{
						return waitForStatement;
					}
				}
				else if (num2 <= 176)
				{
					if (num2 <= 144)
					{
						if (num2 == 106 || num2 == 119)
						{
							return waitForStatement;
						}
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return waitForStatement;
						}
					}
					else
					{
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return waitForStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return waitForStatement;
							case 168:
							case 169:
								break;
							default:
								if (num2 == 176)
								{
									return waitForStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 198)
				{
					switch (num2)
					{
					case 180:
					case 181:
						return waitForStatement;
					default:
						if (num2 == 191)
						{
							return waitForStatement;
						}
						if (num2 == 198)
						{
							this.match(198);
							IToken token3 = this.LT(1);
							this.match(232);
							ScalarExpression timeout = this.signedIntegerOrVariable();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.Match(token3, "TIMEOUT");
								waitForStatement.Timeout = timeout;
								return waitForStatement;
							}
							return waitForStatement;
						}
						break;
					}
				}
				else
				{
					if (num2 == 204)
					{
						return waitForStatement;
					}
					switch (num2)
					{
					case 219:
					case 220:
						return waitForStatement;
					default:
						if (num2 == 232)
						{
							return waitForStatement;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token4 = this.LT(1);
			this.match(232);
			ValueExpression parameter = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				waitForStatement.WaitForOption = WaitForOptionHelper.Instance.ParseOption(token4);
				waitForStatement.Parameter = parameter;
			}
			return waitForStatement;
		}

		// Token: 0x060014CA RID: 5322 RVA: 0x0007D170 File Offset: 0x0007B370
		public ReadTextStatement readTextStatement()
		{
			ReadTextStatement readTextStatement = base.FragmentFactory.CreateFragment<ReadTextStatement>();
			IToken token = this.LT(1);
			this.match(125);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(readTextStatement, token);
			}
			ColumnReferenceExpression column = this.column();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(column, true);
				readTextStatement.Column = column;
			}
			ValueExpression valueExpression = this.binaryOrVariable();
			if (this.inputState.guessing == 0)
			{
				readTextStatement.TextPointer = valueExpression;
			}
			valueExpression = this.integerOrVariable();
			if (this.inputState.guessing == 0)
			{
				readTextStatement.Offset = valueExpression;
			}
			valueExpression = this.integerOrVariable();
			if (this.inputState.guessing == 0)
			{
				readTextStatement.Size = valueExpression;
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return readTextStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return readTextStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return readTextStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return readTextStatement;
							default:
								if (num == 28)
								{
									return readTextStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 78)
				{
					switch (num)
					{
					case 33:
					case 35:
						return readTextStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return readTextStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return readTextStatement;
							case 78:
							{
								IToken token2 = this.LT(1);
								this.match(78);
								if (this.inputState.guessing == 0)
								{
									TSql80ParserBaseInternal.UpdateTokenInfo(readTextStatement, token2);
									readTextStatement.HoldLock = true;
									return readTextStatement;
								}
								return readTextStatement;
							}
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return readTextStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return readTextStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return readTextStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return readTextStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return readTextStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return readTextStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return readTextStatement;
				default:
					if (num == 191)
					{
						return readTextStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return readTextStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return readTextStatement;
				default:
					if (num == 232)
					{
						return readTextStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060014CB RID: 5323 RVA: 0x0007D4F4 File Offset: 0x0007B6F4
		public UpdateTextStatement updateTextStatement()
		{
			UpdateTextStatement updateTextStatement = base.FragmentFactory.CreateFragment<UpdateTextStatement>();
			IToken token = this.LT(1);
			this.match(161);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateTextStatement, token);
			}
			this.modificationTextStatement(updateTextStatement);
			ScalarExpression scalarExpression = this.signedIntegerOrVariableOrNull();
			if (this.inputState.guessing == 0)
			{
				updateTextStatement.InsertOffset = scalarExpression;
			}
			scalarExpression = this.signedIntegerOrVariableOrNull();
			if (this.inputState.guessing == 0)
			{
				updateTextStatement.DeleteLength = scalarExpression;
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.modificationTextStatementWithLog(updateTextStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_31_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (TSql90ParserInternal.tokenSet_32_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_33_.member(this.LA(2)))
			{
				ColumnReferenceExpression columnReferenceExpression = this.column();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, true);
					updateTextStatement.SourceColumn = columnReferenceExpression;
				}
				ValueExpression sourceParameter = this.binaryOrVariable();
				if (this.inputState.guessing == 0)
				{
					updateTextStatement.SourceParameter = sourceParameter;
				}
			}
			else if (TSql90ParserInternal.tokenSet_34_.member(this.LA(1)))
			{
				ValueExpression sourceParameter = this.writeString();
				if (this.inputState.guessing == 0)
				{
					updateTextStatement.SourceParameter = sourceParameter;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return updateTextStatement;
		}

		// Token: 0x060014CC RID: 5324 RVA: 0x0007D6A4 File Offset: 0x0007B8A4
		public WriteTextStatement writeTextStatement()
		{
			WriteTextStatement writeTextStatement = base.FragmentFactory.CreateFragment<WriteTextStatement>();
			IToken token = this.LT(1);
			this.match(172);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(writeTextStatement, token);
			}
			this.modificationTextStatement(writeTextStatement);
			int num = this.LA(1);
			if (num <= 171)
			{
				if (num == 100)
				{
					goto IL_A1;
				}
				if (num == 171)
				{
					this.modificationTextStatementWithLog(writeTextStatement);
					goto IL_A1;
				}
			}
			else
			{
				if (num == 224)
				{
					goto IL_A1;
				}
				switch (num)
				{
				case 230:
				case 231:
				case 234:
					goto IL_A1;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_A1:
			ValueExpression sourceParameter = this.writeString();
			if (this.inputState.guessing == 0)
			{
				writeTextStatement.SourceParameter = sourceParameter;
			}
			return writeTextStatement;
		}

		// Token: 0x060014CD RID: 5325 RVA: 0x0007D770 File Offset: 0x0007B970
		public LineNoStatement lineNoStatement()
		{
			LineNoStatement lineNoStatement = base.FragmentFactory.CreateFragment<LineNoStatement>();
			IToken token = this.LT(1);
			this.match(95);
			IntegerLiteral lineNo = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(lineNoStatement, token);
				lineNoStatement.LineNo = lineNo;
			}
			return lineNoStatement;
		}

		// Token: 0x060014CE RID: 5326 RVA: 0x0007D7C0 File Offset: 0x0007B9C0
		public UseStatement useStatement()
		{
			UseStatement useStatement = base.FragmentFactory.CreateFragment<UseStatement>();
			IToken token = this.LT(1);
			this.match(162);
			Identifier databaseName = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(useStatement, token);
				useStatement.DatabaseName = databaseName;
			}
			return useStatement;
		}

		// Token: 0x060014CF RID: 5327 RVA: 0x0007D814 File Offset: 0x0007BA14
		public TSqlStatement killStatements()
		{
			IToken token = this.LT(1);
			this.match(92);
			TSqlStatement tsqlStatement;
			if (TSql90ParserInternal.tokenSet_35_.member(this.LA(1)))
			{
				tsqlStatement = this.killStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("QUERY"))
			{
				tsqlStatement = this.killQueryNotificationSubscriptionStatement();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.killStatsJobStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x060014D0 RID: 5328 RVA: 0x0007D8D0 File Offset: 0x0007BAD0
		public BulkInsertStatement bulkInsertStatement()
		{
			BulkInsertStatement bulkInsertStatement = base.FragmentFactory.CreateFragment<BulkInsertStatement>();
			IToken token = this.LT(1);
			this.match(17);
			this.match(86);
			SchemaObjectName to = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertStatement, token);
				bulkInsertStatement.To = to;
				base.ThrowPartialAstIfPhaseOne(bulkInsertStatement);
			}
			this.match(71);
			IdentifierOrValueExpression from = this.bulkInsertFrom();
			if (this.inputState.guessing == 0)
			{
				bulkInsertStatement.From = from;
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.bulkInsertOptions(bulkInsertStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return bulkInsertStatement;
		}

		// Token: 0x060014D1 RID: 5329 RVA: 0x0007D9B0 File Offset: 0x0007BBB0
		public InsertBulkStatement insertBulkStatement()
		{
			InsertBulkStatement insertBulkStatement = base.FragmentFactory.CreateFragment<InsertBulkStatement>();
			IToken token = this.LT(1);
			this.match(86);
			this.match(17);
			SchemaObjectName to = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				insertBulkStatement.To = to;
				TSql80ParserBaseInternal.UpdateTokenInfo(insertBulkStatement, token);
				base.ThrowPartialAstIfPhaseOne(insertBulkStatement);
			}
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.coldefList(insertBulkStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.insertBulkOptions(insertBulkStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return insertBulkStatement;
		}

		// Token: 0x060014D2 RID: 5330 RVA: 0x0007DAD8 File Offset: 0x0007BCD8
		public CheckpointStatement checkpointStatement()
		{
			CheckpointStatement checkpointStatement = base.FragmentFactory.CreateFragment<CheckpointStatement>();
			IToken token = this.LT(1);
			this.match(22);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(checkpointStatement, token);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return checkpointStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return checkpointStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return checkpointStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return checkpointStatement;
							default:
								if (num == 28)
								{
									return checkpointStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return checkpointStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return checkpointStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return checkpointStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return checkpointStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return checkpointStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return checkpointStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return checkpointStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return checkpointStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return checkpointStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return checkpointStatement;
				default:
					if (num == 191)
					{
						return checkpointStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return checkpointStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return checkpointStatement;
				case 221:
				{
					Literal duration = this.integer();
					if (this.inputState.guessing == 0)
					{
						checkpointStatement.Duration = duration;
						return checkpointStatement;
					}
					return checkpointStatement;
				}
				default:
					if (num == 232)
					{
						return checkpointStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060014D3 RID: 5331 RVA: 0x0007DDA4 File Offset: 0x0007BFA4
		public ReconfigureStatement reconfigureStatement()
		{
			ReconfigureStatement reconfigureStatement = base.FragmentFactory.CreateFragment<ReconfigureStatement>();
			IToken token = this.LT(1);
			this.match(126);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(reconfigureStatement, token);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "OVERRIDE");
					reconfigureStatement.WithOverride = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(reconfigureStatement, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return reconfigureStatement;
		}

		// Token: 0x060014D4 RID: 5332 RVA: 0x0007DE84 File Offset: 0x0007C084
		public ShutdownStatement shutdownStatement()
		{
			ShutdownStatement shutdownStatement = base.FragmentFactory.CreateFragment<ShutdownStatement>();
			IToken token = this.LT(1);
			this.match(144);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(shutdownStatement, token);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NOWAIT");
					shutdownStatement.WithNoWait = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(shutdownStatement, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return shutdownStatement;
		}

		// Token: 0x060014D5 RID: 5333 RVA: 0x0007DF64 File Offset: 0x0007C164
		public SetUserStatement setUserStatement()
		{
			SetUserStatement setUserStatement = base.FragmentFactory.CreateFragment<SetUserStatement>();
			IToken token = this.LT(1);
			this.match(143);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(setUserStatement, token);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return setUserStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return setUserStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return setUserStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return setUserStatement;
							default:
								if (num == 28)
								{
									return setUserStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return setUserStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return setUserStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return setUserStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return setUserStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return setUserStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return setUserStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return setUserStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return setUserStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return setUserStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return setUserStatement;
				default:
					if (num == 191)
					{
						return setUserStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return setUserStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return setUserStatement;
				default:
					switch (num)
					{
					case 230:
					case 231:
					case 234:
					{
						ValueExpression userName = this.stringOrVariable();
						if (this.inputState.guessing == 0)
						{
							setUserStatement.UserName = userName;
						}
						if (this.LA(1) == 171 && this.LA(2) == 232)
						{
							this.match(171);
							IToken token2 = this.LT(1);
							this.match(232);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.Match(token2, "NORESET");
								setUserStatement.WithNoReset = true;
								TSql80ParserBaseInternal.UpdateTokenInfo(setUserStatement, token2);
								return setUserStatement;
							}
							return setUserStatement;
						}
						else
						{
							if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							return setUserStatement;
						}
						break;
					}
					case 232:
						return setUserStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060014D6 RID: 5334 RVA: 0x0007E310 File Offset: 0x0007C510
		public TruncateTableStatement truncateTableStatement()
		{
			TruncateTableStatement truncateTableStatement = base.FragmentFactory.CreateFragment<TruncateTableStatement>();
			IToken token = this.LT(1);
			this.match(156);
			this.match(148);
			SchemaObjectName tableName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(truncateTableStatement, token);
				truncateTableStatement.TableName = tableName;
			}
			return truncateTableStatement;
		}

		// Token: 0x060014D7 RID: 5335 RVA: 0x0007E36C File Offset: 0x0007C56C
		public GrantStatement grantStatement90()
		{
			GrantStatement grantStatement = base.FragmentFactory.CreateFragment<GrantStatement>();
			bool vPermissionContainsColumns = false;
			IToken token = this.LT(1);
			this.match(75);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(grantStatement, token);
			}
			this.permissionsList(grantStatement, ref vPermissionContainsColumns);
			this.securityStatementTargetObjectOpt(grantStatement, vPermissionContainsColumns);
			this.match(151);
			this.securityStatementPrincipalList(grantStatement);
			if (this.LA(1) == 171 && this.LA(2) == 75)
			{
				this.match(171);
				this.match(75);
				IToken token2 = this.LT(1);
				this.match(111);
				if (this.inputState.guessing == 0)
				{
					grantStatement.WithGrantOption = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(grantStatement, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_36_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.securityStatementAsClauseOpt(grantStatement);
			return grantStatement;
		}

		// Token: 0x060014D8 RID: 5336 RVA: 0x0007E46C File Offset: 0x0007C66C
		public DenyStatement denyStatement90()
		{
			DenyStatement denyStatement = base.FragmentFactory.CreateFragment<DenyStatement>();
			bool vPermissionContainsColumns = false;
			IToken token = this.LT(1);
			this.match(49);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(denyStatement, token);
			}
			this.permissionsList(denyStatement, ref vPermissionContainsColumns);
			this.securityStatementTargetObjectOpt(denyStatement, vPermissionContainsColumns);
			this.match(151);
			this.securityStatementPrincipalList(denyStatement);
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_325;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_325;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 22:
						case 23:
							goto IL_325;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 20:
						case 21:
							break;
						case 19:
						{
							IToken token2 = this.LT(1);
							this.match(19);
							if (this.inputState.guessing == 0)
							{
								denyStatement.CascadeOption = true;
								TSql80ParserBaseInternal.UpdateTokenInfo(denyStatement, token2);
								goto IL_325;
							}
							goto IL_325;
						}
						default:
							if (num == 28)
							{
								goto IL_325;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_325;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_325;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_325;
						default:
							if (num == 82)
							{
								goto IL_325;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					goto IL_325;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 119)
					{
						goto IL_325;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_325;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_325;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_325;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_325;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_325;
				default:
					if (num == 191)
					{
						goto IL_325;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_325;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_325;
				default:
					if (num == 232)
					{
						goto IL_325;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_325:
			this.securityStatementAsClauseOpt(denyStatement);
			return denyStatement;
		}

		// Token: 0x060014D9 RID: 5337 RVA: 0x0007E7A8 File Offset: 0x0007C9A8
		public RevokeStatement revokeStatement90()
		{
			RevokeStatement revokeStatement = base.FragmentFactory.CreateFragment<RevokeStatement>();
			bool vPermissionContainsColumns = false;
			IToken token = this.LT(1);
			this.match(132);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(revokeStatement, token);
			}
			if (this.LA(1) == 75)
			{
				this.match(75);
				this.match(111);
				this.match(67);
				if (this.inputState.guessing == 0)
				{
					revokeStatement.GrantOptionFor = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_37_.member(this.LA(1)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.permissionsList(revokeStatement, ref vPermissionContainsColumns);
			this.securityStatementTargetObjectOpt(revokeStatement, vPermissionContainsColumns);
			int num = this.LA(1);
			if (num != 71)
			{
				if (num != 151)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(151);
			}
			else
			{
				this.match(71);
			}
			this.securityStatementPrincipalList(revokeStatement);
			int num2 = this.LA(1);
			if (num2 <= 95)
			{
				if (num2 <= 35)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							goto IL_3BE;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_3BE;
						}
					}
					else
					{
						switch (num2)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 22:
						case 23:
							goto IL_3BE;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 20:
						case 21:
							break;
						case 19:
						{
							IToken token2 = this.LT(1);
							this.match(19);
							if (this.inputState.guessing == 0)
							{
								revokeStatement.CascadeOption = true;
								TSql80ParserBaseInternal.UpdateTokenInfo(revokeStatement, token2);
								goto IL_3BE;
							}
							goto IL_3BE;
						}
						default:
							if (num2 == 28)
							{
								goto IL_3BE;
							}
							switch (num2)
							{
							case 33:
							case 35:
								goto IL_3BE;
							}
							break;
						}
					}
				}
				else if (num2 <= 82)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_3BE;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num2)
						{
						case 74:
						case 75:
							goto IL_3BE;
						default:
							if (num2 == 82)
							{
								goto IL_3BE;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 86 || num2 == 92 || num2 == 95)
				{
					goto IL_3BE;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 119)
				{
					if (num2 == 106 || num2 == 119)
					{
						goto IL_3BE;
					}
				}
				else
				{
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_3BE;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_3BE;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_3BE;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176)
				{
					goto IL_3BE;
				}
				switch (num2)
				{
				case 180:
				case 181:
					goto IL_3BE;
				default:
					if (num2 == 191)
					{
						goto IL_3BE;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_3BE;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_3BE;
				default:
					if (num2 == 232)
					{
						goto IL_3BE;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_3BE:
			this.securityStatementAsClauseOpt(revokeStatement);
			return revokeStatement;
		}

		// Token: 0x060014DA RID: 5338 RVA: 0x0007EB7C File Offset: 0x0007CD7C
		public ReturnStatement returnStatement()
		{
			ReturnStatement returnStatement = base.FragmentFactory.CreateFragment<ReturnStatement>();
			IToken token = this.LT(1);
			this.match(131);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(returnStatement, token);
			}
			bool flag = false;
			if (TSql90ParserInternal.tokenSet_38_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_39_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.expression();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				ScalarExpression expression = this.expression();
				if (this.inputState.guessing == 0)
				{
					returnStatement.Expression = expression;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return returnStatement;
		}

		// Token: 0x060014DB RID: 5339 RVA: 0x0007EC98 File Offset: 0x0007CE98
		public TSqlStatement openStatements()
		{
			IToken token = this.LT(1);
			this.match(106);
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
			{
				tsqlStatement = this.openMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC"))
			{
				tsqlStatement = this.openSymmetricKeyStatement();
			}
			else
			{
				if (this.LA(1) < 232 || this.LA(1) > 234 || !TSql90ParserInternal.tokenSet_40_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.openCursorStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x060014DC RID: 5340 RVA: 0x0007ED78 File Offset: 0x0007CF78
		public TSqlStatement closeStatements()
		{
			IToken token = this.LT(1);
			this.match(23);
			TSqlStatement tsqlStatement;
			if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
			{
				tsqlStatement = this.closeMasterKeyStatement();
			}
			else if ((this.LA(1) == 5 || this.LA(1) == 232) && (this.LA(2) == 91 || this.LA(2) == 232) && (base.NextTokenMatches("SYMMETRIC") || this.LA(1) == 5))
			{
				tsqlStatement = this.closeSymmetricKeyStatement();
			}
			else
			{
				if (this.LA(1) < 232 || this.LA(1) > 234 || !TSql90ParserInternal.tokenSet_40_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.closeCursorStatement();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x060014DD RID: 5341 RVA: 0x0007EE7C File Offset: 0x0007D07C
		public DeallocateCursorStatement deallocateCursorStatement()
		{
			DeallocateCursorStatement deallocateCursorStatement = base.FragmentFactory.CreateFragment<DeallocateCursorStatement>();
			IToken token = this.LT(1);
			this.match(45);
			CursorId cursor = this.cursorId();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(deallocateCursorStatement, token);
				deallocateCursorStatement.Cursor = cursor;
			}
			return deallocateCursorStatement;
		}

		// Token: 0x060014DE RID: 5342 RVA: 0x0007EECC File Offset: 0x0007D0CC
		public FetchCursorStatement fetchCursorStatement()
		{
			IToken token = this.LT(1);
			this.match(64);
			FetchCursorStatement fetchCursorStatement = this.rowSelector();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fetchCursorStatement, token);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return fetchCursorStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return fetchCursorStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return fetchCursorStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return fetchCursorStatement;
							default:
								if (num == 28)
								{
									return fetchCursorStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return fetchCursorStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return fetchCursorStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return fetchCursorStatement;
							}
							break;
						}
						break;
					}
				}
				else
				{
					if (num == 82)
					{
						return fetchCursorStatement;
					}
					switch (num)
					{
					case 86:
						return fetchCursorStatement;
					case 87:
						break;
					case 88:
					{
						this.match(88);
						VariableReference item = this.variable();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<VariableReference>(fetchCursorStatement, fetchCursorStatement.IntoVariables, item);
						}
						while (this.LA(1) == 198)
						{
							this.match(198);
							item = this.variable();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<VariableReference>(fetchCursorStatement, fetchCursorStatement.IntoVariables, item);
							}
						}
						return fetchCursorStatement;
					}
					default:
						if (num == 92)
						{
							return fetchCursorStatement;
						}
						break;
					}
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return fetchCursorStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return fetchCursorStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return fetchCursorStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return fetchCursorStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return fetchCursorStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return fetchCursorStatement;
				default:
					if (num == 191)
					{
						return fetchCursorStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return fetchCursorStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return fetchCursorStatement;
				default:
					if (num == 232)
					{
						return fetchCursorStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060014DF RID: 5343 RVA: 0x0007F1F0 File Offset: 0x0007D3F0
		public TSqlStatement dropStatements()
		{
			IToken token = this.LT(1);
			this.match(54);
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num <= 121)
			{
				if (num <= 47)
				{
					if (num == 43)
					{
						tsqlStatement = this.dropDatabaseStatement();
						goto IL_775;
					}
					if (num == 47)
					{
						tsqlStatement = this.dropDefaultStatement();
						goto IL_775;
					}
				}
				else
				{
					if (num == 73)
					{
						tsqlStatement = this.dropFunctionStatement();
						goto IL_775;
					}
					if (num == 84)
					{
						tsqlStatement = this.dropIndexStatement();
						goto IL_775;
					}
					switch (num)
					{
					case 120:
					case 121:
						tsqlStatement = this.dropProcedureStatement();
						goto IL_775;
					}
				}
			}
			else if (num <= 148)
			{
				switch (num)
				{
				case 137:
					tsqlStatement = this.dropRuleStatement();
					goto IL_775;
				case 138:
					break;
				case 139:
					tsqlStatement = this.dropSchemaStatement();
					goto IL_775;
				default:
					switch (num)
					{
					case 146:
						tsqlStatement = this.dropStatisticsStatement();
						goto IL_775;
					case 148:
						tsqlStatement = this.dropTableStatement();
						goto IL_775;
					}
					break;
				}
			}
			else
			{
				if (num == 155)
				{
					tsqlStatement = this.dropTriggerStatement();
					goto IL_775;
				}
				if (num == 163)
				{
					tsqlStatement = this.dropUserStatement();
					goto IL_775;
				}
				if (num == 166)
				{
					tsqlStatement = this.dropViewStatement();
					goto IL_775;
				}
			}
			if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AGGREGATE"))
			{
				tsqlStatement = this.dropAggregateStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ASSEMBLY"))
			{
				tsqlStatement = this.dropAssemblyStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 73 || this.LA(2) == 232) && base.NextTokenMatches("PARTITION"))
			{
				tsqlStatement = this.dropPartitionStatements();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SYNONYM"))
			{
				tsqlStatement = this.dropSynonymStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("APPLICATION"))
			{
				tsqlStatement = this.dropApplicationRoleStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 84 || this.LA(2) == 232) && base.NextTokenMatches("FULLTEXT"))
			{
				tsqlStatement = this.dropFulltextStatements();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("LOGIN"))
			{
				tsqlStatement = this.dropLoginStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROLE"))
			{
				tsqlStatement = this.dropRoleStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("MASTER"))
			{
				tsqlStatement = this.dropMasterKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("SYMMETRIC"))
			{
				tsqlStatement = this.dropSymmetricKeyStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91 && base.NextTokenMatches("ASYMMETRIC"))
			{
				tsqlStatement = this.dropAsymmetricKeyStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CERTIFICATE"))
			{
				tsqlStatement = this.dropCertificateStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CREDENTIAL"))
			{
				tsqlStatement = this.dropCredentialStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("TYPE"))
			{
				tsqlStatement = this.dropTypeStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 139 && base.NextTokenMatches("XML"))
			{
				tsqlStatement = this.dropXmlSchemaCollectionStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("CONTRACT"))
			{
				tsqlStatement = this.dropContractStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE"))
			{
				tsqlStatement = this.dropQueueStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("SERVICE"))
			{
				tsqlStatement = this.dropServiceStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ROUTE"))
			{
				tsqlStatement = this.dropRouteStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE"))
			{
				tsqlStatement = this.dropMessageTypeStatement();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("REMOTE"))
			{
				tsqlStatement = this.dropRemoteServiceBindingStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("ENDPOINT"))
			{
				tsqlStatement = this.dropEndpointStatement();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 71 || this.LA(2) == 232) && (base.NextTokenMatches("SIGNATURE") || base.NextTokenMatches("COUNTER")))
			{
				tsqlStatement = this.dropSignatureStatement();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232 || !base.NextTokenMatches("EVENT"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				tsqlStatement = this.dropEventNotificationStatement();
			}
			IL_775:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsqlStatement, token);
			}
			return tsqlStatement;
		}

		// Token: 0x060014E0 RID: 5344 RVA: 0x0007F988 File Offset: 0x0007DB88
		public DbccStatement dbccStatement()
		{
			DbccStatement dbccStatement = base.FragmentFactory.CreateFragment<DbccStatement>();
			IToken token = this.LT(1);
			this.match(44);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				DbccCommand command;
				if (DbccCommandsHelper.Instance.TryParseOption(token2, out command))
				{
					dbccStatement.Command = command;
				}
				else
				{
					dbccStatement.Command = DbccCommand.Free;
					dbccStatement.DllName = token2.getText();
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(dbccStatement, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(dbccStatement, token2);
			}
			if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_41_.member(this.LA(2)))
			{
				this.dbccNamedLiteralList(dbccStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.dbccOptions(dbccStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return dbccStatement;
		}

		// Token: 0x060014E1 RID: 5345 RVA: 0x0007FAD4 File Offset: 0x0007DCD4
		public RevertStatement revertStatement()
		{
			RevertStatement revertStatement = base.FragmentFactory.CreateFragment<RevertStatement>();
			IToken token = this.LT(1);
			this.match(176);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(revertStatement, token);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(206);
				ScalarExpression cookie = this.expression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "COOKIE");
					revertStatement.Cookie = cookie;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return revertStatement;
		}

		// Token: 0x060014E2 RID: 5346 RVA: 0x0007FBC0 File Offset: 0x0007DDC0
		public ExecuteAsStatement executeAsStatement()
		{
			ExecuteAsStatement executeAsStatement = base.FragmentFactory.CreateFragment<ExecuteAsStatement>();
			this.execStart(executeAsStatement);
			this.match(9);
			ExecuteContext executeContext = this.executeAsStatementContext();
			if (this.inputState.guessing == 0)
			{
				executeAsStatement.ExecuteContext = executeContext;
			}
			this.executeContextStatementOptionsOpt(executeAsStatement);
			return executeAsStatement;
		}

		// Token: 0x060014E3 RID: 5347 RVA: 0x0007FC0C File Offset: 0x0007DE0C
		public EndConversationStatement endConversationStatement()
		{
			EndConversationStatement endConversationStatement = base.FragmentFactory.CreateFragment<EndConversationStatement>();
			this.match(56);
			IToken token = this.LT(1);
			this.match(232);
			ScalarExpression conversation = this.expression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CONVERSATION");
				endConversationStatement.Conversation = conversation;
			}
			this.endConversationArgumentsOpt(endConversationStatement);
			return endConversationStatement;
		}

		// Token: 0x060014E4 RID: 5348 RVA: 0x0007FC70 File Offset: 0x0007DE70
		public WithCtesAndXmlNamespaces withCommonTableExpressionsAndXmlNamespaces()
		{
			WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = base.FragmentFactory.CreateFragment<WithCtesAndXmlNamespaces>();
			IToken token = this.LT(1);
			this.match(171);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(withCtesAndXmlNamespaces, token);
			}
			if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("XMLNAMESPACES"))
			{
				XmlNamespaces xmlNamespaces = this.xmlNamespaces();
				if (this.inputState.guessing == 0)
				{
					withCtesAndXmlNamespaces.XmlNamespaces = xmlNamespaces;
				}
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 9 && this.LA(2) != 191))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				CommonTableExpression item = this.commonTableExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CommonTableExpression>(withCtesAndXmlNamespaces, withCtesAndXmlNamespaces.CommonTableExpressions, item);
				}
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				CommonTableExpression item = this.commonTableExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CommonTableExpression>(withCtesAndXmlNamespaces, withCtesAndXmlNamespaces.CommonTableExpressions, item);
				}
			}
			return withCtesAndXmlNamespaces;
		}

		// Token: 0x060014E5 RID: 5349 RVA: 0x0007FDA0 File Offset: 0x0007DFA0
		public SelectStatement select()
		{
			SelectStatement selectStatement = base.FragmentFactory.CreateFragment<SelectStatement>();
			QueryExpression queryExpression = this.queryExpression(selectStatement);
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num != 1)
						{
							switch (num)
							{
							case 4:
							case 6:
								break;
							case 5:
								goto IL_2DF;
							default:
								switch (num)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									break;
								case 14:
								case 16:
									goto IL_2DF;
								default:
									goto IL_2DF;
								}
								break;
							}
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							break;
						default:
							switch (num)
							{
							case 28:
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									break;
								case 34:
									goto IL_2DF;
								default:
									goto IL_2DF;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						break;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						goto IL_2DF;
					default:
						if (num != 67)
						{
							switch (num)
							{
							case 74:
							case 75:
								break;
							default:
								goto IL_2DF;
							}
						}
						break;
					}
				}
				else if (num != 82 && num != 86 && num != 92)
				{
					goto IL_2DF;
				}
			}
			else if (num <= 162)
			{
				if (num <= 113)
				{
					if (num != 95 && num != 106)
					{
						switch (num)
						{
						case 111:
							break;
						case 112:
							goto IL_2DF;
						case 113:
						{
							OrderByClause orderByClause = this.orderByClause();
							if (this.inputState.guessing == 0)
							{
								queryExpression.OrderByClause = orderByClause;
							}
							break;
						}
						default:
							goto IL_2DF;
						}
					}
				}
				else if (num != 119)
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						break;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						goto IL_2DF;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							break;
						case 157:
						case 158:
						case 159:
							goto IL_2DF;
						default:
							goto IL_2DF;
						}
						break;
					}
				}
			}
			else if (num <= 181)
			{
				switch (num)
				{
				case 167:
				case 170:
				case 171:
				case 172:
					break;
				case 168:
				case 169:
					goto IL_2DF;
				default:
					if (num != 176)
					{
						switch (num)
						{
						case 180:
						case 181:
							break;
						default:
							goto IL_2DF;
						}
					}
					break;
				}
			}
			else if (num <= 204)
			{
				if (num != 191 && num != 204)
				{
					goto IL_2DF;
				}
			}
			else
			{
				switch (num)
				{
				case 219:
				case 220:
					break;
				default:
					if (num != 232)
					{
						goto IL_2DF;
					}
					break;
				}
			}
			while (this.LA(1) == 29)
			{
				ComputeClause item = this.computeClause();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ComputeClause>(selectStatement, selectStatement.ComputeClauses, item);
				}
			}
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						if (num2 == 1)
						{
							goto IL_5EA;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_5EA;
						case 5:
							break;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_5EA;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							goto IL_5EA;
						default:
							if (num2 == 28)
							{
								goto IL_5EA;
							}
							switch (num2)
							{
							case 33:
							case 35:
								goto IL_5EA;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_5EA;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num2 != 67)
						{
							switch (num2)
							{
							case 74:
							case 75:
								goto IL_5EA;
							}
						}
						else
						{
							ForClause forClause = this.forClause();
							if (this.inputState.guessing == 0)
							{
								queryExpression.ForClause = forClause;
								goto IL_5EA;
							}
							goto IL_5EA;
						}
						break;
					}
				}
				else if (num2 == 82 || num2 == 86 || num2 == 92)
				{
					goto IL_5EA;
				}
			}
			else if (num2 <= 162)
			{
				if (num2 <= 111)
				{
					if (num2 == 95 || num2 == 106 || num2 == 111)
					{
						goto IL_5EA;
					}
				}
				else
				{
					if (num2 == 119)
					{
						goto IL_5EA;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_5EA;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_5EA;
						}
						break;
					}
				}
			}
			else if (num2 <= 181)
			{
				switch (num2)
				{
				case 167:
				case 170:
				case 171:
				case 172:
					goto IL_5EA;
				case 168:
				case 169:
					break;
				default:
					if (num2 == 176)
					{
						goto IL_5EA;
					}
					switch (num2)
					{
					case 180:
					case 181:
						goto IL_5EA;
					}
					break;
				}
			}
			else if (num2 <= 204)
			{
				if (num2 == 191 || num2 == 204)
				{
					goto IL_5EA;
				}
			}
			else
			{
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_5EA;
				default:
					if (num2 == 232)
					{
						goto IL_5EA;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_5EA:
			int num3 = this.LA(1);
			if (num3 <= 95)
			{
				if (num3 <= 35)
				{
					if (num3 <= 17)
					{
						if (num3 == 1)
						{
							goto IL_88A;
						}
						switch (num3)
						{
						case 4:
						case 6:
							goto IL_88A;
						case 5:
							break;
						default:
							switch (num3)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_88A;
							}
							break;
						}
					}
					else
					{
						switch (num3)
						{
						case 22:
						case 23:
							goto IL_88A;
						default:
							if (num3 == 28)
							{
								goto IL_88A;
							}
							switch (num3)
							{
							case 33:
							case 35:
								goto IL_88A;
							}
							break;
						}
					}
				}
				else if (num3 <= 82)
				{
					switch (num3)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_88A;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num3)
						{
						case 74:
						case 75:
							goto IL_88A;
						default:
							if (num3 == 82)
							{
								goto IL_88A;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 86 || num3 == 92 || num3 == 95)
				{
					goto IL_88A;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 119)
				{
					if (num3 == 106)
					{
						goto IL_88A;
					}
					if (num3 == 111)
					{
						this.optimizerHints(selectStatement, selectStatement.OptimizerHints);
						goto IL_88A;
					}
					if (num3 == 119)
					{
						goto IL_88A;
					}
				}
				else
				{
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_88A;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_88A;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num3)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_88A;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 191)
			{
				if (num3 == 176)
				{
					goto IL_88A;
				}
				switch (num3)
				{
				case 180:
				case 181:
					goto IL_88A;
				default:
					if (num3 == 191)
					{
						goto IL_88A;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_88A;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_88A;
				default:
					if (num3 == 232)
					{
						goto IL_88A;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_88A:
			if (this.inputState.guessing == 0)
			{
				selectStatement.QueryExpression = queryExpression;
			}
			return selectStatement;
			IL_2DF:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060014E6 RID: 5350 RVA: 0x0008064C File Offset: 0x0007E84C
		public DeleteStatement deleteStatement()
		{
			DeleteStatement deleteStatement = base.FragmentFactory.CreateFragment<DeleteStatement>();
			DeleteSpecification deleteSpecification = this.deleteSpecification();
			if (this.inputState.guessing == 0)
			{
				deleteStatement.DeleteSpecification = deleteSpecification;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return deleteStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return deleteStatement;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return deleteStatement;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return deleteStatement;
						default:
							if (num == 28)
							{
								return deleteStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return deleteStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return deleteStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return deleteStatement;
						default:
							if (num == 82)
							{
								return deleteStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return deleteStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106)
					{
						return deleteStatement;
					}
					if (num == 111)
					{
						this.optimizerHints(deleteStatement, deleteStatement.OptimizerHints);
						return deleteStatement;
					}
					if (num == 119)
					{
						return deleteStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return deleteStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return deleteStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return deleteStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return deleteStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return deleteStatement;
				default:
					if (num == 191)
					{
						return deleteStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return deleteStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return deleteStatement;
				default:
					if (num == 232)
					{
						return deleteStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060014E7 RID: 5351 RVA: 0x00080900 File Offset: 0x0007EB00
		public InsertStatement insertStatement()
		{
			InsertStatement insertStatement = base.FragmentFactory.CreateFragment<InsertStatement>();
			InsertSpecification insertSpecification = this.insertSpecification();
			if (this.inputState.guessing == 0)
			{
				insertStatement.InsertSpecification = insertSpecification;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return insertStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return insertStatement;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return insertStatement;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return insertStatement;
						default:
							if (num == 28)
							{
								return insertStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return insertStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return insertStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return insertStatement;
						default:
							if (num == 82)
							{
								return insertStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return insertStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106)
					{
						return insertStatement;
					}
					if (num == 111)
					{
						this.optimizerHints(insertStatement, insertStatement.OptimizerHints);
						return insertStatement;
					}
					if (num == 119)
					{
						return insertStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return insertStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return insertStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return insertStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return insertStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return insertStatement;
				default:
					if (num == 191)
					{
						return insertStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return insertStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return insertStatement;
				default:
					if (num == 232)
					{
						return insertStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060014E8 RID: 5352 RVA: 0x00080BB4 File Offset: 0x0007EDB4
		public UpdateStatement updateStatement()
		{
			UpdateStatement updateStatement = base.FragmentFactory.CreateFragment<UpdateStatement>();
			UpdateSpecification updateSpecification = this.updateSpecification();
			if (this.inputState.guessing == 0)
			{
				updateStatement.UpdateSpecification = updateSpecification;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return updateStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return updateStatement;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return updateStatement;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return updateStatement;
						default:
							if (num == 28)
							{
								return updateStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return updateStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return updateStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return updateStatement;
						default:
							if (num == 82)
							{
								return updateStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return updateStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106)
					{
						return updateStatement;
					}
					if (num == 111)
					{
						this.optimizerHints(updateStatement, updateStatement.OptimizerHints);
						return updateStatement;
					}
					if (num == 119)
					{
						return updateStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return updateStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return updateStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return updateStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return updateStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return updateStatement;
				default:
					if (num == 191)
					{
						return updateStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return updateStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return updateStatement;
				default:
					if (num == 232)
					{
						return updateStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060014E9 RID: 5353 RVA: 0x00080E68 File Offset: 0x0007F068
		public CreateProcedureStatement createProcedureStatement()
		{
			CreateProcedureStatement createProcedureStatement = base.FragmentFactory.CreateFragment<CreateProcedureStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createProcedureStatement, token);
			}
			this.procedureStatementBody(createProcedureStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				createProcedureStatement = null;
			}
			return createProcedureStatement;
		}

		// Token: 0x060014EA RID: 5354 RVA: 0x00080EC8 File Offset: 0x0007F0C8
		public AlterProcedureStatement alterProcedureStatement()
		{
			AlterProcedureStatement alterProcedureStatement = base.FragmentFactory.CreateFragment<AlterProcedureStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(6);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterProcedureStatement, token);
			}
			this.procedureStatementBody(alterProcedureStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				alterProcedureStatement = null;
			}
			return alterProcedureStatement;
		}

		// Token: 0x060014EB RID: 5355 RVA: 0x00080F24 File Offset: 0x0007F124
		public CreateTriggerStatement createTriggerStatement()
		{
			CreateTriggerStatement createTriggerStatement = base.FragmentFactory.CreateFragment<CreateTriggerStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTriggerStatement, token);
			}
			this.triggerStatementBody(createTriggerStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				createTriggerStatement = null;
			}
			return createTriggerStatement;
		}

		// Token: 0x060014EC RID: 5356 RVA: 0x00080F84 File Offset: 0x0007F184
		public AlterTriggerStatement alterTriggerStatement()
		{
			AlterTriggerStatement alterTriggerStatement = base.FragmentFactory.CreateFragment<AlterTriggerStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(6);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterTriggerStatement, token);
			}
			this.triggerStatementBody(alterTriggerStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				alterTriggerStatement = null;
			}
			return alterTriggerStatement;
		}

		// Token: 0x060014ED RID: 5357 RVA: 0x00080FE0 File Offset: 0x0007F1E0
		public CreateDefaultStatement createDefaultStatement()
		{
			CreateDefaultStatement createDefaultStatement = base.FragmentFactory.CreateFragment<CreateDefaultStatement>();
			IToken token = this.LT(1);
			this.match(35);
			this.match(47);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createDefaultStatement, token);
			}
			SchemaObjectName name = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(name, "DEFAULT");
				createDefaultStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createDefaultStatement);
			}
			this.match(9);
			ScalarExpression expression = this.expression();
			if (this.inputState.guessing == 0)
			{
				createDefaultStatement.Expression = expression;
			}
			return createDefaultStatement;
		}

		// Token: 0x060014EE RID: 5358 RVA: 0x00081078 File Offset: 0x0007F278
		public CreateRuleStatement createRuleStatement()
		{
			CreateRuleStatement createRuleStatement = base.FragmentFactory.CreateFragment<CreateRuleStatement>();
			IToken token = this.LT(1);
			this.match(35);
			this.match(137);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createRuleStatement, token);
			}
			SchemaObjectName name = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(name, "RULE");
				createRuleStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createRuleStatement);
			}
			this.match(9);
			BooleanExpression expression = this.booleanExpression();
			if (this.inputState.guessing == 0)
			{
				createRuleStatement.Expression = expression;
			}
			return createRuleStatement;
		}

		// Token: 0x060014EF RID: 5359 RVA: 0x00081114 File Offset: 0x0007F314
		public CreateViewStatement createViewStatement()
		{
			CreateViewStatement createViewStatement = base.FragmentFactory.CreateFragment<CreateViewStatement>();
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createViewStatement, token);
			}
			this.viewStatementBody(createViewStatement);
			return createViewStatement;
		}

		// Token: 0x060014F0 RID: 5360 RVA: 0x0008115C File Offset: 0x0007F35C
		public AlterViewStatement alterViewStatement()
		{
			AlterViewStatement alterViewStatement = base.FragmentFactory.CreateFragment<AlterViewStatement>();
			IToken token = this.LT(1);
			this.match(6);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterViewStatement, token);
			}
			this.viewStatementBody(alterViewStatement);
			return alterViewStatement;
		}

		// Token: 0x060014F1 RID: 5361 RVA: 0x000811A4 File Offset: 0x0007F3A4
		public CreateFunctionStatement createFunctionStatement()
		{
			CreateFunctionStatement createFunctionStatement = base.FragmentFactory.CreateFragment<CreateFunctionStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createFunctionStatement, token);
			}
			this.functionStatementBody(createFunctionStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				createFunctionStatement = null;
			}
			return createFunctionStatement;
		}

		// Token: 0x060014F2 RID: 5362 RVA: 0x00081204 File Offset: 0x0007F404
		public AlterFunctionStatement alterFunctionStatement()
		{
			AlterFunctionStatement alterFunctionStatement = base.FragmentFactory.CreateFragment<AlterFunctionStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(6);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterFunctionStatement, token);
			}
			this.functionStatementBody(alterFunctionStatement, out flag);
			if (this.inputState.guessing == 0 && flag)
			{
				alterFunctionStatement = null;
			}
			return alterFunctionStatement;
		}

		// Token: 0x060014F3 RID: 5363 RVA: 0x00081260 File Offset: 0x0007F460
		public CreateSchemaStatement createSchemaStatement()
		{
			CreateSchemaStatement createSchemaStatement = base.FragmentFactory.CreateFragment<CreateSchemaStatement>();
			IToken token = this.LT(1);
			this.match(35);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createSchemaStatement, token);
			}
			this.match(139);
			int num = this.LA(1);
			if (num != 11)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier name = this.identifier();
					if (this.inputState.guessing == 0)
					{
						createSchemaStatement.Name = name;
					}
					this.authorizationOpt(createSchemaStatement);
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.authorization(createSchemaStatement);
			}
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(createSchemaStatement);
			}
			StatementList statementList = this.createSchemaElementList();
			if (this.inputState.guessing == 0)
			{
				createSchemaStatement.StatementList = statementList;
			}
			return createSchemaStatement;
		}

		// Token: 0x060014F4 RID: 5364 RVA: 0x00081340 File Offset: 0x0007F540
		public EnableDisableTriggerStatement disableTriggerStatement()
		{
			EnableDisableTriggerStatement enableDisableTriggerStatement = base.FragmentFactory.CreateFragment<EnableDisableTriggerStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "DISABLE");
				TSql80ParserBaseInternal.UpdateTokenInfo(enableDisableTriggerStatement, token);
				enableDisableTriggerStatement.TriggerEnforcement = TriggerEnforcement.Disable;
			}
			this.enableDisableTriggerBody(enableDisableTriggerStatement);
			return enableDisableTriggerStatement;
		}

		// Token: 0x060014F5 RID: 5365 RVA: 0x0008139C File Offset: 0x0007F59C
		public EnableDisableTriggerStatement enableTriggerStatement()
		{
			EnableDisableTriggerStatement enableDisableTriggerStatement = base.FragmentFactory.CreateFragment<EnableDisableTriggerStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENABLE");
				TSql80ParserBaseInternal.UpdateTokenInfo(enableDisableTriggerStatement, token);
				enableDisableTriggerStatement.TriggerEnforcement = TriggerEnforcement.Enable;
			}
			this.enableDisableTriggerBody(enableDisableTriggerStatement);
			return enableDisableTriggerStatement;
		}

		// Token: 0x060014F6 RID: 5366 RVA: 0x000813F8 File Offset: 0x0007F5F8
		public MoveConversationStatement moveConversationStatement()
		{
			MoveConversationStatement moveConversationStatement = base.FragmentFactory.CreateFragment<MoveConversationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			ScalarExpression conversation = this.expression();
			this.match(151);
			ScalarExpression group = this.expression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MOVE");
				TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(moveConversationStatement, token);
				moveConversationStatement.Conversation = conversation;
				moveConversationStatement.Group = group;
			}
			return moveConversationStatement;
		}

		// Token: 0x060014F7 RID: 5367 RVA: 0x00081490 File Offset: 0x0007F690
		public GetConversationGroupStatement getConversationGroupStatement()
		{
			GetConversationGroupStatement getConversationGroupStatement = base.FragmentFactory.CreateFragment<GetConversationGroupStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(76);
			VariableReference groupId = this.variable();
			this.match(71);
			SchemaObjectName queue = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "GET");
				TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(getConversationGroupStatement, token);
				getConversationGroupStatement.GroupId = groupId;
				getConversationGroupStatement.Queue = queue;
			}
			return getConversationGroupStatement;
		}

		// Token: 0x060014F8 RID: 5368 RVA: 0x0008152C File Offset: 0x0007F72C
		public ReceiveStatement receiveStatement()
		{
			ReceiveStatement receiveStatement = base.FragmentFactory.CreateFragment<ReceiveStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RECEIVE");
				TSql80ParserBaseInternal.UpdateTokenInfo(receiveStatement, token);
			}
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num == 20 || num == 25 || num == 34)
					{
						goto IL_228;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_228;
					default:
						if (num == 81)
						{
							goto IL_228;
						}
						break;
					}
				}
				else
				{
					if (num == 93)
					{
						goto IL_228;
					}
					switch (num)
					{
					case 100:
					case 101:
						goto IL_228;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num == 133 || num == 136)
					{
						goto IL_228;
					}
				}
				else if (num == 141 || num == 147)
				{
					goto IL_228;
				}
			}
			else if (num <= 163)
			{
				if (num != 152)
				{
					if (num == 163)
					{
						goto IL_228;
					}
				}
				else
				{
					this.match(152);
					this.match(191);
					ScalarExpression top = this.expression();
					this.match(192);
					if (this.inputState.guessing == 0)
					{
						receiveStatement.Top = top;
						goto IL_228;
					}
					goto IL_228;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					goto IL_228;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_228;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_228:
			SelectElement item = this.receiveSelectExpression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(receiveStatement, receiveStatement.SelectElements, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.receiveSelectExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(receiveStatement, receiveStatement.SelectElements, item);
				}
			}
			this.match(71);
			SchemaObjectName queue = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				receiveStatement.Queue = queue;
			}
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 28)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							goto IL_57E;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_57E;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_57E;
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_57E;
							default:
								if (num2 == 28)
								{
									goto IL_57E;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 33:
					case 35:
						goto IL_57E;
					case 34:
						break;
					default:
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_57E;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								goto IL_57E;
							}
							break;
						}
						break;
					}
				}
				else
				{
					if (num2 == 82)
					{
						goto IL_57E;
					}
					switch (num2)
					{
					case 86:
						goto IL_57E;
					case 87:
						break;
					case 88:
					{
						this.match(88);
						VariableTableReference into = this.variableDmlTarget();
						if (this.inputState.guessing == 0)
						{
							receiveStatement.Into = into;
							goto IL_57E;
						}
						goto IL_57E;
					}
					default:
						if (num2 == 92)
						{
							goto IL_57E;
						}
						break;
					}
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 106)
				{
					if (num2 == 95 || num2 == 106)
					{
						goto IL_57E;
					}
				}
				else
				{
					if (num2 == 119)
					{
						goto IL_57E;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_57E;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 169:
						case 170:
						case 171:
						case 172:
							goto IL_57E;
						}
						break;
					}
				}
			}
			else if (num2 <= 192)
			{
				if (num2 == 176)
				{
					goto IL_57E;
				}
				switch (num2)
				{
				case 180:
				case 181:
					goto IL_57E;
				default:
					switch (num2)
					{
					case 191:
					case 192:
						goto IL_57E;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_57E;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_57E;
				default:
					if (num2 == 232)
					{
						goto IL_57E;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_57E:
			int num3 = this.LA(1);
			if (num3 <= 92)
			{
				if (num3 <= 28)
				{
					if (num3 <= 6)
					{
						if (num3 == 1)
						{
							return receiveStatement;
						}
						switch (num3)
						{
						case 4:
						case 6:
							return receiveStatement;
						}
					}
					else
					{
						switch (num3)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return receiveStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num3)
							{
							case 22:
							case 23:
								return receiveStatement;
							default:
								if (num3 == 28)
								{
									return receiveStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num3 <= 75)
				{
					switch (num3)
					{
					case 33:
					case 35:
						return receiveStatement;
					case 34:
						break;
					default:
						switch (num3)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return receiveStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num3)
							{
							case 74:
							case 75:
								return receiveStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 82 || num3 == 86 || num3 == 92)
				{
					return receiveStatement;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 106)
				{
					if (num3 == 95 || num3 == 106)
					{
						return receiveStatement;
					}
				}
				else
				{
					if (num3 == 119)
					{
						return receiveStatement;
					}
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return receiveStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return receiveStatement;
						case 169:
						{
							this.match(169);
							IToken token2 = this.LT(1);
							this.match(232);
							this.match(206);
							ValueExpression where = this.stringOrVariable();
							if (this.inputState.guessing == 0)
							{
								if (TSql80ParserBaseInternal.TryMatch(token2, "CONVERSATION_GROUP_ID"))
								{
									receiveStatement.IsConversationGroupIdWhere = true;
								}
								else
								{
									TSql80ParserBaseInternal.Match(token2, "CONVERSATION_HANDLE");
									receiveStatement.IsConversationGroupIdWhere = false;
								}
								receiveStatement.Where = where;
								return receiveStatement;
							}
							return receiveStatement;
						}
						}
						break;
					}
				}
			}
			else if (num3 <= 192)
			{
				if (num3 == 176)
				{
					return receiveStatement;
				}
				switch (num3)
				{
				case 180:
				case 181:
					return receiveStatement;
				default:
					switch (num3)
					{
					case 191:
					case 192:
						return receiveStatement;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					return receiveStatement;
				}
				switch (num3)
				{
				case 219:
				case 220:
					return receiveStatement;
				default:
					if (num3 == 232)
					{
						return receiveStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060014F9 RID: 5369 RVA: 0x00081DD0 File Offset: 0x0007FFD0
		public SendStatement sendStatement()
		{
			SendStatement sendStatement = base.FragmentFactory.CreateFragment<SendStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(105);
			IToken token2 = this.LT(1);
			this.match(232);
			ScalarExpression scalarExpression = this.expression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SEND");
				TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(sendStatement, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(sendStatement, sendStatement.ConversationHandles, scalarExpression);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("MESSAGE"))
			{
				IToken token3 = this.LT(1);
				this.match(232);
				IToken token4 = this.LT(1);
				this.match(232);
				IdentifierOrValueExpression messageTypeName = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "MESSAGE");
					TSql80ParserBaseInternal.Match(token4, "TYPE");
					sendStatement.MessageTypeName = messageTypeName;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_38_.member(this.LA(2)))
			{
				this.match(191);
				scalarExpression = this.expression();
				IToken token5 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					sendStatement.MessageBody = scalarExpression;
					TSql80ParserBaseInternal.UpdateTokenInfo(sendStatement, token5);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return sendStatement;
		}

		// Token: 0x060014FA RID: 5370 RVA: 0x00081FC4 File Offset: 0x000801C4
		public void enableDisableTriggerBody(EnableDisableTriggerStatement vParent)
		{
			this.match(155);
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				SchemaObjectName item = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaObjectName>(vParent, vParent.TriggerNames, item);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					item = this.schemaObjectThreePartName();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaObjectName>(vParent, vParent.TriggerNames, item);
					}
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					vParent.All = true;
				}
			}
			this.match(105);
			TriggerObject triggerObject = this.triggerObject();
			if (this.inputState.guessing == 0)
			{
				vParent.TriggerObject = triggerObject;
			}
		}

		// Token: 0x060014FB RID: 5371 RVA: 0x000820B8 File Offset: 0x000802B8
		public SchemaObjectName schemaObjectThreePartName()
		{
			SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
			List<Identifier> otherCollection = this.identifierList(3);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, otherCollection);
			}
			return schemaObjectName;
		}

		// Token: 0x060014FC RID: 5372 RVA: 0x000820F4 File Offset: 0x000802F4
		public TriggerObject triggerObject()
		{
			TriggerObject triggerObject = base.FragmentFactory.CreateFragment<TriggerObject>();
			int num = this.LA(1);
			if (num <= 43)
			{
				if (num == 5 || num == 43)
				{
					TriggerScope triggerScope = this.triggerScope(triggerObject);
					if (this.inputState.guessing == 0)
					{
						triggerObject.TriggerScope = triggerScope;
						return triggerObject;
					}
					return triggerObject;
				}
			}
			else
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_84;
					}
				}
				SchemaObjectName name = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					triggerObject.Name = name;
					triggerObject.TriggerScope = TriggerScope.Normal;
					return triggerObject;
				}
				return triggerObject;
			}
			IL_84:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060014FD RID: 5373 RVA: 0x0008219C File Offset: 0x0008039C
		public CreateAggregateStatement createAggregateStatement()
		{
			CreateAggregateStatement createAggregateStatement = base.FragmentFactory.CreateFragment<CreateAggregateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName name = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AGGREGATE");
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(name, "AGGREGATE");
				createAggregateStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createAggregateStatement);
			}
			this.match(191);
			ProcedureParameter item = this.aggregateParameter();
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(createAggregateStatement, createAggregateStatement.Parameters, item);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			DataTypeReference returnType = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "RETURNS");
				createAggregateStatement.ReturnType = returnType;
			}
			this.match(175);
			AssemblyName assemblyName = this.assemblyName();
			if (this.inputState.guessing == 0)
			{
				createAggregateStatement.AssemblyName = assemblyName;
			}
			return createAggregateStatement;
		}

		// Token: 0x060014FE RID: 5374 RVA: 0x000822A4 File Offset: 0x000804A4
		public CreateApplicationRoleStatement createApplicationRoleStatement()
		{
			CreateApplicationRoleStatement createApplicationRoleStatement = base.FragmentFactory.CreateFragment<CreateApplicationRoleStatement>();
			this.applicationRoleStatement(createApplicationRoleStatement, true);
			return createApplicationRoleStatement;
		}

		// Token: 0x060014FF RID: 5375 RVA: 0x000822C8 File Offset: 0x000804C8
		public CreateAssemblyStatement createAssemblyStatement()
		{
			CreateAssemblyStatement createAssemblyStatement = base.FragmentFactory.CreateFragment<CreateAssemblyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
				createAssemblyStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createAssemblyStatement);
			}
			this.authorizationOpt(createAssemblyStatement);
			this.match(71);
			this.expressionList(createAssemblyStatement, createAssemblyStatement.Parameters);
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken tPermissionSetVisibility = this.LT(1);
				this.match(232);
				this.match(206);
				AssemblyOption item = this.assemblyPermissionSetOption(tPermissionSetVisibility);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AssemblyOption>(createAssemblyStatement, createAssemblyStatement.Options, item);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createAssemblyStatement;
		}

		// Token: 0x06001500 RID: 5376 RVA: 0x000823E8 File Offset: 0x000805E8
		public CreateAsymmetricKeyStatement createAsymmetricKeyStatement()
		{
			CreateAsymmetricKeyStatement createAsymmetricKeyStatement = base.FragmentFactory.CreateFragment<CreateAsymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
				createAsymmetricKeyStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createAsymmetricKeyStatement);
			}
			this.authorizationOpt(createAsymmetricKeyStatement);
			this.createAsymmetricKeyParams(createAsymmetricKeyStatement);
			if (this.LA(1) == 232 && this.LA(2) == 18)
			{
				Literal password = this.encryptClause();
				if (this.inputState.guessing == 0)
				{
					createAsymmetricKeyStatement.Password = password;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createAsymmetricKeyStatement;
		}

		// Token: 0x06001501 RID: 5377 RVA: 0x000824CC File Offset: 0x000806CC
		public CreateCertificateStatement createCertificateStatement()
		{
			CreateCertificateStatement createCertificateStatement = base.FragmentFactory.CreateFragment<CreateCertificateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				createCertificateStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createCertificateStatement);
			}
			this.authorizationOpt(createCertificateStatement);
			this.createCertificateParams(createCertificateStatement);
			if (this.LA(1) == 232 && this.LA(2) == 67)
			{
				this.createCertificateActivityFlag(createCertificateStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createCertificateStatement;
		}

		// Token: 0x06001502 RID: 5378 RVA: 0x00082594 File Offset: 0x00080794
		public CreateContractStatement createContractStatement()
		{
			CreateContractStatement createContractStatement = base.FragmentFactory.CreateFragment<CreateContractStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CONTRACT");
				createContractStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createContractStatement);
			}
			this.authorizationOpt(createContractStatement);
			this.match(191);
			ContractMessage item = this.contractMessage();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ContractMessage>(createContractStatement, createContractStatement.Messages, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.contractMessage();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ContractMessage>(createContractStatement, createContractStatement.Messages, item);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createContractStatement, token2);
			}
			return createContractStatement;
		}

		// Token: 0x06001503 RID: 5379 RVA: 0x0008268C File Offset: 0x0008088C
		public CreateCredentialStatement createCredentialStatement()
		{
			CreateCredentialStatement createCredentialStatement = base.FragmentFactory.CreateFragment<CreateCredentialStatement>();
			this.credentialStatementBody(createCredentialStatement);
			return createCredentialStatement;
		}

		// Token: 0x06001504 RID: 5380 RVA: 0x000826B0 File Offset: 0x000808B0
		public CreateEndpointStatement createEndpointStatement()
		{
			CreateEndpointStatement createEndpointStatement = base.FragmentFactory.CreateFragment<CreateEndpointStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENDPOINT");
				createEndpointStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createEndpointStatement);
			}
			this.authorizationOpt(createEndpointStatement);
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.endpointOptions(createEndpointStatement);
			}
			this.protocolInfo(createEndpointStatement);
			this.payloadInfo(createEndpointStatement);
			return createEndpointStatement;
		}

		// Token: 0x06001505 RID: 5381 RVA: 0x00082754 File Offset: 0x00080954
		public CreateEventNotificationStatement createEventNotificationStatement()
		{
			CreateEventNotificationStatement createEventNotificationStatement = base.FragmentFactory.CreateFragment<CreateEventNotificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "EVENT");
				TSql80ParserBaseInternal.Match(token2, "NOTIFICATION");
				createEventNotificationStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createEventNotificationStatement);
			}
			EventNotificationObjectScope scope = this.eventNotificationObjectScope();
			if (this.inputState.guessing == 0)
			{
				createEventNotificationStatement.Scope = scope;
			}
			int num = this.LA(1);
			if (num != 67)
			{
				if (num != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "FAN_IN");
					createEventNotificationStatement.WithFanIn = true;
				}
			}
			this.match(67);
			EventTypeGroupContainer item = this.eventTypeGroupContainer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventTypeGroupContainer>(createEventNotificationStatement, createEventNotificationStatement.EventTypeGroups, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.eventTypeGroupContainer();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EventTypeGroupContainer>(createEventNotificationStatement, createEventNotificationStatement.EventTypeGroups, item);
				}
			}
			this.match(151);
			IToken token4 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token4, "SERVICE");
			}
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				createEventNotificationStatement.BrokerService = literal;
			}
			this.match(198);
			literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				createEventNotificationStatement.BrokerInstanceSpecifier = literal;
			}
			return createEventNotificationStatement;
		}

		// Token: 0x06001506 RID: 5382 RVA: 0x00082944 File Offset: 0x00080B44
		public TSqlStatement createFulltextStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FULLTEXT");
			}
			int num = this.LA(1);
			TSqlStatement result;
			if (num != 84)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.createFulltextCatalogStatement();
			}
			else
			{
				result = this.createFulltextIndexStatement();
			}
			return result;
		}

		// Token: 0x06001507 RID: 5383 RVA: 0x000829BC File Offset: 0x00080BBC
		public CreateXmlIndexStatement createPrimaryXmlIndexStatement()
		{
			this.match(118);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
			}
			return this.createXmlIndexStatement(true);
		}

		// Token: 0x06001508 RID: 5384 RVA: 0x00082A0C File Offset: 0x00080C0C
		public TSqlStatement createXmlStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
			}
			int num = this.LA(1);
			TSqlStatement result;
			if (num != 84)
			{
				if (num != 139)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.createXmlSchemaCollectionStatement();
			}
			else
			{
				result = this.createXmlIndexStatement(false);
			}
			return result;
		}

		// Token: 0x06001509 RID: 5385 RVA: 0x00082A88 File Offset: 0x00080C88
		public CreateLoginStatement createLoginStatement()
		{
			CreateLoginStatement createLoginStatement = base.FragmentFactory.CreateFragment<CreateLoginStatement>();
			this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createLoginStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createLoginStatement);
			}
			int num = this.LA(1);
			if (num != 71)
			{
				if (num != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				CreateLoginSource source = this.passwordLoginSource();
				if (this.inputState.guessing == 0)
				{
					createLoginStatement.Source = source;
				}
			}
			else
			{
				this.match(71);
				CreateLoginSource source;
				if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_17_.member(this.LA(2)) && base.NextTokenMatches("WINDOWS"))
				{
					source = this.windowsLoginSource();
				}
				else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
				{
					source = this.certificateLoginSource();
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 91)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					source = this.asymmetricKeyLoginSource();
				}
				if (this.inputState.guessing == 0)
				{
					createLoginStatement.Source = source;
				}
			}
			return createLoginStatement;
		}

		// Token: 0x0600150A RID: 5386 RVA: 0x00082BE4 File Offset: 0x00080DE4
		public CreateMessageTypeStatement createMessageTypeStatement()
		{
			CreateMessageTypeStatement createMessageTypeStatement = base.FragmentFactory.CreateFragment<CreateMessageTypeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MESSAGE");
				TSql80ParserBaseInternal.Match(token2, "TYPE");
				createMessageTypeStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createMessageTypeStatement);
			}
			this.authorizationOpt(createMessageTypeStatement);
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				this.messageTypeValidation(createMessageTypeStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createMessageTypeStatement;
		}

		// Token: 0x0600150B RID: 5387 RVA: 0x00082CC8 File Offset: 0x00080EC8
		public CreateMasterKeyStatement createMasterKeyStatement()
		{
			CreateMasterKeyStatement createMasterKeyStatement = base.FragmentFactory.CreateFragment<CreateMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
			}
			this.match(91);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "ENCRYPTION");
			}
			this.match(18);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "PASSWORD");
			}
			this.match(206);
			Literal password = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				createMasterKeyStatement.Password = password;
			}
			return createMasterKeyStatement;
		}

		// Token: 0x0600150C RID: 5388 RVA: 0x00082DA4 File Offset: 0x00080FA4
		public TSqlStatement createPartitionStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTITION");
			}
			int num = this.LA(1);
			TSqlStatement result;
			if (num != 73)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.createPartitionScheme();
			}
			else
			{
				result = this.createPartitionFunction();
			}
			return result;
		}

		// Token: 0x0600150D RID: 5389 RVA: 0x00082E20 File Offset: 0x00081020
		public CreateQueueStatement createQueueStatement()
		{
			CreateQueueStatement createQueueStatement = base.FragmentFactory.CreateFragment<CreateQueueStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName name = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUEUE");
				createQueueStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createQueueStatement);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.queueOptionList(createQueueStatement, false);
			}
			else if (!TSql90ParserInternal.tokenSet_21_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return createQueueStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return createQueueStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return createQueueStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return createQueueStatement;
							default:
								if (num == 28)
								{
									return createQueueStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return createQueueStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return createQueueStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return createQueueStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return createQueueStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						return createQueueStatement;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						IdentifierOrValueExpression onFileGroup = this.stringOrIdentifier();
						if (this.inputState.guessing == 0)
						{
							createQueueStatement.OnFileGroup = onFileGroup;
							return createQueueStatement;
						}
						return createQueueStatement;
					}
					case 106:
						return createQueueStatement;
					default:
						if (num == 119)
						{
							return createQueueStatement;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createQueueStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createQueueStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createQueueStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return createQueueStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return createQueueStatement;
				default:
					if (num == 191)
					{
						return createQueueStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return createQueueStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return createQueueStatement;
				default:
					if (num == 232)
					{
						return createQueueStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600150E RID: 5390 RVA: 0x00083198 File Offset: 0x00081398
		public CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement()
		{
			CreateRemoteServiceBindingStatement createRemoteServiceBindingStatement = base.FragmentFactory.CreateFragment<CreateRemoteServiceBindingStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REMOTE");
				TSql80ParserBaseInternal.Match(token2, "SERVICE");
				TSql80ParserBaseInternal.Match(token3, "BINDING");
				createRemoteServiceBindingStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createRemoteServiceBindingStatement);
			}
			this.authorizationOpt(createRemoteServiceBindingStatement);
			this.match(151);
			IToken token4 = this.LT(1);
			this.match(232);
			Literal service = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token4, "SERVICE");
				createRemoteServiceBindingStatement.Service = service;
			}
			this.match(171);
			int num = this.LA(1);
			RemoteServiceBindingOption item;
			if (num == 163)
			{
				item = this.bindingUserOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, item);
				}
				int num2 = this.LA(1);
				if (num2 <= 95)
				{
					if (num2 <= 35)
					{
						if (num2 <= 17)
						{
							if (num2 == 1)
							{
								return createRemoteServiceBindingStatement;
							}
							switch (num2)
							{
							case 4:
							case 6:
								return createRemoteServiceBindingStatement;
							case 5:
								break;
							default:
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									return createRemoteServiceBindingStatement;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 22:
							case 23:
								return createRemoteServiceBindingStatement;
							default:
								if (num2 == 28)
								{
									return createRemoteServiceBindingStatement;
								}
								switch (num2)
								{
								case 33:
								case 35:
									return createRemoteServiceBindingStatement;
								}
								break;
							}
						}
					}
					else if (num2 <= 82)
					{
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return createRemoteServiceBindingStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								return createRemoteServiceBindingStatement;
							default:
								if (num2 == 82)
								{
									return createRemoteServiceBindingStatement;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 86 || num2 == 92 || num2 == 95)
					{
						return createRemoteServiceBindingStatement;
					}
				}
				else if (num2 <= 176)
				{
					if (num2 <= 144)
					{
						if (num2 == 106 || num2 == 119)
						{
							return createRemoteServiceBindingStatement;
						}
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return createRemoteServiceBindingStatement;
						}
					}
					else
					{
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createRemoteServiceBindingStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createRemoteServiceBindingStatement;
							case 168:
							case 169:
								break;
							default:
								if (num2 == 176)
								{
									return createRemoteServiceBindingStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 198)
				{
					switch (num2)
					{
					case 180:
					case 181:
						return createRemoteServiceBindingStatement;
					default:
						if (num2 == 191)
						{
							return createRemoteServiceBindingStatement;
						}
						if (num2 == 198)
						{
							this.match(198);
							item = this.bindingAnonymousOption();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, item);
								return createRemoteServiceBindingStatement;
							}
							return createRemoteServiceBindingStatement;
						}
						break;
					}
				}
				else
				{
					if (num2 == 204)
					{
						return createRemoteServiceBindingStatement;
					}
					switch (num2)
					{
					case 219:
					case 220:
						return createRemoteServiceBindingStatement;
					default:
						if (num2 == 232)
						{
							return createRemoteServiceBindingStatement;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			item = this.bindingAnonymousOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, item);
			}
			int num3 = this.LA(1);
			if (num3 <= 95)
			{
				if (num3 <= 35)
				{
					if (num3 <= 17)
					{
						if (num3 == 1)
						{
							return createRemoteServiceBindingStatement;
						}
						switch (num3)
						{
						case 4:
						case 6:
							return createRemoteServiceBindingStatement;
						case 5:
							break;
						default:
							switch (num3)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return createRemoteServiceBindingStatement;
							}
							break;
						}
					}
					else
					{
						switch (num3)
						{
						case 22:
						case 23:
							return createRemoteServiceBindingStatement;
						default:
							if (num3 == 28)
							{
								return createRemoteServiceBindingStatement;
							}
							switch (num3)
							{
							case 33:
							case 35:
								return createRemoteServiceBindingStatement;
							}
							break;
						}
					}
				}
				else if (num3 <= 82)
				{
					switch (num3)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return createRemoteServiceBindingStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num3)
						{
						case 74:
						case 75:
							return createRemoteServiceBindingStatement;
						default:
							if (num3 == 82)
							{
								return createRemoteServiceBindingStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 86 || num3 == 92 || num3 == 95)
				{
					return createRemoteServiceBindingStatement;
				}
			}
			else if (num3 <= 176)
			{
				if (num3 <= 144)
				{
					if (num3 == 106 || num3 == 119)
					{
						return createRemoteServiceBindingStatement;
					}
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createRemoteServiceBindingStatement;
					}
				}
				else
				{
					switch (num3)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return createRemoteServiceBindingStatement;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num3)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return createRemoteServiceBindingStatement;
						case 168:
						case 169:
							break;
						default:
							if (num3 == 176)
							{
								return createRemoteServiceBindingStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 198)
			{
				switch (num3)
				{
				case 180:
				case 181:
					return createRemoteServiceBindingStatement;
				default:
					if (num3 == 191)
					{
						return createRemoteServiceBindingStatement;
					}
					if (num3 == 198)
					{
						this.match(198);
						item = this.bindingUserOption();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(createRemoteServiceBindingStatement, createRemoteServiceBindingStatement.Options, item);
							return createRemoteServiceBindingStatement;
						}
						return createRemoteServiceBindingStatement;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					return createRemoteServiceBindingStatement;
				}
				switch (num3)
				{
				case 219:
				case 220:
					return createRemoteServiceBindingStatement;
				default:
					if (num3 == 232)
					{
						return createRemoteServiceBindingStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600150F RID: 5391 RVA: 0x000838B8 File Offset: 0x00081AB8
		public CreateRoleStatement createRoleStatement()
		{
			CreateRoleStatement createRoleStatement = base.FragmentFactory.CreateFragment<CreateRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				createRoleStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createRoleStatement);
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return createRoleStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return createRoleStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 11:
							this.match(11);
							identifier = this.identifier();
							if (this.inputState.guessing == 0)
							{
								createRoleStatement.Owner = identifier;
								return createRoleStatement;
							}
							return createRoleStatement;
						case 12:
						case 13:
						case 15:
						case 17:
						case 22:
						case 23:
							return createRoleStatement;
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
						case 21:
							break;
						default:
							if (num == 28)
							{
								return createRoleStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return createRoleStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return createRoleStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return createRoleStatement;
						default:
							if (num == 82)
							{
								return createRoleStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return createRoleStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 119)
					{
						return createRoleStatement;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createRoleStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createRoleStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createRoleStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return createRoleStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return createRoleStatement;
				default:
					if (num == 191)
					{
						return createRoleStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return createRoleStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return createRoleStatement;
				default:
					if (num == 232)
					{
						return createRoleStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001510 RID: 5392 RVA: 0x00083BAC File Offset: 0x00081DAC
		public CreateRouteStatement createRouteStatement()
		{
			CreateRouteStatement createRouteStatement = base.FragmentFactory.CreateFragment<CreateRouteStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROUTE");
				createRouteStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createRouteStatement);
			}
			this.authorizationOpt(createRouteStatement);
			this.routeOptionList(createRouteStatement);
			return createRouteStatement;
		}

		// Token: 0x06001511 RID: 5393 RVA: 0x00083C18 File Offset: 0x00081E18
		public CreateServiceStatement createServiceStatement()
		{
			CreateServiceStatement createServiceStatement = base.FragmentFactory.CreateFragment<CreateServiceStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
				createServiceStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createServiceStatement);
			}
			this.authorizationOpt(createServiceStatement);
			this.onQueueClause(createServiceStatement);
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.match(191);
				ServiceContract item = this.serviceContract();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ServiceContract>(createServiceStatement, createServiceStatement.ServiceContracts, item);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					item = this.serviceContract();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ServiceContract>(createServiceStatement, createServiceStatement.ServiceContracts, item);
					}
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(createServiceStatement, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createServiceStatement;
		}

		// Token: 0x06001512 RID: 5394 RVA: 0x00083D84 File Offset: 0x00081F84
		public CreateSymmetricKeyStatement createSymmetricKeyStatement()
		{
			CreateSymmetricKeyStatement createSymmetricKeyStatement = base.FragmentFactory.CreateFragment<CreateSymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
				createSymmetricKeyStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createSymmetricKeyStatement);
			}
			this.authorizationOpt(createSymmetricKeyStatement);
			this.match(171);
			this.keySpecList(createSymmetricKeyStatement);
			this.encryptorListWithNoPassword(createSymmetricKeyStatement);
			return createSymmetricKeyStatement;
		}

		// Token: 0x06001513 RID: 5395 RVA: 0x00083E08 File Offset: 0x00082008
		public CreateSynonymStatement createSynonymStatement()
		{
			CreateSynonymStatement createSynonymStatement = base.FragmentFactory.CreateFragment<CreateSynonymStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYNONYM");
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "SYNONYM");
				createSynonymStatement.Name = schemaObjectName;
				base.ThrowPartialAstIfPhaseOne(createSynonymStatement);
			}
			this.match(67);
			schemaObjectName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				createSynonymStatement.ForName = schemaObjectName;
			}
			return createSynonymStatement;
		}

		// Token: 0x06001514 RID: 5396 RVA: 0x00083EA0 File Offset: 0x000820A0
		public CreateTypeStatement createTypeStatement()
		{
			CreateTypeStatement createTypeStatement = null;
			SchemaObjectName name = null;
			try
			{
				IToken token = this.LT(1);
				this.match(232);
				name = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "TYPE");
					TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(name, "TYPE");
				}
				int num = this.LA(1);
				if (num != 71)
				{
					if (num != 175)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					createTypeStatement = this.createTypeUdtStatement();
				}
				else
				{
					createTypeStatement = this.createTypeUddtStatement();
				}
				if (this.inputState.guessing == 0)
				{
					createTypeStatement.Name = name;
				}
			}
			catch (PhaseOnePartialAstException ex)
			{
				if (this.inputState.guessing == 0)
				{
					CreateTypeStatement createTypeStatement2 = ex.Statement as CreateTypeStatement;
					createTypeStatement2.Name = name;
					throw;
				}
				throw;
			}
			return createTypeStatement;
		}

		// Token: 0x06001515 RID: 5397 RVA: 0x00083F80 File Offset: 0x00082180
		public CreateUserStatement createUserStatement()
		{
			CreateUserStatement createUserStatement = base.FragmentFactory.CreateFragment<CreateUserStatement>();
			this.match(163);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createUserStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createUserStatement);
			}
			if ((this.LA(1) == 67 || this.LA(1) == 71 || this.LA(1) == 232) && this.LA(2) == 232)
			{
				UserLoginOption userLoginOption = this.userLoginOption();
				if (this.inputState.guessing == 0)
				{
					createUserStatement.UserLoginOption = userLoginOption;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.createUserDefaultSchemaOpt(createUserStatement);
			return createUserStatement;
		}

		// Token: 0x06001516 RID: 5398 RVA: 0x00084058 File Offset: 0x00082258
		public ProcedureParameter aggregateParameter()
		{
			ProcedureParameter procedureParameter = base.FragmentFactory.CreateFragment<ProcedureParameter>();
			Identifier variableName = this.identifierVariable();
			DataTypeReference dataType = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				procedureParameter.VariableName = variableName;
				procedureParameter.DataType = dataType;
			}
			return procedureParameter;
		}

		// Token: 0x06001517 RID: 5399 RVA: 0x0008409C File Offset: 0x0008229C
		public AssemblyName assemblyName()
		{
			AssemblyName assemblyName = base.FragmentFactory.CreateFragment<AssemblyName>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NAME");
			}
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				assemblyName.Name = identifier;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return assemblyName;
						}
						switch (num)
						{
						case 4:
						case 6:
							return assemblyName;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return assemblyName;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return assemblyName;
						default:
							if (num == 28)
							{
								return assemblyName;
							}
							switch (num)
							{
							case 33:
							case 35:
								return assemblyName;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return assemblyName;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return assemblyName;
						default:
							if (num == 82)
							{
								return assemblyName;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return assemblyName;
				}
			}
			else if (num <= 176)
			{
				if (num <= 144)
				{
					if (num == 106 || num == 119)
					{
						return assemblyName;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return assemblyName;
					}
				}
				else
				{
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return assemblyName;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return assemblyName;
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								return assemblyName;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 200)
			{
				switch (num)
				{
				case 180:
				case 181:
					return assemblyName;
				default:
					if (num == 191)
					{
						return assemblyName;
					}
					if (num == 200)
					{
						this.match(200);
						identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							assemblyName.ClassName = identifier;
							return assemblyName;
						}
						return assemblyName;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return assemblyName;
				}
				switch (num)
				{
				case 219:
				case 220:
					return assemblyName;
				default:
					if (num == 232)
					{
						return assemblyName;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001518 RID: 5400 RVA: 0x0008439C File Offset: 0x0008259C
		public Identifier identifierVariable()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			IToken token = this.LT(1);
			this.match(234);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
				identifier.SetIdentifier(token.getText());
			}
			return identifier;
		}

		// Token: 0x06001519 RID: 5401 RVA: 0x000843EC File Offset: 0x000825EC
		public void applicationRoleStatement(ApplicationRoleStatement vParent, bool defaultSchemaAndPasswordOnly)
		{
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "APPLICATION");
				TSql80ParserBaseInternal.Match(token2, "ROLE");
				vParent.Name = name;
				base.ThrowPartialAstIfPhaseOne(vParent);
			}
			this.match(171);
			ApplicationRoleOption item = this.applicationRoleOption(defaultSchemaAndPasswordOnly);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ApplicationRoleOption>(vParent, vParent.ApplicationRoleOptions, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.applicationRoleOption(defaultSchemaAndPasswordOnly);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ApplicationRoleOption>(vParent, vParent.ApplicationRoleOptions, item);
				}
			}
		}

		// Token: 0x0600151A RID: 5402 RVA: 0x000844C8 File Offset: 0x000826C8
		public Identifier identifier()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			switch (this.LA(1))
			{
			case 232:
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
					identifier.SetUnquotedIdentifier(token.getText());
					TSql80ParserBaseInternal.CheckIdentifierLength(identifier);
				}
				break;
			}
			case 233:
			{
				IToken token2 = this.LT(1);
				this.match(233);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token2);
					identifier.SetIdentifier(token2.getText());
					TSql80ParserBaseInternal.CheckIdentifierLength(identifier);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifier;
		}

		// Token: 0x0600151B RID: 5403 RVA: 0x00084590 File Offset: 0x00082790
		public void authorizationOpt(IAuthorization vParent)
		{
			int num = this.LA(1);
			if (num <= 106)
			{
				if (num <= 64)
				{
					if (num <= 23)
					{
						switch (num)
						{
						case 1:
						case 4:
						case 6:
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
							return;
						case 2:
						case 3:
						case 5:
						case 7:
						case 8:
						case 10:
						case 14:
						case 16:
							break;
						case 11:
							this.authorization(vParent);
							return;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return;
							}
							break;
						}
					}
					else
					{
						if (num == 28)
						{
							return;
						}
						switch (num)
						{
						case 33:
						case 35:
							return;
						case 34:
							break;
						default:
							switch (num)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								return;
							}
							break;
						}
					}
				}
				else if (num <= 86)
				{
					switch (num)
					{
					case 71:
					case 74:
					case 75:
						return;
					case 72:
					case 73:
						break;
					default:
						if (num == 82 || num == 86)
						{
							return;
						}
						break;
					}
				}
				else
				{
					if (num == 92 || num == 95)
					{
						return;
					}
					switch (num)
					{
					case 105:
					case 106:
						return;
					}
				}
			}
			else if (num <= 172)
			{
				if (num <= 144)
				{
					if (num == 119)
					{
						return;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return;
					}
				}
				else
				{
					if (num == 151)
					{
						return;
					}
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return;
				}
				switch (num)
				{
				case 180:
				case 181:
					return;
				default:
					if (num == 191)
					{
						return;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return;
				}
				switch (num)
				{
				case 219:
				case 220:
					return;
				default:
					if (num == 232)
					{
						return;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600151C RID: 5404 RVA: 0x00084844 File Offset: 0x00082A44
		public void expressionList(TSqlFragment vParent, IList<ScalarExpression> expressions)
		{
			ScalarExpression item = this.expression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, expressions, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.expression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, expressions, item);
				}
			}
		}

		// Token: 0x0600151D RID: 5405 RVA: 0x000848A4 File Offset: 0x00082AA4
		public PermissionSetAssemblyOption assemblyPermissionSetOption(IToken tPermissionSetVisibility)
		{
			PermissionSetAssemblyOption permissionSetAssemblyOption = base.FragmentFactory.CreateFragment<PermissionSetAssemblyOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(tPermissionSetVisibility, "PERMISSION_SET");
				TSql80ParserBaseInternal.UpdateTokenInfo(permissionSetAssemblyOption, tPermissionSetVisibility);
				permissionSetAssemblyOption.OptionKind = AssemblyOptionKind.PermissionSet;
				TSql80ParserBaseInternal.UpdateTokenInfo(permissionSetAssemblyOption, token);
				permissionSetAssemblyOption.PermissionSetOption = PermissionSetOptionHelper.Instance.ParseOption(token);
			}
			return permissionSetAssemblyOption;
		}

		// Token: 0x0600151E RID: 5406 RVA: 0x00084914 File Offset: 0x00082B14
		public void createAsymmetricKeyParams(CreateAsymmetricKeyStatement vParent)
		{
			int num = this.LA(1);
			if (num != 71)
			{
				if (num != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				this.asymKeySpec(vParent);
				return;
			}
			else
			{
				this.match(71);
				EncryptionSource keySource = this.asymKeySource();
				if (this.inputState.guessing == 0)
				{
					vParent.KeySource = keySource;
					return;
				}
				return;
			}
		}

		// Token: 0x0600151F RID: 5407 RVA: 0x00084984 File Offset: 0x00082B84
		public Literal encryptClause()
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			Literal result = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
				TSql80ParserBaseInternal.Match(token2, "PASSWORD");
			}
			return result;
		}

		// Token: 0x06001520 RID: 5408 RVA: 0x000849FC File Offset: 0x00082BFC
		public EncryptionSource asymKeySource()
		{
			EncryptionSource result;
			if ((this.LA(1) == 65 || this.LA(1) == 232) && (this.LA(2) == 65 || this.LA(2) == 206))
			{
				result = this.fileEncryptionSource();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.assemblyEncryptionSource();
			}
			return result;
		}

		// Token: 0x06001521 RID: 5409 RVA: 0x00084A8C File Offset: 0x00082C8C
		public void asymKeySpec(CreateAsymmetricKeyStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ALGORITHM");
				vParent.EncryptionAlgorithm = EncryptionAlgorithmsHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06001522 RID: 5410 RVA: 0x00084B00 File Offset: 0x00082D00
		public FileEncryptionSource fileEncryptionSource()
		{
			FileEncryptionSource fileEncryptionSource = base.FragmentFactory.CreateFragment<FileEncryptionSource>();
			int num = this.LA(1);
			if (num != 65)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "EXECUTABLE");
					fileEncryptionSource.IsExecutable = true;
				}
			}
			this.match(65);
			this.match(206);
			Literal file = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				fileEncryptionSource.File = file;
			}
			return fileEncryptionSource;
		}

		// Token: 0x06001523 RID: 5411 RVA: 0x00084BA8 File Offset: 0x00082DA8
		public AssemblyEncryptionSource assemblyEncryptionSource()
		{
			AssemblyEncryptionSource assemblyEncryptionSource = base.FragmentFactory.CreateFragment<AssemblyEncryptionSource>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier assembly = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
				assemblyEncryptionSource.Assembly = assembly;
			}
			return assemblyEncryptionSource;
		}

		// Token: 0x06001524 RID: 5412 RVA: 0x00084C00 File Offset: 0x00082E00
		public StringLiteral stringLiteral()
		{
			StringLiteral stringLiteral = base.FragmentFactory.CreateFragment<StringLiteral>();
			switch (this.LA(1))
			{
			case 230:
			{
				IToken token = this.LT(1);
				this.match(230);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(stringLiteral, token);
					stringLiteral.Value = TSql80ParserBaseInternal.DecodeAsciiStringLiteral(token.getText());
					stringLiteral.IsLargeObject = TSql80ParserBaseInternal.IsAsciiStringLob(stringLiteral.Value);
				}
				break;
			}
			case 231:
			{
				IToken token2 = this.LT(1);
				this.match(231);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(stringLiteral, token2);
					stringLiteral.IsNational = true;
					stringLiteral.Value = TSql80ParserBaseInternal.DecodeUnicodeStringLiteral(token2.getText());
					stringLiteral.IsLargeObject = TSql80ParserBaseInternal.IsUnicodeStringLob(stringLiteral.Value);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return stringLiteral;
		}

		// Token: 0x06001525 RID: 5413 RVA: 0x00084CF4 File Offset: 0x00082EF4
		public void createCertificateParams(CreateCertificateStatement vParent)
		{
			CertificateOptionKinds certificateOptionKinds = CertificateOptionKinds.None;
			int num = this.LA(1);
			if (num == 71)
			{
				this.match(71);
				this.certificateSource(vParent);
				return;
			}
			if (num != 171 && num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num2 = this.LA(1);
			if (num2 != 171)
			{
				if (num2 != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				Literal encryptionPassword = this.encryptClause();
				if (this.inputState.guessing == 0)
				{
					vParent.EncryptionPassword = encryptionPassword;
				}
			}
			this.match(171);
			CertificateOption certificateOption = this.certificateOption(certificateOptionKinds);
			if (this.inputState.guessing == 0)
			{
				certificateOptionKinds |= certificateOption.Kind;
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CertificateOption>(vParent, vParent.CertificateOptions, certificateOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				certificateOption = this.certificateOption(certificateOptionKinds);
				if (this.inputState.guessing == 0)
				{
					certificateOptionKinds |= certificateOption.Kind;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CertificateOption>(vParent, vParent.CertificateOptions, certificateOption);
				}
			}
		}

		// Token: 0x06001526 RID: 5414 RVA: 0x00084E10 File Offset: 0x00083010
		public void createCertificateActivityFlag(CertificateStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(67);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			OptionState activeForBeginDialog = this.optionOnOff(vParent);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ACTIVE");
				TSql80ParserBaseInternal.Match(token2, "BEGIN_DIALOG");
				vParent.ActiveForBeginDialog = activeForBeginDialog;
			}
		}

		// Token: 0x06001527 RID: 5415 RVA: 0x00084E8C File Offset: 0x0008308C
		public void certificateSource(CreateCertificateStatement vParent)
		{
			EncryptionSource certificateSource;
			if ((this.LA(1) == 65 || this.LA(1) == 232) && (this.LA(2) == 65 || this.LA(2) == 206))
			{
				certificateSource = this.fileEncryptionSource();
				if (this.LA(1) == 171 && this.LA(2) == 232)
				{
					this.match(171);
					this.privateKeySpec(vParent);
				}
				else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				certificateSource = this.assemblyEncryptionSource();
			}
			if (this.inputState.guessing == 0)
			{
				vParent.CertificateSource = certificateSource;
			}
		}

		// Token: 0x06001528 RID: 5416 RVA: 0x00084F98 File Offset: 0x00083198
		public CertificateOption certificateOption(CertificateOptionKinds encountered)
		{
			CertificateOption certificateOption = base.FragmentFactory.CreateFragment<CertificateOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal value = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				certificateOption.Kind = CertificateOptionKindsHelper.Instance.ParseOption(token);
				certificateOption.Value = value;
				TSql90ParserBaseInternal.CheckCertificateOptionDupication(encountered, certificateOption.Kind, token);
			}
			return certificateOption;
		}

		// Token: 0x06001529 RID: 5417 RVA: 0x0008500C File Offset: 0x0008320C
		public OptionState optionOnOff(TSqlFragment vParent)
		{
			OptionState result = OptionState.NotSet;
			switch (this.LA(1))
			{
			case 103:
			{
				IToken token = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					result = OptionState.Off;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return result;
				}
				return result;
			}
			case 105:
			{
				IToken token2 = this.LT(1);
				this.match(105);
				if (this.inputState.guessing == 0)
				{
					result = OptionState.On;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					return result;
				}
				return result;
			}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600152A RID: 5418 RVA: 0x000850A4 File Offset: 0x000832A4
		public void privateKeySpec(CertificateStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			this.match(191);
			this.certificatePrivateKeySpec(vParent);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.certificatePrivateKeySpec(vParent);
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PRIVATE");
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x0600152B RID: 5419 RVA: 0x00085138 File Offset: 0x00083338
		public void certificatePrivateKeySpec(CertificateStatementBase vParent)
		{
			int num = this.LA(1);
			if (num != 65)
			{
				if (num == 232)
				{
					this.passwordChangeOption(vParent);
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			else
			{
				IToken token = this.LT(1);
				this.match(65);
				this.match(206);
				Literal privateKeyPath = this.stringLiteral();
				if (this.inputState.guessing != 0)
				{
					return;
				}
				if (vParent.PrivateKeyPath != null)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				vParent.PrivateKeyPath = privateKeyPath;
				return;
			}
		}

		// Token: 0x0600152C RID: 5420 RVA: 0x000851C0 File Offset: 0x000833C0
		public void passwordChangeOption(IPasswordChangeOption vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "ENCRYPTION"))
				{
					if (vParent.EncryptionPassword != null)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					vParent.EncryptionPassword = literal;
					return;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "DECRYPTION");
					if (vParent.DecryptionPassword != null)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					vParent.DecryptionPassword = literal;
				}
			}
		}

		// Token: 0x0600152D RID: 5421 RVA: 0x00085264 File Offset: 0x00083464
		public ContractMessage contractMessage()
		{
			ContractMessage contractMessage = base.FragmentFactory.CreateFragment<ContractMessage>();
			Identifier name = this.identifier();
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SENT");
				contractMessage.Name = name;
			}
			int num = this.LA(1);
			if (num != 8)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "INITIATOR"))
					{
						contractMessage.SentBy = MessageSender.Initiator;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "TARGET");
						contractMessage.SentBy = MessageSender.Target;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(contractMessage, token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(8);
				if (this.inputState.guessing == 0)
				{
					contractMessage.SentBy = MessageSender.Any;
					TSql80ParserBaseInternal.UpdateTokenInfo(contractMessage, token3);
				}
			}
			return contractMessage;
		}

		// Token: 0x0600152E RID: 5422 RVA: 0x00085370 File Offset: 0x00083570
		public void credentialStatementBody(CredentialStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CREDENTIAL");
				vParent.Name = name;
				base.ThrowPartialAstIfPhaseOne(vParent);
			}
			this.match(171);
			this.match(79);
			this.match(206);
			Literal literal = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				vParent.Identity = literal;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return;
						}
						switch (num)
						{
						case 4:
						case 6:
							return;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return;
						default:
							if (num == 28)
							{
								return;
							}
							switch (num)
							{
							case 33:
							case 35:
								return;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return;
						default:
							if (num == 82)
							{
								return;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return;
				}
			}
			else if (num <= 176)
			{
				if (num <= 144)
				{
					if (num == 106 || num == 119)
					{
						return;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return;
					}
				}
				else
				{
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return;
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								return;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 180:
				case 181:
					return;
				default:
					if (num == 191)
					{
						return;
					}
					if (num == 198)
					{
						this.match(198);
						IToken token2 = this.LT(1);
						this.match(232);
						this.match(206);
						literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "SECRET");
							vParent.Secret = literal;
							return;
						}
						return;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return;
				}
				switch (num)
				{
				case 219:
				case 220:
					return;
				default:
					if (num == 232)
					{
						return;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600152F RID: 5423 RVA: 0x000856EC File Offset: 0x000838EC
		public SqlCommandIdentifier sqlCommandIdentifier()
		{
			SqlCommandIdentifier sqlCommandIdentifier = base.FragmentFactory.CreateFragment<SqlCommandIdentifier>();
			IToken token = this.LT(1);
			this.match(226);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(sqlCommandIdentifier, token);
				sqlCommandIdentifier.SetUnquotedIdentifier(token.getText());
			}
			return sqlCommandIdentifier;
		}

		// Token: 0x06001530 RID: 5424 RVA: 0x0008573C File Offset: 0x0008393C
		public AlterDatabaseStatement alterDbAdd()
		{
			this.match(4);
			AlterDatabaseStatement result;
			if ((this.LA(1) == 65 || this.LA(1) == 232) && (this.LA(2) == 65 || this.LA(2) == 191))
			{
				result = this.alterDbAddFile();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.alterDbAddFilegroup();
			}
			return result;
		}

		// Token: 0x06001531 RID: 5425 RVA: 0x000857D4 File Offset: 0x000839D4
		public AlterDatabaseStatement alterDbRemove()
		{
			AlterDatabaseStatement result = null;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REMOVE");
			}
			int num = this.LA(1);
			if (num != 65)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "FILEGROUP");
					AlterDatabaseRemoveFileGroupStatement alterDatabaseRemoveFileGroupStatement = base.FragmentFactory.CreateFragment<AlterDatabaseRemoveFileGroupStatement>();
					alterDatabaseRemoveFileGroupStatement.FileGroup = identifier;
					result = alterDatabaseRemoveFileGroupStatement;
				}
			}
			else
			{
				this.match(65);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					AlterDatabaseRemoveFileStatement alterDatabaseRemoveFileStatement = base.FragmentFactory.CreateFragment<AlterDatabaseRemoveFileStatement>();
					alterDatabaseRemoveFileStatement.File = identifier;
					result = alterDatabaseRemoveFileStatement;
				}
			}
			return result;
		}

		// Token: 0x06001532 RID: 5426 RVA: 0x000858C8 File Offset: 0x00083AC8
		public AlterDatabaseStatement alterDbModify()
		{
			AlterDatabaseStatement result = null;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MODIFY");
			}
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NAME"))
			{
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(206);
				Identifier newDatabaseName = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NAME");
					AlterDatabaseModifyNameStatement alterDatabaseModifyNameStatement = base.FragmentFactory.CreateFragment<AlterDatabaseModifyNameStatement>();
					alterDatabaseModifyNameStatement.NewDatabaseName = newDatabaseName;
					result = alterDatabaseModifyNameStatement;
				}
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "FILEGROUP");
				}
				result = this.alterDbModifyFilegroup();
			}
			else
			{
				if (this.LA(1) != 65)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.alterDbModifyFile();
			}
			return result;
		}

		// Token: 0x06001533 RID: 5427 RVA: 0x00085A18 File Offset: 0x00083C18
		public AlterDatabaseSetStatement alterDbSet()
		{
			this.match(142);
			AlterDatabaseSetStatement alterDatabaseSetStatement = this.dbOptionStateList();
			if (this.LA(1) == 171 && (this.LA(2) == 134 || this.LA(2) == 232))
			{
				AlterDatabaseTermination termination = this.xactTermination();
				if (this.inputState.guessing == 0)
				{
					alterDatabaseSetStatement.Termination = termination;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterDatabaseSetStatement;
		}

		// Token: 0x06001534 RID: 5428 RVA: 0x00085AB8 File Offset: 0x00083CB8
		public AlterDatabaseCollateStatement alterDbCollate()
		{
			AlterDatabaseCollateStatement alterDatabaseCollateStatement = base.FragmentFactory.CreateFragment<AlterDatabaseCollateStatement>();
			this.collation(alterDatabaseCollateStatement);
			return alterDatabaseCollateStatement;
		}

		// Token: 0x06001535 RID: 5429 RVA: 0x00085ADC File Offset: 0x00083CDC
		public AlterDatabaseRebuildLogStatement alterDbRebuild()
		{
			AlterDatabaseRebuildLogStatement alterDatabaseRebuildLogStatement = base.FragmentFactory.CreateFragment<AlterDatabaseRebuildLogStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REBUILD");
				TSql80ParserBaseInternal.Match(token2, "LOG");
				TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseRebuildLogStatement, token2);
				base.ThrowPartialAstIfPhaseOne(alterDatabaseRebuildLogStatement);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return alterDatabaseRebuildLogStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return alterDatabaseRebuildLogStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return alterDatabaseRebuildLogStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return alterDatabaseRebuildLogStatement;
							default:
								if (num == 28)
								{
									return alterDatabaseRebuildLogStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return alterDatabaseRebuildLogStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return alterDatabaseRebuildLogStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return alterDatabaseRebuildLogStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return alterDatabaseRebuildLogStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						return alterDatabaseRebuildLogStatement;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						FileDeclaration fileDeclaration = this.fileDecl(false);
						if (this.inputState.guessing == 0)
						{
							alterDatabaseRebuildLogStatement.FileDeclaration = fileDeclaration;
							return alterDatabaseRebuildLogStatement;
						}
						return alterDatabaseRebuildLogStatement;
					}
					case 106:
						return alterDatabaseRebuildLogStatement;
					default:
						if (num == 119)
						{
							return alterDatabaseRebuildLogStatement;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterDatabaseRebuildLogStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return alterDatabaseRebuildLogStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return alterDatabaseRebuildLogStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return alterDatabaseRebuildLogStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return alterDatabaseRebuildLogStatement;
				default:
					if (num == 191)
					{
						return alterDatabaseRebuildLogStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return alterDatabaseRebuildLogStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return alterDatabaseRebuildLogStatement;
				default:
					if (num == 232)
					{
						return alterDatabaseRebuildLogStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001536 RID: 5430 RVA: 0x00085E10 File Offset: 0x00084010
		public void collation(ICollationSetter vParent)
		{
			this.match(26);
			Identifier collation = this.nonQuotedIdentifier();
			if (this.inputState.guessing == 0)
			{
				vParent.Collation = collation;
			}
		}

		// Token: 0x06001537 RID: 5431 RVA: 0x00085E40 File Offset: 0x00084040
		public FileDeclaration fileDecl(bool isAlterDbModifyFileStatement)
		{
			int num = this.LA(1);
			FileDeclaration fileDeclaration;
			if (num != 118)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				fileDeclaration = this.fileDeclBody(isAlterDbModifyFileStatement);
			}
			else
			{
				IToken token = this.LT(1);
				this.match(118);
				fileDeclaration = this.fileDeclBody(isAlterDbModifyFileStatement);
				if (this.inputState.guessing == 0)
				{
					fileDeclaration.IsPrimary = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclaration, token);
				}
			}
			return fileDeclaration;
		}

		// Token: 0x06001538 RID: 5432 RVA: 0x00085EBC File Offset: 0x000840BC
		public AlterDatabaseAddFileStatement alterDbAddFile()
		{
			AlterDatabaseAddFileStatement alterDatabaseAddFileStatement = base.FragmentFactory.CreateFragment<AlterDatabaseAddFileStatement>();
			int num = this.LA(1);
			if (num != 65)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOG");
					alterDatabaseAddFileStatement.IsLog = true;
				}
			}
			this.match(65);
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterDatabaseAddFileStatement);
			}
			this.fileDeclBodyList(alterDatabaseAddFileStatement, alterDatabaseAddFileStatement.FileDeclarations);
			int num2 = this.LA(1);
			if (num2 <= 95)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						if (num2 == 1)
						{
							return alterDatabaseAddFileStatement;
						}
						switch (num2)
						{
						case 4:
						case 6:
							return alterDatabaseAddFileStatement;
						case 5:
							break;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return alterDatabaseAddFileStatement;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							return alterDatabaseAddFileStatement;
						default:
							if (num2 == 28)
							{
								return alterDatabaseAddFileStatement;
							}
							switch (num2)
							{
							case 33:
							case 35:
								return alterDatabaseAddFileStatement;
							}
							break;
						}
					}
				}
				else if (num2 <= 82)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return alterDatabaseAddFileStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num2)
						{
						case 74:
						case 75:
							return alterDatabaseAddFileStatement;
						default:
							if (num2 == 82)
							{
								return alterDatabaseAddFileStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 86 || num2 == 92 || num2 == 95)
				{
					return alterDatabaseAddFileStatement;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 144)
				{
					if (num2 == 106 || num2 == 119)
					{
						return alterDatabaseAddFileStatement;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterDatabaseAddFileStatement;
					}
				}
				else if (num2 != 151)
				{
					switch (num2)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return alterDatabaseAddFileStatement;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num2)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return alterDatabaseAddFileStatement;
						}
						break;
					}
				}
				else
				{
					Identifier fileGroup = this.toFilegroup();
					if (this.inputState.guessing == 0)
					{
						alterDatabaseAddFileStatement.FileGroup = fileGroup;
						return alterDatabaseAddFileStatement;
					}
					return alterDatabaseAddFileStatement;
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176)
				{
					return alterDatabaseAddFileStatement;
				}
				switch (num2)
				{
				case 180:
				case 181:
					return alterDatabaseAddFileStatement;
				default:
					if (num2 == 191)
					{
						return alterDatabaseAddFileStatement;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					return alterDatabaseAddFileStatement;
				}
				switch (num2)
				{
				case 219:
				case 220:
					return alterDatabaseAddFileStatement;
				default:
					if (num2 == 232)
					{
						return alterDatabaseAddFileStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001539 RID: 5433 RVA: 0x00086214 File Offset: 0x00084414
		public AlterDatabaseAddFileGroupStatement alterDbAddFilegroup()
		{
			AlterDatabaseAddFileGroupStatement alterDatabaseAddFileGroupStatement = base.FragmentFactory.CreateFragment<AlterDatabaseAddFileGroupStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier fileGroup = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILEGROUP");
				alterDatabaseAddFileGroupStatement.FileGroup = fileGroup;
			}
			return alterDatabaseAddFileGroupStatement;
		}

		// Token: 0x0600153A RID: 5434 RVA: 0x0008626C File Offset: 0x0008446C
		public void fileDeclBodyList(TSqlFragment vParent, IList<FileDeclaration> fileDeclarations)
		{
			FileDeclaration item = this.fileDeclBody(false);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclaration>(vParent, fileDeclarations, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.fileDeclBody(false);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclaration>(vParent, fileDeclarations, item);
				}
			}
		}

		// Token: 0x0600153B RID: 5435 RVA: 0x000862D0 File Offset: 0x000844D0
		public Identifier toFilegroup()
		{
			this.match(151);
			IToken token = this.LT(1);
			this.match(232);
			Identifier result = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILEGROUP");
			}
			return result;
		}

		// Token: 0x0600153C RID: 5436 RVA: 0x00086320 File Offset: 0x00084520
		public AlterDatabaseModifyFileGroupStatement alterDbModifyFilegroup()
		{
			AlterDatabaseModifyFileGroupStatement alterDatabaseModifyFileGroupStatement = base.FragmentFactory.CreateFragment<AlterDatabaseModifyFileGroupStatement>();
			Identifier fileGroup = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterDatabaseModifyFileGroupStatement.FileGroup = fileGroup;
			}
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Identifier newFileGroupName = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "NAME");
					alterDatabaseModifyFileGroupStatement.NewFileGroupName = newFileGroupName;
					base.ThrowPartialAstIfPhaseOne(alterDatabaseModifyFileGroupStatement);
				}
			}
			else if (this.LA(1) == 47)
			{
				IToken token2 = this.LT(1);
				this.match(47);
				if (this.inputState.guessing == 0)
				{
					alterDatabaseModifyFileGroupStatement.MakeDefault = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseModifyFileGroupStatement, token2);
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_17_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					base.ThrowPartialAstIfPhaseOne(alterDatabaseModifyFileGroupStatement);
					alterDatabaseModifyFileGroupStatement.UpdatabilityOption = ModifyFilegroupOptionsHelper.Instance.ParseOption(token3);
					TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseModifyFileGroupStatement, token3);
				}
				if (this.LA(1) == 171 && (this.LA(2) == 134 || this.LA(2) == 232))
				{
					AlterDatabaseTermination termination = this.xactTermination();
					if (this.inputState.guessing == 0)
					{
						alterDatabaseModifyFileGroupStatement.Termination = termination;
					}
				}
				else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return alterDatabaseModifyFileGroupStatement;
		}

		// Token: 0x0600153D RID: 5437 RVA: 0x00086508 File Offset: 0x00084708
		public AlterDatabaseModifyFileStatement alterDbModifyFile()
		{
			AlterDatabaseModifyFileStatement alterDatabaseModifyFileStatement = base.FragmentFactory.CreateFragment<AlterDatabaseModifyFileStatement>();
			this.match(65);
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterDatabaseModifyFileStatement);
			}
			FileDeclaration fileDeclaration = this.fileDecl(true);
			if (this.inputState.guessing == 0)
			{
				alterDatabaseModifyFileStatement.FileDeclaration = fileDeclaration;
			}
			return alterDatabaseModifyFileStatement;
		}

		// Token: 0x0600153E RID: 5438 RVA: 0x0008655C File Offset: 0x0008475C
		public AlterDatabaseTermination xactTermination()
		{
			AlterDatabaseTermination alterDatabaseTermination = base.FragmentFactory.CreateFragment<AlterDatabaseTermination>();
			IToken token = this.LT(1);
			this.match(171);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token);
			}
			int num = this.LA(1);
			if (num != 134)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NO_WAIT");
					TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token2);
					alterDatabaseTermination.NoWait = true;
				}
			}
			else
			{
				this.match(134);
				if (this.LA(1) == 232 && this.LA(2) == 221)
				{
					IToken token3 = this.LT(1);
					this.match(232);
					Literal rollbackAfter = this.integer();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "AFTER");
						alterDatabaseTermination.RollbackAfter = rollbackAfter;
					}
					if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_17_.member(this.LA(2)))
					{
						IToken token4 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token4, "SECONDS");
							TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token4);
						}
					}
					else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_17_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token5 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token5, "IMMEDIATE");
						TSql80ParserBaseInternal.UpdateTokenInfo(alterDatabaseTermination, token5);
						alterDatabaseTermination.ImmediateRollback = true;
					}
				}
			}
			return alterDatabaseTermination;
		}

		// Token: 0x0600153F RID: 5439 RVA: 0x00086794 File Offset: 0x00084994
		public AlterDatabaseSetStatement dbOptionStateList()
		{
			AlterDatabaseSetStatement alterDatabaseSetStatement = base.FragmentFactory.CreateFragment<AlterDatabaseSetStatement>();
			DatabaseOption item = this.dbOptionStateItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseOption>(alterDatabaseSetStatement, alterDatabaseSetStatement.Options, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.dbOptionStateItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseOption>(alterDatabaseSetStatement, alterDatabaseSetStatement.Options, item);
				}
			}
			return alterDatabaseSetStatement;
		}

		// Token: 0x06001540 RID: 5440 RVA: 0x0008680C File Offset: 0x00084A0C
		public IntegerLiteral integer()
		{
			IntegerLiteral integerLiteral = base.FragmentFactory.CreateFragment<IntegerLiteral>();
			IToken token = this.LT(1);
			this.match(221);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(integerLiteral, token);
				integerLiteral.Value = token.getText();
			}
			return integerLiteral;
		}

		// Token: 0x06001541 RID: 5441 RVA: 0x0008685C File Offset: 0x00084A5C
		public DatabaseOption dbOptionStateItem()
		{
			DatabaseOption result;
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("CURSOR_DEFAULT"))
			{
				result = this.cursorDefaultDbOption();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 72 || this.LA(2) == 232) && base.NextTokenMatches("RECOVERY"))
			{
				result = this.recoveryDbOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("PAGE_VERIFY"))
			{
				result = this.pageVerifyDbOption();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 206 || this.LA(2) == 232) && base.NextTokenMatches("PARTNER"))
			{
				result = this.partnerOption();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 206) && base.NextTokenMatches("WITNESS"))
			{
				result = this.witnessOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("PARAMETERIZATION"))
			{
				result = this.parameterizationOption();
			}
			else if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_42_.member(this.LA(2)))
			{
				result = this.dbSingleIdentOption();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 103 && this.LA(2) != 105))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.alterDbOnOffOption();
			}
			return result;
		}

		// Token: 0x06001542 RID: 5442 RVA: 0x00086A40 File Offset: 0x00084C40
		public CursorDefaultDatabaseOption cursorDefaultDbOption()
		{
			CursorDefaultDatabaseOption cursorDefaultDatabaseOption = base.FragmentFactory.CreateFragment<CursorDefaultDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CURSOR_DEFAULT");
				cursorDefaultDatabaseOption.OptionKind = DatabaseOptionKind.CursorDefault;
				if (TSql80ParserBaseInternal.TryMatch(token2, "LOCAL"))
				{
					cursorDefaultDatabaseOption.IsLocal = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "GLOBAL");
					cursorDefaultDatabaseOption.IsLocal = false;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(cursorDefaultDatabaseOption, token2);
			}
			return cursorDefaultDatabaseOption;
		}

		// Token: 0x06001543 RID: 5443 RVA: 0x00086AD4 File Offset: 0x00084CD4
		public RecoveryDatabaseOption recoveryDbOption()
		{
			RecoveryDatabaseOption recoveryDatabaseOption = base.FragmentFactory.CreateFragment<RecoveryDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RECOVERY");
				recoveryDatabaseOption.OptionKind = DatabaseOptionKind.Recovery;
			}
			int num = this.LA(1);
			if (num != 72)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					recoveryDatabaseOption.Value = RecoveryDbOptionsHelper.Instance.ParseOption(token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(recoveryDatabaseOption, token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(72);
				if (this.inputState.guessing == 0)
				{
					recoveryDatabaseOption.Value = RecoveryDatabaseOptionKind.Full;
					TSql80ParserBaseInternal.UpdateTokenInfo(recoveryDatabaseOption, token3);
				}
			}
			return recoveryDatabaseOption;
		}

		// Token: 0x06001544 RID: 5444 RVA: 0x00086BBC File Offset: 0x00084DBC
		public PageVerifyDatabaseOption pageVerifyDbOption()
		{
			PageVerifyDatabaseOption pageVerifyDatabaseOption = base.FragmentFactory.CreateFragment<PageVerifyDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PAGE_VERIFY");
				pageVerifyDatabaseOption.OptionKind = DatabaseOptionKind.PageVerify;
				pageVerifyDatabaseOption.Value = PageVerifyDbOptionsHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(pageVerifyDatabaseOption, token2);
			}
			return pageVerifyDatabaseOption;
		}

		// Token: 0x06001545 RID: 5445 RVA: 0x00086C38 File Offset: 0x00084E38
		public PartnerDatabaseOption partnerOption()
		{
			PartnerDatabaseOption partnerDatabaseOption = base.FragmentFactory.CreateFragment<PartnerDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTNER");
				partnerDatabaseOption.OptionKind = DatabaseOptionKind.Partner;
			}
			int num = this.LA(1);
			if (num != 103)
			{
				if (num != 206)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (this.LA(1) == 232 && this.LA(2) == 221 && base.NextTokenMatches("TIMEOUT"))
					{
						IToken token2 = this.LT(1);
						this.match(232);
						Literal timeout = this.integer();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "TIMEOUT");
							partnerDatabaseOption.Timeout = timeout;
							partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.Timeout;
						}
					}
					else if (this.LA(1) == 232 && (this.LA(2) == 72 || this.LA(2) == 103) && base.NextTokenMatches("SAFETY"))
					{
						IToken token3 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token3, "SAFETY");
						}
						int num2 = this.LA(1);
						if (num2 != 72)
						{
							if (num2 != 103)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							IToken token4 = this.LT(1);
							this.match(103);
							if (this.inputState.guessing == 0)
							{
								partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.SafetyOff;
								TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token4);
							}
						}
						else
						{
							IToken token5 = this.LT(1);
							this.match(72);
							if (this.inputState.guessing == 0)
							{
								partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.SafetyFull;
								TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token5);
							}
						}
					}
					else
					{
						if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_42_.member(this.LA(2)))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token6 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							partnerDatabaseOption.PartnerOption = PartnerDbOptionsHelper.Instance.ParseOption(token6);
							TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token6);
						}
					}
				}
				else
				{
					this.match(206);
					Literal partnerServer = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						partnerDatabaseOption.PartnerServer = partnerServer;
						partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.PartnerServer;
					}
				}
			}
			else
			{
				IToken token7 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					partnerDatabaseOption.PartnerOption = PartnerDatabaseOptionKind.Off;
					TSql80ParserBaseInternal.UpdateTokenInfo(partnerDatabaseOption, token7);
				}
			}
			return partnerDatabaseOption;
		}

		// Token: 0x06001546 RID: 5446 RVA: 0x00086F18 File Offset: 0x00085118
		public WitnessDatabaseOption witnessOption()
		{
			WitnessDatabaseOption witnessDatabaseOption = base.FragmentFactory.CreateFragment<WitnessDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "WITNESS");
				witnessDatabaseOption.OptionKind = DatabaseOptionKind.Witness;
			}
			int num = this.LA(1);
			if (num != 103)
			{
				if (num != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(206);
				Literal witnessServer = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					witnessDatabaseOption.WitnessServer = witnessServer;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					witnessDatabaseOption.IsOff = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(witnessDatabaseOption, token2);
				}
			}
			return witnessDatabaseOption;
		}

		// Token: 0x06001547 RID: 5447 RVA: 0x00086FEC File Offset: 0x000851EC
		public ParameterizationDatabaseOption parameterizationOption()
		{
			ParameterizationDatabaseOption parameterizationDatabaseOption = base.FragmentFactory.CreateFragment<ParameterizationDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARAMETERIZATION");
				parameterizationDatabaseOption.OptionKind = DatabaseOptionKind.Parameterization;
				if (TSql80ParserBaseInternal.TryMatch(token2, "SIMPLE"))
				{
					parameterizationDatabaseOption.IsSimple = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "FORCED");
					parameterizationDatabaseOption.IsSimple = false;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(parameterizationDatabaseOption, token2);
			}
			return parameterizationDatabaseOption;
		}

		// Token: 0x06001548 RID: 5448 RVA: 0x00087080 File Offset: 0x00085280
		public DatabaseOption dbSingleIdentOption()
		{
			DatabaseOption databaseOption = base.FragmentFactory.CreateFragment<DatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				databaseOption.OptionKind = SimpleDbOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
				TSql80ParserBaseInternal.UpdateTokenInfo(databaseOption, token);
			}
			return databaseOption;
		}

		// Token: 0x06001549 RID: 5449 RVA: 0x000870D8 File Offset: 0x000852D8
		public OnOffDatabaseOption alterDbOnOffOption()
		{
			OnOffDatabaseOption onOffDatabaseOption = base.FragmentFactory.CreateFragment<OnOffDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			OptionState optionState = this.optionOnOff(onOffDatabaseOption);
			if (this.inputState.guessing == 0)
			{
				onOffDatabaseOption.OptionKind = OnOffSimpleDbOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
				onOffDatabaseOption.OptionState = optionState;
			}
			return onOffDatabaseOption;
		}

		// Token: 0x0600154A RID: 5450 RVA: 0x00087138 File Offset: 0x00085338
		public void recoveryUnitList(CreateDatabaseStatement vParent)
		{
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_29C;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_29C;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_29C;
						case 10:
						case 11:
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
							case 26:
							case 28:
								goto IL_29C;
							case 24:
							case 25:
							case 27:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									goto IL_29C;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_29C;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num == 67)
						{
							goto IL_29C;
						}
						switch (num)
						{
						case 74:
						case 75:
							goto IL_29C;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_29C;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						goto IL_29C;
					}
					switch (num)
					{
					case 105:
						this.onDisk(vParent);
						goto IL_29C;
					case 106:
						goto IL_29C;
					default:
						if (num == 119)
						{
							goto IL_29C;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_29C;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_29C;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_29C;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_29C;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_29C;
				default:
					if (num == 191)
					{
						goto IL_29C;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_29C;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_29C;
				default:
					if (num == 232)
					{
						goto IL_29C;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_29C:
			if (this.LA(1) == 232 && this.LA(2) == 105 && base.NextTokenMatches("LOG"))
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(105);
				this.fileDeclBodyList(vParent, vParent.LogOn);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOG");
					return;
				}
				return;
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_43_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x0600154B RID: 5451 RVA: 0x00087482 File Offset: 0x00085682
		public void collationOpt(ICollationSetter vParent)
		{
			if (TSql90ParserInternal.tokenSet_44_.member(this.LA(1)))
			{
				return;
			}
			if (this.LA(1) == 26)
			{
				this.collation(vParent);
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600154C RID: 5452 RVA: 0x000874C0 File Offset: 0x000856C0
		public void dbAddendums(CreateDatabaseStatement vParent)
		{
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 67)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(67);
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					vParent.AttachMode = AttachModeHelper.Instance.ParseOption(token);
					if (vParent.AttachMode == AttachMode.Load)
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token);
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				}
				if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_17_.member(this.LA(2)))
				{
					this.match(232);
					return;
				}
				if (TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			else
			{
				this.match(9);
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(102);
				Identifier databaseSnapshot = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "SNAPSHOT");
					vParent.DatabaseSnapshot = databaseSnapshot;
					return;
				}
				return;
			}
		}

		// Token: 0x0600154D RID: 5453 RVA: 0x000875FC File Offset: 0x000857FC
		public void withTrustOptionsOnOff(CreateDatabaseStatement vParent)
		{
			int num = 0;
			this.match(171);
			DatabaseOption databaseOption = this.createDbOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)databaseOption.OptionKind, databaseOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseOption>(vParent, vParent.Options, databaseOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				databaseOption = this.createDbOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)databaseOption.OptionKind, databaseOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DatabaseOption>(vParent, vParent.Options, databaseOption);
				}
			}
		}

		// Token: 0x0600154E RID: 5454 RVA: 0x00087690 File Offset: 0x00085890
		public void onDisk(CreateDatabaseStatement vParent)
		{
			FileGroupDefinition fileGroupDefinition = base.FragmentFactory.CreateFragment<FileGroupDefinition>();
			vParent.FileGroups.Add(fileGroupDefinition);
			this.match(105);
			FileDeclaration fileDeclaration = this.fileDecl(false);
			if (this.inputState.guessing == 0)
			{
				fileGroupDefinition.FileDeclarations.Add(fileDeclaration);
				vParent.UpdateTokenInfo(fileDeclaration);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				int num = this.LA(1);
				if (num != 118 && num != 191)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					FileGroupDefinition fileGroupDefinition2 = this.fileGroupDecl();
					if (this.inputState.guessing == 0)
					{
						fileGroupDefinition = fileGroupDefinition2;
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileGroupDefinition>(vParent, vParent.FileGroups, fileGroupDefinition);
					}
				}
				else
				{
					fileDeclaration = this.fileDecl(false);
					if (this.inputState.guessing == 0)
					{
						fileGroupDefinition.FileDeclarations.Add(fileDeclaration);
						vParent.UpdateTokenInfo(fileDeclaration);
					}
				}
			}
		}

		// Token: 0x0600154F RID: 5455 RVA: 0x00087788 File Offset: 0x00085988
		public FileGroupDefinition fileGroupDecl()
		{
			FileGroupDefinition fileGroupDefinition = base.FragmentFactory.CreateFragment<FileGroupDefinition>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILEGROUP");
				TSql80ParserBaseInternal.UpdateTokenInfo(fileGroupDefinition, token);
				fileGroupDefinition.Name = name;
			}
			int num = this.LA(1);
			if (num != 47)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(47);
				if (this.inputState.guessing == 0)
				{
					fileGroupDefinition.IsDefault = true;
				}
			}
			FileDeclaration item = this.fileDeclBody(false);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclaration>(fileGroupDefinition, fileGroupDefinition.FileDeclarations, item);
			}
			return fileGroupDefinition;
		}

		// Token: 0x06001550 RID: 5456 RVA: 0x00087854 File Offset: 0x00085A54
		public FileDeclaration fileDeclBody(bool isAlterDbModifyFileStatement)
		{
			FileDeclaration fileDeclaration = base.FragmentFactory.CreateFragment<FileDeclaration>();
			int num = 0;
			IToken token = this.LT(1);
			this.match(191);
			FileDeclarationOption fileDeclarationOption = this.fileOption(isAlterDbModifyFileStatement);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclaration, token);
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)fileDeclarationOption.OptionKind, fileDeclarationOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclarationOption>(fileDeclaration, fileDeclaration.Options, fileDeclarationOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				fileDeclarationOption = this.fileOption(isAlterDbModifyFileStatement);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)fileDeclarationOption.OptionKind, fileDeclarationOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FileDeclarationOption>(fileDeclaration, fileDeclaration.Options, fileDeclarationOption);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclaration, token2);
				if (!isAlterDbModifyFileStatement && (num & 8) == 0)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46065", fileDeclaration, TSqlParserResource.SQL46065Message, new string[0]);
				}
			}
			return fileDeclaration;
		}

		// Token: 0x06001551 RID: 5457 RVA: 0x00087950 File Offset: 0x00085B50
		public FileDeclarationOption fileOption(bool newNameAllowed)
		{
			FileDeclarationOption fileDeclarationOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NAME"))
			{
				fileDeclarationOption = this.nameFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILENAME"))
			{
				fileDeclarationOption = this.fileNameFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SIZE"))
			{
				fileDeclarationOption = this.sizeFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXSIZE"))
			{
				fileDeclarationOption = this.maxSizeFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("FILEGROWTH"))
			{
				fileDeclarationOption = this.fileGrowthFileOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NEWNAME"))
			{
				fileDeclarationOption = this.newNameFileOption();
				if (this.inputState.guessing == 0 && !newNameAllowed)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46062", fileDeclarationOption, TSqlParserResource.SQL46062Message, new string[0]);
				}
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 192 && this.LA(2) != 198) || !base.NextTokenMatches("OFFLINE"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				fileDeclarationOption = this.offlineFileOption();
			}
			return fileDeclarationOption;
		}

		// Token: 0x06001552 RID: 5458 RVA: 0x00087B14 File Offset: 0x00085D14
		public NameFileDeclarationOption nameFileOption()
		{
			NameFileDeclarationOption nameFileDeclarationOption = base.FragmentFactory.CreateFragment<NameFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IdentifierOrValueExpression logicalFileName = this.nonEmptyStringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				nameFileDeclarationOption.OptionKind = FileDeclarationOptionKind.Name;
				TSql80ParserBaseInternal.Match(token, "NAME");
				TSql80ParserBaseInternal.UpdateTokenInfo(nameFileDeclarationOption, token);
				nameFileDeclarationOption.LogicalFileName = logicalFileName;
				nameFileDeclarationOption.IsNewName = false;
			}
			return nameFileDeclarationOption;
		}

		// Token: 0x06001553 RID: 5459 RVA: 0x00087B8C File Offset: 0x00085D8C
		public FileNameFileDeclarationOption fileNameFileOption()
		{
			FileNameFileDeclarationOption fileNameFileDeclarationOption = base.FragmentFactory.CreateFragment<FileNameFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal osfileName = this.nonEmptyString();
			if (this.inputState.guessing == 0)
			{
				fileNameFileDeclarationOption.OptionKind = FileDeclarationOptionKind.FileName;
				TSql80ParserBaseInternal.Match(token, "FILENAME");
				TSql80ParserBaseInternal.UpdateTokenInfo(fileNameFileDeclarationOption, token);
				fileNameFileDeclarationOption.OSFileName = osfileName;
			}
			return fileNameFileDeclarationOption;
		}

		// Token: 0x06001554 RID: 5460 RVA: 0x00087BFC File Offset: 0x00085DFC
		public SizeFileDeclarationOption sizeFileOption()
		{
			SizeFileDeclarationOption sizeFileDeclarationOption = base.FragmentFactory.CreateFragment<SizeFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal size = this.integer();
			if (this.inputState.guessing == 0)
			{
				sizeFileDeclarationOption.OptionKind = FileDeclarationOptionKind.Size;
				TSql80ParserBaseInternal.Match(token, "SIZE");
				TSql80ParserBaseInternal.UpdateTokenInfo(sizeFileDeclarationOption, token);
				sizeFileDeclarationOption.Size = size;
			}
			int num = this.LA(1);
			if (num != 192 && num != 198)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				MemoryUnit units = this.memUnit();
				if (this.inputState.guessing == 0)
				{
					sizeFileDeclarationOption.Units = units;
				}
			}
			return sizeFileDeclarationOption;
		}

		// Token: 0x06001555 RID: 5461 RVA: 0x00087CC0 File Offset: 0x00085EC0
		public MaxSizeFileDeclarationOption maxSizeFileOption()
		{
			MaxSizeFileDeclarationOption maxSizeFileDeclarationOption = base.FragmentFactory.CreateFragment<MaxSizeFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MAXSIZE");
				maxSizeFileDeclarationOption.OptionKind = FileDeclarationOptionKind.MaxSize;
				TSql80ParserBaseInternal.UpdateTokenInfo(maxSizeFileDeclarationOption, token);
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "UNLIMITED");
					maxSizeFileDeclarationOption.Unlimited = true;
				}
			}
			else
			{
				Literal maxSize = this.integer();
				if (this.inputState.guessing == 0)
				{
					maxSizeFileDeclarationOption.MaxSize = maxSize;
				}
				int num2 = this.LA(1);
				if (num2 != 192 && num2 != 198)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					MemoryUnit units = this.memUnit();
					if (this.inputState.guessing == 0)
					{
						maxSizeFileDeclarationOption.Units = units;
					}
				}
			}
			return maxSizeFileDeclarationOption;
		}

		// Token: 0x06001556 RID: 5462 RVA: 0x00087E00 File Offset: 0x00086000
		public FileGrowthFileDeclarationOption fileGrowthFileOption()
		{
			FileGrowthFileDeclarationOption fileGrowthFileDeclarationOption = base.FragmentFactory.CreateFragment<FileGrowthFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FILEGROWTH");
				fileGrowthFileDeclarationOption.OptionKind = FileDeclarationOptionKind.FileGrowth;
				TSql80ParserBaseInternal.UpdateTokenInfo(fileGrowthFileDeclarationOption, token);
			}
			Literal growthIncrement = this.integer();
			if (this.inputState.guessing == 0)
			{
				fileGrowthFileDeclarationOption.GrowthIncrement = growthIncrement;
			}
			int num = this.LA(1);
			if (num <= 192)
			{
				if (num != 189)
				{
					if (num == 192)
					{
						return fileGrowthFileDeclarationOption;
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(189);
					if (this.inputState.guessing == 0)
					{
						fileGrowthFileDeclarationOption.Units = MemoryUnit.Percent;
						TSql80ParserBaseInternal.UpdateTokenInfo(fileGrowthFileDeclarationOption, token2);
						return fileGrowthFileDeclarationOption;
					}
					return fileGrowthFileDeclarationOption;
				}
			}
			else
			{
				if (num == 198)
				{
					return fileGrowthFileDeclarationOption;
				}
				if (num == 232)
				{
					MemoryUnit units = this.memUnit();
					if (this.inputState.guessing == 0)
					{
						fileGrowthFileDeclarationOption.Units = units;
						return fileGrowthFileDeclarationOption;
					}
					return fileGrowthFileDeclarationOption;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001557 RID: 5463 RVA: 0x00087F18 File Offset: 0x00086118
		public NameFileDeclarationOption newNameFileOption()
		{
			NameFileDeclarationOption nameFileDeclarationOption = base.FragmentFactory.CreateFragment<NameFileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IdentifierOrValueExpression logicalFileName = this.nonEmptyStringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NEWNAME");
				nameFileDeclarationOption.OptionKind = FileDeclarationOptionKind.NewName;
				TSql80ParserBaseInternal.UpdateTokenInfo(nameFileDeclarationOption, token);
				nameFileDeclarationOption.LogicalFileName = logicalFileName;
				nameFileDeclarationOption.IsNewName = true;
			}
			return nameFileDeclarationOption;
		}

		// Token: 0x06001558 RID: 5464 RVA: 0x00087F90 File Offset: 0x00086190
		public FileDeclarationOption offlineFileOption()
		{
			FileDeclarationOption fileDeclarationOption = base.FragmentFactory.CreateFragment<FileDeclarationOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "OFFLINE");
				fileDeclarationOption.OptionKind = FileDeclarationOptionKind.Offline;
				TSql80ParserBaseInternal.UpdateTokenInfo(fileDeclarationOption, token);
			}
			return fileDeclarationOption;
		}

		// Token: 0x06001559 RID: 5465 RVA: 0x00087FE8 File Offset: 0x000861E8
		public IdentifierOrValueExpression nonEmptyStringOrIdentifier()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal valueExpression = this.nonEmptyString();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.ValueExpression = valueExpression;
				}
				break;
			}
			case 232:
			case 233:
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.Identifier = identifier;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifierOrValueExpression;
		}

		// Token: 0x0600155A RID: 5466 RVA: 0x00088078 File Offset: 0x00086278
		public StringLiteral nonEmptyString()
		{
			StringLiteral stringLiteral = this.stringLiteral();
			if (this.inputState.guessing == 0 && (stringLiteral.Value == null || stringLiteral.Value.Length == 0))
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46063", stringLiteral, TSqlParserResource.SQL46063Message, new string[0]);
			}
			return stringLiteral;
		}

		// Token: 0x0600155B RID: 5467 RVA: 0x000880C8 File Offset: 0x000862C8
		public MemoryUnit memUnit()
		{
			MemoryUnit result = MemoryUnit.Unspecified;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				result = MemoryUnitsHelper.Instance.ParseOption(token);
			}
			return result;
		}

		// Token: 0x0600155C RID: 5468 RVA: 0x00088108 File Offset: 0x00086308
		public DatabaseOption createDbOption()
		{
			DatabaseOption result;
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_42_.member(this.LA(2)))
			{
				result = this.createDbServiceBrokerOption();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 103 && this.LA(2) != 105))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.createDbOnOffOption();
			}
			return result;
		}

		// Token: 0x0600155D RID: 5469 RVA: 0x00088180 File Offset: 0x00086380
		public DatabaseOption createDbServiceBrokerOption()
		{
			DatabaseOption databaseOption = base.FragmentFactory.CreateFragment<DatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				switch (ServiceBrokerOptionsHelper.Instance.ParseOption(token))
				{
				case ServiceBrokerOption.EnableBroker:
					databaseOption.OptionKind = DatabaseOptionKind.EnableBroker;
					break;
				case ServiceBrokerOption.NewBroker:
					databaseOption.OptionKind = DatabaseOptionKind.NewBroker;
					break;
				case ServiceBrokerOption.ErrorBrokerConversations:
					databaseOption.OptionKind = DatabaseOptionKind.ErrorBrokerConversations;
					break;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(databaseOption, token);
			}
			return databaseOption;
		}

		// Token: 0x0600155E RID: 5470 RVA: 0x00088204 File Offset: 0x00086404
		public OnOffDatabaseOption createDbOnOffOption()
		{
			OnOffDatabaseOption onOffDatabaseOption = base.FragmentFactory.CreateFragment<OnOffDatabaseOption>();
			IToken token = this.LT(1);
			this.match(232);
			OptionState optionState = this.optionOnOff(onOffDatabaseOption);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "DB_CHAINING"))
				{
					onOffDatabaseOption.OptionKind = DatabaseOptionKind.DBChaining;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "TRUSTWORTHY");
					onOffDatabaseOption.OptionKind = DatabaseOptionKind.Trustworthy;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(onOffDatabaseOption, token);
				onOffDatabaseOption.OptionState = optionState;
			}
			return onOffDatabaseOption;
		}

		// Token: 0x0600155F RID: 5471 RVA: 0x00088280 File Offset: 0x00086480
		public IToken backupStart()
		{
			IToken result = null;
			int num = this.LA(1);
			if (num != 12)
			{
				if (num != 180)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(180);
				if (this.inputState.guessing == 0)
				{
					result = token;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(12);
				if (this.inputState.guessing == 0)
				{
					result = token2;
				}
			}
			return result;
		}

		// Token: 0x06001560 RID: 5472 RVA: 0x00088304 File Offset: 0x00086504
		public BackupCertificateStatement backupCertificateStatement()
		{
			BackupCertificateStatement backupCertificateStatement = base.FragmentFactory.CreateFragment<BackupCertificateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			this.match(151);
			this.match(65);
			this.match(206);
			Literal file = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				backupCertificateStatement.Name = name;
				backupCertificateStatement.File = file;
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				this.privateKeySpec(backupCertificateStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return backupCertificateStatement;
		}

		// Token: 0x06001561 RID: 5473 RVA: 0x000883F0 File Offset: 0x000865F0
		public BackupServiceMasterKeyStatement backupServiceMasterKeyStatement()
		{
			BackupServiceMasterKeyStatement backupServiceMasterKeyStatement = base.FragmentFactory.CreateFragment<BackupServiceMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
			}
			this.backupMasterKeyBody(backupServiceMasterKeyStatement);
			return backupServiceMasterKeyStatement;
		}

		// Token: 0x06001562 RID: 5474 RVA: 0x00088440 File Offset: 0x00086640
		public BackupMasterKeyStatement backupMasterKeyStatement()
		{
			BackupMasterKeyStatement backupMasterKeyStatement = base.FragmentFactory.CreateFragment<BackupMasterKeyStatement>();
			this.backupMasterKeyBody(backupMasterKeyStatement);
			return backupMasterKeyStatement;
		}

		// Token: 0x06001563 RID: 5475 RVA: 0x00088464 File Offset: 0x00086664
		public BackupStatement backupStatement()
		{
			BackupStatement backupStatement = this.backupMain();
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_284;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_284;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_284;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_284;
						default:
							if (num == 28)
							{
								goto IL_284;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_284;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_284;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_284;
						default:
							if (num == 82)
							{
								goto IL_284;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					goto IL_284;
				}
			}
			else if (num <= 172)
			{
				if (num <= 144)
				{
					if (num == 106 || num == 119)
					{
						goto IL_284;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_284;
					}
				}
				else
				{
					if (num == 151)
					{
						this.backupDevices(backupStatement);
						goto IL_284;
					}
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						goto IL_284;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_284;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_284;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_284;
				default:
					if (num == 191)
					{
						goto IL_284;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_284;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_284;
				default:
					if (num == 232)
					{
						goto IL_284;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_284:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.backupOptions(backupStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return backupStatement;
		}

		// Token: 0x06001564 RID: 5476 RVA: 0x00088754 File Offset: 0x00086954
		public BackupStatement backupMain()
		{
			int num = this.LA(1);
			BackupStatement result;
			if (num != 43)
			{
				switch (num)
				{
				case 153:
				case 154:
					break;
				default:
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					break;
				}
				result = this.backupTransactionLog();
			}
			else
			{
				result = this.backupDatabase();
			}
			return result;
		}

		// Token: 0x06001565 RID: 5477 RVA: 0x000887B4 File Offset: 0x000869B4
		public void backupDevices(BackupStatement vParent)
		{
			this.match(151);
			this.devList(vParent, vParent.Devices);
			while (this.LA(1) == 232 && this.LA(2) == 151)
			{
				MirrorToClause item = this.mirrorTo();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<MirrorToClause>(vParent, vParent.MirrorToClauses, item);
				}
			}
		}

		// Token: 0x06001566 RID: 5478 RVA: 0x00088818 File Offset: 0x00086A18
		public void backupOptions(BackupStatement vParent)
		{
			this.match(171);
			BackupOption item = this.backupOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupOption>(vParent, vParent.Options, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.backupOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupOption>(vParent, vParent.Options, item);
				}
			}
		}

		// Token: 0x06001567 RID: 5479 RVA: 0x00088890 File Offset: 0x00086A90
		public IToken restoreStart()
		{
			IToken result = null;
			int num = this.LA(1);
			if (num != 129)
			{
				if (num != 181)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(181);
				if (this.inputState.guessing == 0)
				{
					result = token;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(129);
				if (this.inputState.guessing == 0)
				{
					result = token2;
				}
			}
			return result;
		}

		// Token: 0x06001568 RID: 5480 RVA: 0x0008891C File Offset: 0x00086B1C
		public RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement()
		{
			RestoreServiceMasterKeyStatement restoreServiceMasterKeyStatement = base.FragmentFactory.CreateFragment<RestoreServiceMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
			}
			this.restoreMasterKeyBody(restoreServiceMasterKeyStatement);
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_17_.member(this.LA(2)))
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "FORCE");
					restoreServiceMasterKeyStatement.IsForce = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(restoreServiceMasterKeyStatement, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return restoreServiceMasterKeyStatement;
		}

		// Token: 0x06001569 RID: 5481 RVA: 0x00088A04 File Offset: 0x00086C04
		public RestoreMasterKeyStatement restoreMasterKeyStatement()
		{
			RestoreMasterKeyStatement restoreMasterKeyStatement = base.FragmentFactory.CreateFragment<RestoreMasterKeyStatement>();
			this.restoreMasterKeyBody(restoreMasterKeyStatement);
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(206);
			Literal encryptionPassword = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
				TSql80ParserBaseInternal.Match(token2, "PASSWORD");
				restoreMasterKeyStatement.EncryptionPassword = encryptionPassword;
			}
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_17_.member(this.LA(2)))
			{
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "FORCE");
					restoreMasterKeyStatement.IsForce = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(restoreMasterKeyStatement, token3);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return restoreMasterKeyStatement;
		}

		// Token: 0x0600156A RID: 5482 RVA: 0x00088B2C File Offset: 0x00086D2C
		public RestoreStatement restoreStatement()
		{
			RestoreStatement restoreStatement = base.FragmentFactory.CreateFragment<RestoreStatement>();
			if (TSql90ParserInternal.tokenSet_25_.member(this.LA(1)) && this.LA(2) >= 232 && this.LA(2) <= 234)
			{
				this.restoreMain(restoreStatement);
				int num = this.LA(1);
				if (num <= 92)
				{
					if (num <= 28)
					{
						if (num <= 6)
						{
							if (num == 1)
							{
								goto IL_35B;
							}
							switch (num)
							{
							case 4:
							case 6:
								goto IL_35B;
							}
						}
						else
						{
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_35B;
							case 14:
							case 16:
								break;
							default:
								switch (num)
								{
								case 22:
								case 23:
									goto IL_35B;
								default:
									if (num == 28)
									{
										goto IL_35B;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num <= 75)
					{
						switch (num)
						{
						case 33:
						case 35:
							goto IL_35B;
						case 34:
							break;
						default:
							switch (num)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								goto IL_35B;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
								break;
							default:
								switch (num)
								{
								case 71:
									this.match(71);
									this.devList(restoreStatement, restoreStatement.Devices);
									goto IL_35B;
								case 74:
								case 75:
									goto IL_35B;
								}
								break;
							}
							break;
						}
					}
					else if (num == 82 || num == 86 || num == 92)
					{
						goto IL_35B;
					}
				}
				else if (num <= 172)
				{
					if (num <= 119)
					{
						if (num == 95 || num == 106 || num == 119)
						{
							goto IL_35B;
						}
					}
					else
					{
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_35B;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								goto IL_35B;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									goto IL_35B;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 191)
				{
					if (num == 176)
					{
						goto IL_35B;
					}
					switch (num)
					{
					case 180:
					case 181:
						goto IL_35B;
					default:
						if (num == 191)
						{
							goto IL_35B;
						}
						break;
					}
				}
				else
				{
					if (num == 204)
					{
						goto IL_35B;
					}
					switch (num)
					{
					case 219:
					case 220:
						goto IL_35B;
					default:
						if (num == 232)
						{
							goto IL_35B;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) != 232 || this.LA(2) != 71)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token = this.LT(1);
			this.match(232);
			this.match(71);
			this.devList(restoreStatement, restoreStatement.Devices);
			if (this.inputState.guessing == 0)
			{
				restoreStatement.Kind = RestoreStatementKindsHelper.Instance.ParseOption(token);
			}
			IL_35B:
			if (this.LA(1) == 171 && (this.LA(2) == 65 || this.LA(2) == 232))
			{
				this.restoreOptions(restoreStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return restoreStatement;
		}

		// Token: 0x0600156B RID: 5483 RVA: 0x00088F00 File Offset: 0x00087100
		public void restoreMain(RestoreStatement vParent)
		{
			int num = this.LA(1);
			if (num == 43)
			{
				this.match(43);
				IdentifierOrValueExpression databaseName = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					vParent.DatabaseName = databaseName;
					vParent.Kind = RestoreStatementKind.Database;
					base.ThrowPartialAstIfPhaseOne(vParent);
				}
				this.restoreFileListOpt(vParent);
				return;
			}
			switch (num)
			{
			case 153:
			case 154:
			{
				switch (this.LA(1))
				{
				case 153:
					this.match(153);
					break;
				case 154:
					this.match(154);
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IdentifierOrValueExpression databaseName = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					vParent.DatabaseName = databaseName;
					vParent.Kind = RestoreStatementKind.TransactionLog;
					base.ThrowPartialAstIfPhaseOne(vParent);
					return;
				}
				return;
			}
			default:
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				IdentifierOrValueExpression databaseName = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOG");
					vParent.DatabaseName = databaseName;
					vParent.Kind = RestoreStatementKind.TransactionLog;
					base.ThrowPartialAstIfPhaseOne(vParent);
				}
				this.restoreFileListOpt(vParent);
				return;
			}
			}
		}

		// Token: 0x0600156C RID: 5484 RVA: 0x00089050 File Offset: 0x00087250
		public void devList(TSqlFragment vParent, IList<DeviceInfo> deviceInfos)
		{
			DeviceInfo item = this.deviceInfo();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DeviceInfo>(vParent, deviceInfos, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.deviceInfo();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DeviceInfo>(vParent, deviceInfos, item);
				}
			}
		}

		// Token: 0x0600156D RID: 5485 RVA: 0x000890B0 File Offset: 0x000872B0
		public void restoreOptions(RestoreStatement vParent)
		{
			this.match(171);
			this.restoreOptionsList(vParent);
		}

		// Token: 0x0600156E RID: 5486 RVA: 0x000890C4 File Offset: 0x000872C4
		public BackupDatabaseStatement backupDatabase()
		{
			BackupDatabaseStatement backupDatabaseStatement = base.FragmentFactory.CreateFragment<BackupDatabaseStatement>();
			this.match(43);
			IdentifierOrValueExpression databaseName = this.identifierOrVariable();
			if (this.inputState.guessing == 0)
			{
				backupDatabaseStatement.DatabaseName = databaseName;
				base.ThrowPartialAstIfPhaseOne(backupDatabaseStatement);
			}
			this.backupFileListOpt(backupDatabaseStatement);
			return backupDatabaseStatement;
		}

		// Token: 0x0600156F RID: 5487 RVA: 0x00089110 File Offset: 0x00087310
		public BackupTransactionLogStatement backupTransactionLog()
		{
			BackupTransactionLogStatement backupTransactionLogStatement = base.FragmentFactory.CreateFragment<BackupTransactionLogStatement>();
			int num = this.LA(1);
			switch (num)
			{
			case 153:
				this.match(153);
				break;
			case 154:
				this.match(154);
				break;
			default:
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOG");
				}
				break;
			}
			}
			IdentifierOrValueExpression databaseName = this.identifierOrVariable();
			if (this.inputState.guessing == 0)
			{
				backupTransactionLogStatement.DatabaseName = databaseName;
				base.ThrowPartialAstIfPhaseOne(backupTransactionLogStatement);
			}
			return backupTransactionLogStatement;
		}

		// Token: 0x06001570 RID: 5488 RVA: 0x000891D0 File Offset: 0x000873D0
		public IdentifierOrValueExpression identifierOrVariable()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			switch (this.LA(1))
			{
			case 232:
			case 233:
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.Identifier = identifier;
				}
				break;
			}
			case 234:
			{
				ValueExpression valueExpression = this.variable();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.ValueExpression = valueExpression;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifierOrValueExpression;
		}

		// Token: 0x06001571 RID: 5489 RVA: 0x0008925C File Offset: 0x0008745C
		public void backupFileListOpt(BackupDatabaseStatement vParent)
		{
			if ((this.LA(1) == 65 || this.LA(1) == 232) && TSql90ParserInternal.tokenSet_45_.member(this.LA(2)))
			{
				BackupRestoreFileInfo item = this.backupRestoreFile();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupRestoreFileInfo>(vParent, vParent.Files, item);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					item = this.backupRestoreFile();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupRestoreFileInfo>(vParent, vParent.Files, item);
					}
				}
				return;
			}
			if (TSql90ParserInternal.tokenSet_46_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001572 RID: 5490 RVA: 0x0008932C File Offset: 0x0008752C
		public BackupRestoreFileInfo backupRestoreFile()
		{
			BackupRestoreFileInfo backupRestoreFileInfo = base.FragmentFactory.CreateFragment<BackupRestoreFileInfo>();
			if (this.LA(1) == 65)
			{
				this.LT(1);
				this.match(65);
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.Files;
				}
				int num = this.LA(1);
				if (num != 191)
				{
					switch (num)
					{
					case 230:
					case 231:
					case 234:
					{
						ValueExpression item = this.stringOrVariable();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(backupRestoreFileInfo, backupRestoreFileInfo.Items, item);
							return backupRestoreFileInfo;
						}
						return backupRestoreFileInfo;
					}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.backupRestoreFileNameList(backupRestoreFileInfo);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				int num2 = this.LA(1);
				if (num2 != 191)
				{
					switch (num2)
					{
					case 230:
					case 231:
					case 234:
					{
						ValueExpression item = this.stringOrVariable();
						if (this.inputState.guessing == 0)
						{
							if (TSql80ParserBaseInternal.TryMatch(token, "PAGE"))
							{
								backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.Page;
							}
							else
							{
								TSql80ParserBaseInternal.Match(token, "FILEGROUP");
								backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.FileGroups;
							}
							TSql80ParserBaseInternal.UpdateTokenInfo(backupRestoreFileInfo, token);
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(backupRestoreFileInfo, backupRestoreFileInfo.Items, item);
							return backupRestoreFileInfo;
						}
						return backupRestoreFileInfo;
					}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.backupRestoreFileNameList(backupRestoreFileInfo);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "FILEGROUP");
					backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.FileGroups;
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_47_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "READ_WRITE_FILEGROUPS");
					backupRestoreFileInfo.ItemKind = BackupRestoreItemKind.ReadWriteFileGroups;
					TSql80ParserBaseInternal.UpdateTokenInfo(backupRestoreFileInfo, token2);
				}
			}
			return backupRestoreFileInfo;
		}

		// Token: 0x06001573 RID: 5491 RVA: 0x00089584 File Offset: 0x00087784
		public void restoreFileListOpt(RestoreStatement vParent)
		{
			if ((this.LA(1) == 65 || this.LA(1) == 232) && TSql90ParserInternal.tokenSet_48_.member(this.LA(2)))
			{
				BackupRestoreFileInfo item = this.backupRestoreFile();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupRestoreFileInfo>(vParent, vParent.Files, item);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					item = this.backupRestoreFile();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BackupRestoreFileInfo>(vParent, vParent.Files, item);
					}
				}
				return;
			}
			if (TSql90ParserInternal.tokenSet_49_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001574 RID: 5492 RVA: 0x00089654 File Offset: 0x00087854
		public ValueExpression stringOrVariable()
		{
			switch (this.LA(1))
			{
			case 230:
			case 231:
				return this.stringLiteral();
			case 234:
				return this.variable();
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001575 RID: 5493 RVA: 0x000896B4 File Offset: 0x000878B4
		public void backupRestoreFileNameList(BackupRestoreFileInfo vParent)
		{
			this.LT(1);
			this.match(191);
			ValueExpression item = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(vParent, vParent.Items, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.stringOrVariable();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(vParent, vParent.Items, item);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06001576 RID: 5494 RVA: 0x0008975C File Offset: 0x0008795C
		public MirrorToClause mirrorTo()
		{
			MirrorToClause mirrorToClause = base.FragmentFactory.CreateFragment<MirrorToClause>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(151);
			this.devList(mirrorToClause, mirrorToClause.Devices);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MIRROR");
			}
			return mirrorToClause;
		}

		// Token: 0x06001577 RID: 5495 RVA: 0x000897BC File Offset: 0x000879BC
		public DeviceInfo deviceInfo()
		{
			DeviceInfo deviceInfo = base.FragmentFactory.CreateFragment<DeviceInfo>();
			if (this.LA(1) >= 232 && this.LA(1) <= 234 && TSql90ParserInternal.tokenSet_42_.member(this.LA(2)))
			{
				IdentifierOrValueExpression logicalDevice = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					deviceInfo.LogicalDevice = logicalDevice;
				}
			}
			else
			{
				if ((this.LA(1) != 173 && this.LA(1) != 232) || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				int num = this.LA(1);
				if (num != 173)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						deviceInfo.DeviceType = DeviceTypesHelper.Instance.ParseOption(token);
					}
				}
				else
				{
					this.match(173);
					if (this.inputState.guessing == 0)
					{
						deviceInfo.DeviceType = DeviceType.Disk;
					}
				}
				this.match(206);
				ValueExpression physicalDevice = this.stringOrVariable();
				if (this.inputState.guessing == 0)
				{
					deviceInfo.PhysicalDevice = physicalDevice;
				}
			}
			return deviceInfo;
		}

		// Token: 0x06001578 RID: 5496 RVA: 0x00089918 File Offset: 0x00087B18
		public BackupOption backupOption()
		{
			BackupOption backupOption = base.FragmentFactory.CreateFragment<BackupOption>();
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_42_.member(this.LA(2)))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					backupOption.OptionKind = BackupOptionsNoValueHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
					TSql80ParserBaseInternal.UpdateTokenInfo(backupOption, token);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(206);
				int num = this.LA(1);
				ScalarExpression value;
				if (num != 199 && num != 221)
				{
					switch (num)
					{
					case 230:
					case 231:
						value = this.stringLiteral();
						goto IL_115;
					case 234:
						goto IL_F0;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IL_F0:
				value = this.signedIntegerOrVariable();
				IL_115:
				if (this.inputState.guessing == 0)
				{
					backupOption.OptionKind = BackupOptionsWithValueHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql90);
					backupOption.Value = value;
				}
			}
			return backupOption;
		}

		// Token: 0x06001579 RID: 5497 RVA: 0x00089A78 File Offset: 0x00087C78
		public ScalarExpression signedIntegerOrVariable()
		{
			int num = this.LA(1);
			ScalarExpression result;
			if (num != 199 && num != 221)
			{
				if (num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.variable();
			}
			else
			{
				result = this.signedInteger();
			}
			return result;
		}

		// Token: 0x0600157A RID: 5498 RVA: 0x00089AD0 File Offset: 0x00087CD0
		public void restoreOptionsList(RestoreStatement vParent)
		{
			RestoreOption item = this.restoreOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RestoreOption>(vParent, vParent.Options, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.restoreOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RestoreOption>(vParent, vParent.Options, item);
				}
			}
		}

		// Token: 0x0600157B RID: 5499 RVA: 0x00089B3C File Offset: 0x00087D3C
		public RestoreOption restoreOption()
		{
			RestoreOption result = null;
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_42_.member(this.LA(2)))
			{
				result = this.simpleRestoreOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				if ((this.LA(1) == 230 || this.LA(1) == 231 || this.LA(1) == 234) && this.LA(2) == 232 && TSql80ParserBaseInternal.IsStopAtBeforeMarkRestoreOption(token))
				{
					ValueExpression valueExpression = this.stringOrVariable();
					ValueExpression afterClause = this.afterClause();
					if (this.inputState.guessing == 0)
					{
						result = base.CreateStopRestoreOption(token, valueExpression, afterClause);
					}
				}
				else if (this.LA(1) == 199 || this.LA(1) == 221)
				{
					ScalarExpression optionValue = this.signedInteger();
					if (this.inputState.guessing == 0)
					{
						result = base.CreateSimpleRestoreOptionWithValue(token, optionValue);
					}
				}
				else
				{
					if ((this.LA(1) != 230 && this.LA(1) != 231 && this.LA(1) != 234) || !TSql90ParserInternal.tokenSet_42_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					ValueExpression valueExpression = this.stringOrVariable();
					if (this.inputState.guessing == 0)
					{
						if (TSql80ParserBaseInternal.IsStopAtBeforeMarkRestoreOption(token))
						{
							result = base.CreateStopRestoreOption(token, valueExpression, null);
						}
						else
						{
							result = base.CreateSimpleRestoreOptionWithValue(token, valueExpression);
						}
					}
				}
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 230 || this.LA(2) == 231 || this.LA(2) == 234))
			{
				result = this.moveRestoreOption();
			}
			else
			{
				if (this.LA(1) != 65)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.fileRestoreOption();
			}
			return result;
		}

		// Token: 0x0600157C RID: 5500 RVA: 0x00089D5C File Offset: 0x00087F5C
		public RestoreOption simpleRestoreOption()
		{
			RestoreOption restoreOption = base.FragmentFactory.CreateFragment<RestoreOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				restoreOption.OptionKind = RestoreOptionNoValueHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
				TSql80ParserBaseInternal.UpdateTokenInfo(restoreOption, token);
			}
			return restoreOption;
		}

		// Token: 0x0600157D RID: 5501 RVA: 0x00089DB4 File Offset: 0x00087FB4
		public ValueExpression afterClause()
		{
			IToken token = this.LT(1);
			this.match(232);
			ValueExpression result = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AFTER");
			}
			return result;
		}

		// Token: 0x0600157E RID: 5502 RVA: 0x00089DF8 File Offset: 0x00087FF8
		public ScalarExpression signedInteger()
		{
			ScalarExpression result = null;
			UnaryExpression unaryExpression = null;
			int num = this.LA(1);
			if (num != 199)
			{
				if (num != 221)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(199);
				if (this.inputState.guessing == 0)
				{
					unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
					TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
					unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
				}
			}
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				if (unaryExpression == null)
				{
					result = literal;
				}
				else
				{
					unaryExpression.Expression = literal;
					result = unaryExpression;
				}
			}
			return result;
		}

		// Token: 0x0600157F RID: 5503 RVA: 0x00089E9C File Offset: 0x0008809C
		public MoveRestoreOption moveRestoreOption()
		{
			MoveRestoreOption moveRestoreOption = base.FragmentFactory.CreateFragment<MoveRestoreOption>();
			IToken token = this.LT(1);
			this.match(232);
			ValueExpression logicalFileName = this.stringOrVariable();
			this.match(151);
			ValueExpression osfileName = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MOVE");
				moveRestoreOption.OptionKind = RestoreOptionKind.Move;
				moveRestoreOption.LogicalFileName = logicalFileName;
				moveRestoreOption.OSFileName = osfileName;
			}
			return moveRestoreOption;
		}

		// Token: 0x06001580 RID: 5504 RVA: 0x00089F14 File Offset: 0x00088114
		public ScalarExpressionRestoreOption fileRestoreOption()
		{
			ScalarExpressionRestoreOption scalarExpressionRestoreOption = base.FragmentFactory.CreateFragment<ScalarExpressionRestoreOption>();
			this.match(65);
			this.match(206);
			ScalarExpression value = this.signedIntegerOrVariable();
			if (this.inputState.guessing == 0)
			{
				scalarExpressionRestoreOption.OptionKind = RestoreOptionKind.File;
				scalarExpressionRestoreOption.Value = value;
			}
			return scalarExpressionRestoreOption;
		}

		// Token: 0x06001581 RID: 5505 RVA: 0x00089F64 File Offset: 0x00088164
		public void backupMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			this.match(151);
			this.match(65);
			this.match(206);
			Literal file = this.stringLiteral();
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(18);
			IToken token3 = this.LT(1);
			this.match(232);
			this.match(206);
			Literal password = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
				vParent.File = file;
				TSql80ParserBaseInternal.Match(token2, "ENCRYPTION");
				TSql80ParserBaseInternal.Match(token3, "PASSWORD");
				vParent.Password = password;
			}
		}

		// Token: 0x06001582 RID: 5506 RVA: 0x0008A038 File Offset: 0x00088238
		public void restoreMasterKeyBody(BackupRestoreMasterKeyStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			this.match(71);
			this.match(65);
			this.match(206);
			Literal file = this.stringLiteral();
			IToken token2 = this.LT(1);
			this.match(232);
			this.match(18);
			IToken token3 = this.LT(1);
			this.match(232);
			this.match(206);
			Literal password = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
				vParent.File = file;
				TSql80ParserBaseInternal.Match(token2, "DECRYPTION");
				TSql80ParserBaseInternal.Match(token3, "PASSWORD");
				vParent.Password = password;
			}
		}

		// Token: 0x06001583 RID: 5507 RVA: 0x0008A108 File Offset: 0x00088308
		public IdentifierOrValueExpression bulkInsertFrom()
		{
			IdentifierOrValueExpression result = null;
			int num = this.LA(1);
			if (num != 221)
			{
				switch (num)
				{
				case 230:
				case 231:
				case 232:
				case 233:
					result = this.stringOrIdentifier();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				Literal valueExpression = this.integer();
				if (this.inputState.guessing == 0)
				{
					result = base.IdentifierOrValueExpression(valueExpression);
				}
			}
			return result;
		}

		// Token: 0x06001584 RID: 5508 RVA: 0x0008A180 File Offset: 0x00088380
		public void bulkInsertOptions(BulkInsertStatement vParent)
		{
			int num = 0;
			this.match(171);
			this.match(191);
			BulkInsertOption bulkInsertOption = this.bulkInsertOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(vParent, vParent.Options, bulkInsertOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				bulkInsertOption = this.bulkInsertOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(vParent, vParent.Options, bulkInsertOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06001585 RID: 5509 RVA: 0x0008A248 File Offset: 0x00088448
		public IdentifierOrValueExpression stringOrIdentifier()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal valueExpression = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.ValueExpression = valueExpression;
				}
				break;
			}
			case 232:
			case 233:
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.Identifier = identifier;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifierOrValueExpression;
		}

		// Token: 0x06001586 RID: 5510 RVA: 0x0008A2D8 File Offset: 0x000884D8
		public BulkInsertOption bulkInsertOption()
		{
			BulkInsertOption result;
			if (this.LA(1) == 113)
			{
				result = this.bulkInsertSortOrderOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				result = this.simpleBulkInsertOptionWithValue();
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 192 && this.LA(2) != 198))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.simpleBulkInsertOptionNoValue();
			}
			return result;
		}

		// Token: 0x06001587 RID: 5511 RVA: 0x0008A368 File Offset: 0x00088568
		public OrderBulkInsertOption bulkInsertSortOrderOption()
		{
			OrderBulkInsertOption orderBulkInsertOption = base.FragmentFactory.CreateFragment<OrderBulkInsertOption>();
			IToken token = this.LT(1);
			this.match(113);
			this.match(191);
			ColumnWithSortOrder item = this.columnWithSortOrder();
			if (this.inputState.guessing == 0)
			{
				orderBulkInsertOption.OptionKind = BulkInsertOptionKind.Order;
				TSql80ParserBaseInternal.UpdateTokenInfo(orderBulkInsertOption, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(orderBulkInsertOption, orderBulkInsertOption.Columns, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.columnWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(orderBulkInsertOption, orderBulkInsertOption.Columns, item);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(orderBulkInsertOption, token2);
			}
			return orderBulkInsertOption;
		}

		// Token: 0x06001588 RID: 5512 RVA: 0x0008A434 File Offset: 0x00088634
		public LiteralBulkInsertOption simpleBulkInsertOptionWithValue()
		{
			LiteralBulkInsertOption literalBulkInsertOption = base.FragmentFactory.CreateFragment<LiteralBulkInsertOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			switch (num)
			{
			case 221:
			case 222:
			{
				Literal literal = this.integerOrNumeric();
				if (this.inputState.guessing == 0)
				{
					literalBulkInsertOption.OptionKind = BulkInsertIntOptionsHelper.Instance.ParseOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(literalBulkInsertOption, token);
					literalBulkInsertOption.Value = literal;
				}
				break;
			}
			default:
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal literal = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						literalBulkInsertOption.OptionKind = BulkInsertStringOptionsHelper.Instance.ParseOption(token);
						TSql80ParserBaseInternal.UpdateTokenInfo(literalBulkInsertOption, token);
						if (literalBulkInsertOption.OptionKind == BulkInsertOptionKind.CodePage)
						{
							TSql80ParserBaseInternal.MatchString(literal, new string[]
							{
								"ACP",
								"OEM",
								"RAW"
							});
						}
						else if (literalBulkInsertOption.OptionKind == BulkInsertOptionKind.DataFileType)
						{
							TSql80ParserBaseInternal.MatchString(literal, new string[]
							{
								"CHAR",
								"NATIVE",
								"WIDECHAR",
								"WIDENATIVE",
								"WIDECHAR_ANSI",
								"DTS_BUFFERS"
							});
						}
						literalBulkInsertOption.Value = literal;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				break;
			}
			return literalBulkInsertOption;
		}

		// Token: 0x06001589 RID: 5513 RVA: 0x0008A5B0 File Offset: 0x000887B0
		public BulkInsertOption simpleBulkInsertOptionNoValue()
		{
			BulkInsertOption bulkInsertOption = base.FragmentFactory.CreateFragment<BulkInsertOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				bulkInsertOption.OptionKind = BulkInsertFlagOptionsHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertOption, token);
			}
			return bulkInsertOption;
		}

		// Token: 0x0600158A RID: 5514 RVA: 0x0008A604 File Offset: 0x00088804
		public BulkInsertOption insertBulkOption()
		{
			int num = this.LA(1);
			BulkInsertOption result;
			if (num != 113)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.simpleInsertBulkOption();
			}
			else
			{
				result = this.bulkInsertSortOrderOption();
			}
			return result;
		}

		// Token: 0x0600158B RID: 5515 RVA: 0x0008A650 File Offset: 0x00088850
		public BulkInsertOption simpleInsertBulkOption()
		{
			BulkInsertOption bulkInsertOption = null;
			IToken token = this.LT(1);
			this.match(232);
			int num = this.LA(1);
			if (num != 192 && num != 198)
			{
				if (num != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(206);
				Literal value = this.integerOrNumeric();
				if (this.inputState.guessing == 0)
				{
					LiteralBulkInsertOption literalBulkInsertOption = base.FragmentFactory.CreateFragment<LiteralBulkInsertOption>();
					if (TSql80ParserBaseInternal.TryMatch(token, "ROWS_PER_BATCH"))
					{
						literalBulkInsertOption.OptionKind = BulkInsertOptionKind.RowsPerBatch;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "KILOBYTES_PER_BATCH");
						literalBulkInsertOption.OptionKind = BulkInsertOptionKind.KilobytesPerBatch;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(literalBulkInsertOption, token);
					literalBulkInsertOption.Value = value;
					bulkInsertOption = literalBulkInsertOption;
				}
			}
			else if (this.inputState.guessing == 0)
			{
				bulkInsertOption = base.FragmentFactory.CreateFragment<BulkInsertOption>();
				bulkInsertOption.OptionKind = BulkInsertFlagOptionsHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertOption, token);
				if (bulkInsertOption.OptionKind == BulkInsertOptionKind.KeepIdentity)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
			}
			return bulkInsertOption;
		}

		// Token: 0x0600158C RID: 5516 RVA: 0x0008A75C File Offset: 0x0008895C
		public Literal integerOrNumeric()
		{
			Literal result;
			switch (this.LA(1))
			{
			case 221:
				result = this.integer();
				break;
			case 222:
				result = this.numeric();
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return result;
		}

		// Token: 0x0600158D RID: 5517 RVA: 0x0008A7B0 File Offset: 0x000889B0
		public void coldefList(InsertBulkStatement vParent)
		{
			this.match(191);
			InsertBulkColumnDefinition item = this.coldefItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<InsertBulkColumnDefinition>(vParent, vParent.ColumnDefinitions, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.coldefItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<InsertBulkColumnDefinition>(vParent, vParent.ColumnDefinitions, item);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x0600158E RID: 5518 RVA: 0x0008A850 File Offset: 0x00088A50
		public void insertBulkOptions(InsertBulkStatement vParent)
		{
			int num = 0;
			this.match(171);
			this.match(191);
			BulkInsertOption bulkInsertOption = this.insertBulkOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(vParent, vParent.Options, bulkInsertOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				bulkInsertOption = this.insertBulkOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)bulkInsertOption.OptionKind, bulkInsertOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(vParent, vParent.Options, bulkInsertOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x0600158F RID: 5519 RVA: 0x0008A918 File Offset: 0x00088B18
		public InsertBulkColumnDefinition coldefItem()
		{
			InsertBulkColumnDefinition insertBulkColumnDefinition = base.FragmentFactory.CreateFragment<InsertBulkColumnDefinition>();
			ColumnDefinitionBase column = this.columnDefinitionEx();
			if (this.inputState.guessing == 0)
			{
				insertBulkColumnDefinition.Column = column;
			}
			int num = this.LA(1);
			switch (num)
			{
			case 99:
			case 100:
			{
				bool flag = this.nullNotNull(insertBulkColumnDefinition);
				if (this.inputState.guessing == 0)
				{
					insertBulkColumnDefinition.NullNotNull = (flag ? NullNotNull.Null : NullNotNull.NotNull);
				}
				break;
			}
			default:
				if (num != 192 && num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				break;
			}
			return insertBulkColumnDefinition;
		}

		// Token: 0x06001590 RID: 5520 RVA: 0x0008A9B0 File Offset: 0x00088BB0
		public ColumnDefinitionBase columnDefinitionEx()
		{
			ColumnDefinitionBase columnDefinitionBase = null;
			if ((this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_50_.member(this.LA(2)))
			{
				columnDefinitionBase = this.columnDefinitionBasic();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_51_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "TIMESTAMP");
					columnDefinitionBase = base.FragmentFactory.CreateFragment<ColumnDefinitionBase>();
					Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
					TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
					identifier.SetUnquotedIdentifier("TIMESTAMP");
					columnDefinitionBase.ColumnIdentifier = identifier;
				}
			}
			return columnDefinitionBase;
		}

		// Token: 0x06001591 RID: 5521 RVA: 0x0008AA90 File Offset: 0x00088C90
		public bool nullNotNull(TSqlFragment vParent)
		{
			bool result = true;
			switch (this.LA(1))
			{
			case 99:
			{
				IToken token = this.LT(1);
				this.match(99);
				if (this.inputState.guessing == 0)
				{
					result = false;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				}
				break;
			}
			case 100:
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(100);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
			return result;
		}

		// Token: 0x06001592 RID: 5522 RVA: 0x0008AB20 File Offset: 0x00088D20
		public ColumnWithSortOrder columnWithSortOrder()
		{
			ColumnWithSortOrder columnWithSortOrder = base.FragmentFactory.CreateFragment<ColumnWithSortOrder>();
			ColumnReferenceExpression column = this.identifierColumnReferenceExpression();
			if (this.inputState.guessing == 0)
			{
				columnWithSortOrder.Column = column;
			}
			int num = this.LA(1);
			if (num <= 50)
			{
				if (num == 10 || num == 50)
				{
					SortOrder sortOrder = this.orderByOption(columnWithSortOrder);
					if (this.inputState.guessing == 0)
					{
						columnWithSortOrder.SortOrder = sortOrder;
						return columnWithSortOrder;
					}
					return columnWithSortOrder;
				}
			}
			else if (num == 192 || num == 198)
			{
				return columnWithSortOrder;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001593 RID: 5523 RVA: 0x0008ABB4 File Offset: 0x00088DB4
		public void dbccNamedLiteralList(DbccStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			int num = this.LA(1);
			if (num <= 193)
			{
				if (num != 100)
				{
					switch (num)
					{
					case 192:
						if (this.inputState.guessing == 0)
						{
							vParent.ParenthesisRequired = true;
							goto IL_12D;
						}
						goto IL_12D;
					case 193:
						break;
					default:
						goto IL_11A;
					}
				}
			}
			else if (num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
					goto IL_11A;
				default:
					goto IL_11A;
				}
			}
			DbccNamedLiteral item = this.dbccNamedLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccNamedLiteral>(vParent, vParent.Literals, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.dbccNamedLiteral();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccNamedLiteral>(vParent, vParent.Literals, item);
				}
			}
			goto IL_12D;
			IL_11A:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_12D:
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06001594 RID: 5524 RVA: 0x0008AD15 File Offset: 0x00088F15
		public void dbccOptions(DbccStatement vParent)
		{
			this.match(171);
			this.dbccOptionsList(vParent);
		}

		// Token: 0x06001595 RID: 5525 RVA: 0x0008AD2C File Offset: 0x00088F2C
		public void dbccOptionsList(DbccStatement vParent)
		{
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_42_.member(this.LA(2)))
			{
				this.dbccOptionsListItems(vParent);
				return;
			}
			if (this.LA(1) == 232 && this.LA(2) == 90)
			{
				this.dbccOptionsJoin(vParent);
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001596 RID: 5526 RVA: 0x0008AD98 File Offset: 0x00088F98
		public void dbccOptionsListItems(DbccStatement vParent)
		{
			DbccOption item = this.dbccOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccOption>(vParent, vParent.Options, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.dbccOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccOption>(vParent, vParent.Options, item);
				}
			}
		}

		// Token: 0x06001597 RID: 5527 RVA: 0x0008AE04 File Offset: 0x00089004
		public void dbccOptionsJoin(DbccStatement vParent)
		{
			DbccOption item = this.dbccJoinOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccOption>(vParent, vParent.Options, item);
			}
			int num = 0;
			while (this.LA(1) == 90)
			{
				this.match(90);
				item = this.dbccJoinOption();
				if (this.inputState.guessing == 0)
				{
					vParent.OptionsUseJoin = true;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DbccOption>(vParent, vParent.Options, item);
				}
				num++;
			}
			if (num >= 1)
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001598 RID: 5528 RVA: 0x0008AE90 File Offset: 0x00089090
		public DbccOption dbccOption()
		{
			DbccOption dbccOption = base.FragmentFactory.CreateFragment<DbccOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				dbccOption.OptionKind = DbccOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
				TSql80ParserBaseInternal.UpdateTokenInfo(dbccOption, token);
			}
			return dbccOption;
		}

		// Token: 0x06001599 RID: 5529 RVA: 0x0008AEE8 File Offset: 0x000890E8
		public DbccOption dbccJoinOption()
		{
			DbccOption dbccOption = base.FragmentFactory.CreateFragment<DbccOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				dbccOption.OptionKind = DbccJoinOptionsHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(dbccOption, token);
			}
			return dbccOption;
		}

		// Token: 0x0600159A RID: 5530 RVA: 0x0008AF3C File Offset: 0x0008913C
		public DbccNamedLiteral dbccNamedLiteral()
		{
			DbccNamedLiteral dbccNamedLiteral = base.FragmentFactory.CreateFragment<DbccNamedLiteral>();
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					dbccNamedLiteral.Name = token.getText();
					TSql80ParserBaseInternal.UpdateTokenInfo(dbccNamedLiteral, token);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_52_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_53_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			ScalarExpression value = this.possibleNegativeConstantOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				dbccNamedLiteral.Value = value;
			}
			return dbccNamedLiteral;
		}

		// Token: 0x0600159B RID: 5531 RVA: 0x0008B008 File Offset: 0x00089208
		public void endpointOptions(AlterCreateEndpointStatementBase vParent)
		{
			this.endpointOption(vParent);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.endpointOption(vParent);
			}
		}

		// Token: 0x0600159C RID: 5532 RVA: 0x0008B034 File Offset: 0x00089234
		public void protocolInfo(AlterCreateEndpointStatementBase vParent)
		{
			EndpointProtocolOptions endpointProtocolOptions = EndpointProtocolOptions.None;
			this.match(9);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				vParent.Protocol = EndpointProtocolsHelper.Instance.ParseOption(token);
			}
			this.match(191);
			EndpointProtocolOption endpointProtocolOption = this.protocolOptionsItem(vParent.Protocol, endpointProtocolOptions);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EndpointProtocolOption>(vParent, vParent.ProtocolOptions, endpointProtocolOption);
				endpointProtocolOptions = endpointProtocolOption.Kind;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				endpointProtocolOption = this.protocolOptionsItem(vParent.Protocol, endpointProtocolOptions);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<EndpointProtocolOption>(vParent, vParent.ProtocolOptions, endpointProtocolOption);
					endpointProtocolOptions |= endpointProtocolOption.Kind;
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x0600159D RID: 5533 RVA: 0x0008B130 File Offset: 0x00089330
		public void payloadInfo(AlterCreateEndpointStatementBase vParent)
		{
			PayloadOptionKinds payloadOptionKinds = PayloadOptionKinds.None;
			this.match(67);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "DATA_MIRRORING"))
				{
					vParent.EndpointType = EndpointType.DatabaseMirroring;
				}
				else
				{
					vParent.EndpointType = EndpointTypesHelper.Instance.ParseOption(token);
				}
			}
			this.match(191);
			int num = this.LA(1);
			if (num <= 54)
			{
				switch (num)
				{
				case 4:
				case 6:
					break;
				case 5:
					goto IL_12E;
				default:
					if (num != 43 && num != 54)
					{
						goto IL_12E;
					}
					break;
				}
			}
			else if (num != 139)
			{
				if (num == 192)
				{
					goto IL_141;
				}
				if (num != 232)
				{
					goto IL_12E;
				}
			}
			PayloadOption payloadOption = this.payloadOption(vParent.EndpointType, payloadOptionKinds);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PayloadOption>(vParent, vParent.PayloadOptions, payloadOption);
				payloadOptionKinds = payloadOption.Kind;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				payloadOption = this.payloadOption(vParent.EndpointType, payloadOptionKinds);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PayloadOption>(vParent, vParent.PayloadOptions, payloadOption);
					payloadOptionKinds |= payloadOption.Kind;
				}
			}
			goto IL_141;
			IL_12E:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_141:
			if (this.inputState.guessing == 0 && vParent.EndpointType == EndpointType.DatabaseMirroring && (payloadOptionKinds & PayloadOptionKinds.Role) != PayloadOptionKinds.Role)
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46080", token, TSqlParserResource.SQL46080Message, new string[0]);
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x0600159E RID: 5534 RVA: 0x0008B2E0 File Offset: 0x000894E0
		public void endpointOption(AlterCreateEndpointStatementBase vParent)
		{
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("STATE"))
			{
				this.endpointState(vParent);
				return;
			}
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				this.endpointAffinity(vParent);
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600159F RID: 5535 RVA: 0x0008B354 File Offset: 0x00089554
		public void endpointState(AlterCreateEndpointStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (vParent.State != EndpointState.NotSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				vParent.State = EndpointStateHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x060015A0 RID: 5536 RVA: 0x0008B3CC File Offset: 0x000895CC
		public void endpointAffinity(AlterCreateEndpointStatementBase vParent)
		{
			EndpointAffinity endpointAffinity = base.FragmentFactory.CreateFragment<EndpointAffinity>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AFFINITY");
				if (vParent.Affinity != null)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(endpointAffinity, token);
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "NONE"))
					{
						endpointAffinity.Kind = AffinityKind.None;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "ADMIN");
						endpointAffinity.Kind = AffinityKind.Admin;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(endpointAffinity, token2);
				}
			}
			else
			{
				Literal value = this.integer();
				if (this.inputState.guessing == 0)
				{
					endpointAffinity.Kind = AffinityKind.Integer;
					endpointAffinity.Value = value;
				}
			}
			if (this.inputState.guessing == 0)
			{
				vParent.Affinity = endpointAffinity;
			}
		}

		// Token: 0x060015A1 RID: 5537 RVA: 0x0008B4EC File Offset: 0x000896EC
		public EndpointProtocolOption protocolOptionsItem(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			EndpointProtocolOption result;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LISTENER_IP"))
			{
				result = this.listenerIpProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LISTENER_PORT"))
			{
				result = this.listenerPortProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("PATH"))
			{
				result = this.pathProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SITE"))
			{
				result = this.siteProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("CLEAR_PORT"))
			{
				result = this.clearPortProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SSL_PORT"))
			{
				result = this.sslPortProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("AUTHENTICATION"))
			{
				result = this.authenticationProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("PORTS"))
			{
				result = this.portsProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("AUTH_REALM"))
			{
				result = this.authenticationRealmProtocolOption(protocol, encountered);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("DEFAULT_LOGON_DOMAIN"))
			{
				result = this.defaultLogonDomainProtocolOption(protocol, encountered);
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.compressionProtocolOption(protocol, encountered);
			}
			return result;
		}

		// Token: 0x060015A2 RID: 5538 RVA: 0x0008B758 File Offset: 0x00089958
		public ListenerIPEndpointProtocolOption listenerIpProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			ListenerIPEndpointProtocolOption listenerIPEndpointProtocolOption = base.FragmentFactory.CreateFragment<ListenerIPEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				listenerIPEndpointProtocolOption.Kind = EndpointProtocolOptions.TcpListenerIP;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, listenerIPEndpointProtocolOption.Kind, protocol, token);
			}
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(191);
				int num2 = this.LA(1);
				switch (num2)
				{
				case 221:
				case 222:
				{
					IPv4 pv = this.ipAddressV4();
					if (this.inputState.guessing == 0)
					{
						listenerIPEndpointProtocolOption.IPv4PartOne = pv;
					}
					int num3 = this.LA(1);
					if (num3 != 192)
					{
						if (num3 != 202)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(202);
						pv = this.ipAddressV4();
						if (this.inputState.guessing == 0)
						{
							listenerIPEndpointProtocolOption.IPv4PartTwo = pv;
						}
					}
					break;
				}
				default:
					switch (num2)
					{
					case 230:
					case 231:
					{
						Literal ipv = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							listenerIPEndpointProtocolOption.IPv6 = ipv;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					break;
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(listenerIPEndpointProtocolOption, token2);
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					listenerIPEndpointProtocolOption.IsAll = true;
				}
			}
			return listenerIPEndpointProtocolOption;
		}

		// Token: 0x060015A3 RID: 5539 RVA: 0x0008B918 File Offset: 0x00089B18
		public LiteralEndpointProtocolOption listenerPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal value = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.TcpListenerPort;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				TSql90ParserBaseInternal.ThrowIfInvalidListenerPortValue(value);
				literalEndpointProtocolOption.Value = value;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x060015A4 RID: 5540 RVA: 0x0008B98C File Offset: 0x00089B8C
		public LiteralEndpointProtocolOption pathProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal value = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpPath;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				literalEndpointProtocolOption.Value = value;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x060015A5 RID: 5541 RVA: 0x0008B9F8 File Offset: 0x00089BF8
		public LiteralEndpointProtocolOption siteProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal value = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpSite;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				literalEndpointProtocolOption.Value = value;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x060015A6 RID: 5542 RVA: 0x0008BA68 File Offset: 0x00089C68
		public LiteralEndpointProtocolOption clearPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal value = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpClearPort;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				literalEndpointProtocolOption.Value = value;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x060015A7 RID: 5543 RVA: 0x0008BAD4 File Offset: 0x00089CD4
		public LiteralEndpointProtocolOption sslPortProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal value = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpSslPort;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
				literalEndpointProtocolOption.Value = value;
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x060015A8 RID: 5544 RVA: 0x0008BB44 File Offset: 0x00089D44
		public AuthenticationEndpointProtocolOption authenticationProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			AuthenticationEndpointProtocolOption authenticationEndpointProtocolOption = base.FragmentFactory.CreateFragment<AuthenticationEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				authenticationEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpAuthentication;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, authenticationEndpointProtocolOption.Kind, protocol, token);
			}
			this.match(191);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				authenticationEndpointProtocolOption.AuthenticationTypes = AuthenticationTypesHelper.Instance.ParseOption(token2);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					authenticationEndpointProtocolOption.AuthenticationTypes = TSql90ParserBaseInternal.AggregateAuthenticationType(authenticationEndpointProtocolOption.AuthenticationTypes, AuthenticationTypesHelper.Instance.ParseOption(token3), token3);
				}
			}
			IToken token4 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(authenticationEndpointProtocolOption, token4);
			}
			return authenticationEndpointProtocolOption;
		}

		// Token: 0x060015A9 RID: 5545 RVA: 0x0008BC64 File Offset: 0x00089E64
		public PortsEndpointProtocolOption portsProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			PortsEndpointProtocolOption portsEndpointProtocolOption = base.FragmentFactory.CreateFragment<PortsEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				portsEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpPorts;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, portsEndpointProtocolOption.Kind, protocol, token);
			}
			this.match(191);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				portsEndpointProtocolOption.PortTypes = PortTypesHelper.Instance.ParseOption(token2);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					portsEndpointProtocolOption.PortTypes = TSql90ParserBaseInternal.AggregatePortType(portsEndpointProtocolOption.PortTypes, PortTypesHelper.Instance.ParseOption(token3), token3);
				}
			}
			IToken token4 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(portsEndpointProtocolOption, token4);
			}
			return portsEndpointProtocolOption;
		}

		// Token: 0x060015AA RID: 5546 RVA: 0x0008BD88 File Offset: 0x00089F88
		public LiteralEndpointProtocolOption authenticationRealmProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpAuthenticationRealm;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
			}
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal value = this.nonEmptyString();
				if (this.inputState.guessing == 0)
				{
					literalEndpointProtocolOption.Value = value;
				}
				break;
			}
			case 232:
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NONE");
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x060015AB RID: 5547 RVA: 0x0008BE68 File Offset: 0x0008A068
		public LiteralEndpointProtocolOption defaultLogonDomainProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			LiteralEndpointProtocolOption literalEndpointProtocolOption = base.FragmentFactory.CreateFragment<LiteralEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				literalEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpDefaultLogonDomain;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, literalEndpointProtocolOption.Kind, protocol, token);
			}
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal value = this.nonEmptyString();
				if (this.inputState.guessing == 0)
				{
					literalEndpointProtocolOption.Value = value;
				}
				break;
			}
			case 232:
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NONE");
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return literalEndpointProtocolOption;
		}

		// Token: 0x060015AC RID: 5548 RVA: 0x0008BF48 File Offset: 0x0008A148
		public CompressionEndpointProtocolOption compressionProtocolOption(EndpointProtocol protocol, EndpointProtocolOptions encountered)
		{
			CompressionEndpointProtocolOption compressionEndpointProtocolOption = base.FragmentFactory.CreateFragment<CompressionEndpointProtocolOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				compressionEndpointProtocolOption.Kind = EndpointProtocolOptions.HttpCompression;
				TSql90ParserBaseInternal.CheckIfEndpointOptionAllowed(encountered, compressionEndpointProtocolOption.Kind, protocol, token);
				if (TSql80ParserBaseInternal.TryMatch(token2, "ENABLED"))
				{
					compressionEndpointProtocolOption.IsEnabled = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "DISABLED");
					compressionEndpointProtocolOption.IsEnabled = false;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(compressionEndpointProtocolOption, token2);
			}
			return compressionEndpointProtocolOption;
		}

		// Token: 0x060015AD RID: 5549 RVA: 0x0008BFE8 File Offset: 0x0008A1E8
		public void ipV4DotNumberTail(IPv4 vParent)
		{
			int num = this.LA(1);
			if (num != 200)
			{
				if (num != 222)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(222);
				if (this.inputState.guessing == 0)
				{
					vParent.OctetFour = base.GetIPv4FragmentFromDotNumberNumeric(token);
					return;
				}
			}
			else
			{
				this.match(200);
				Literal octetFour = this.integer();
				if (this.inputState.guessing == 0)
				{
					vParent.OctetFour = octetFour;
					return;
				}
			}
		}

		// Token: 0x060015AE RID: 5550 RVA: 0x0008C078 File Offset: 0x0008A278
		public void ipV4DotLastTwoPartsTail(IPv4 vParent)
		{
			this.match(200);
			switch (this.LA(1))
			{
			case 221:
			{
				Literal octetThree = this.integer();
				this.ipV4DotNumberTail(vParent);
				if (this.inputState.guessing == 0)
				{
					vParent.OctetThree = octetThree;
					return;
				}
				return;
			}
			case 222:
				this.ipV4NumericOrNumericIntegerTail(vParent);
				return;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x060015AF RID: 5551 RVA: 0x0008C0EC File Offset: 0x0008A2EC
		public void ipV4NumericOrNumericIntegerTail(IPv4 vParent)
		{
			IToken token = this.LT(1);
			this.match(222);
			int num = this.LA(1);
			if (num <= 192)
			{
				if (num != 1 && num != 192)
				{
					goto IL_99;
				}
			}
			else if (num != 202)
			{
				if (num != 221)
				{
					goto IL_99;
				}
				Literal octetFour = this.integer();
				if (this.inputState.guessing == 0)
				{
					vParent.OctetThree = base.GetIPv4FragmentFromNumberDotNumeric(token);
					vParent.OctetFour = octetFour;
					return;
				}
				return;
			}
			if (this.inputState.guessing == 0)
			{
				Literal octetThree;
				Literal octetFour2;
				base.GetIPv4FragmentsFromNumberDotNumberNumeric(token, out octetThree, out octetFour2);
				vParent.OctetThree = octetThree;
				vParent.OctetFour = octetFour2;
				return;
			}
			return;
			IL_99:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060015B0 RID: 5552 RVA: 0x0008C1A8 File Offset: 0x0008A3A8
		public PayloadOption payloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			int num = this.LA(1);
			PayloadOption result;
			if (num != 43)
			{
				if (num != 139)
				{
					if (TSql90ParserInternal.tokenSet_54_.member(this.LA(1)) && this.LA(2) >= 230 && this.LA(2) <= 232)
					{
						result = this.soapMethod(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("BATCHES"))
					{
						result = this.batchesPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("WSDL"))
					{
						result = this.wsdlPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SESSIONS"))
					{
						result = this.sessionsPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LOGIN_TYPE"))
					{
						result = this.loginTypePayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("SESSION_TIMEOUT"))
					{
						result = this.sessionTimeoutPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("NAMESPACE"))
					{
						result = this.namespacePayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("CHARACTER_SET"))
					{
						result = this.characterSetPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("HEADER_LIMIT"))
					{
						result = this.headerLimitPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("AUTHENTICATION"))
					{
						result = this.authenticationPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ENCRYPTION"))
					{
						result = this.encryptionPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MESSAGE_FORWARDING"))
					{
						result = this.messageForwardingPayloadOption(type, encountered);
					}
					else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MESSAGE_FORWARD_SIZE"))
					{
						result = this.messageForwardSizePayloadOption(type, encountered);
					}
					else
					{
						if (this.LA(1) != 232 || this.LA(2) != 206)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						result = this.rolePayloadOption(type, encountered);
					}
				}
				else
				{
					result = this.schemaPayloadOption(type, encountered);
				}
			}
			else
			{
				result = this.databasePayloadOption(type, encountered);
			}
			return result;
		}

		// Token: 0x060015B1 RID: 5553 RVA: 0x0008C4F0 File Offset: 0x0008A6F0
		public SoapMethod soapMethod(EndpointType type, PayloadOptionKinds encountered)
		{
			SoapMethod soapMethod = base.FragmentFactory.CreateFragment<SoapMethod>();
			int num = this.LA(1);
			switch (num)
			{
			case 4:
			case 6:
				break;
			case 5:
				goto IL_1A2;
			default:
				if (num != 54)
				{
					if (num != 232)
					{
						goto IL_1A2;
					}
				}
				else
				{
					this.match(54);
					IToken token = this.LT(1);
					this.match(232);
					this.soapMethodAlias(soapMethod);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "WEBMETHOD");
						soapMethod.Action = SoapMethodAction.Drop;
						return soapMethod;
					}
					return soapMethod;
				}
				break;
			}
			int num2 = this.LA(1);
			switch (num2)
			{
			case 4:
				this.match(4);
				if (this.inputState.guessing == 0)
				{
					soapMethod.Action = SoapMethodAction.Add;
					goto IL_BB;
				}
				goto IL_BB;
			case 5:
				break;
			case 6:
				this.match(6);
				if (this.inputState.guessing == 0)
				{
					soapMethod.Action = SoapMethodAction.Alter;
					goto IL_BB;
				}
				goto IL_BB;
			default:
				if (num2 == 232)
				{
					goto IL_BB;
				}
				break;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_BB:
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "WEBMETHOD");
				soapMethod.Kind = PayloadOptionKinds.WebMethod;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, soapMethod.Kind, type, token2);
			}
			this.soapMethodAlias(soapMethod);
			this.match(191);
			this.soapMethodOption(soapMethod);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.soapMethodOption(soapMethod);
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(soapMethod, token3);
				return soapMethod;
			}
			return soapMethod;
			IL_1A2:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060015B2 RID: 5554 RVA: 0x0008C6B4 File Offset: 0x0008A8B4
		public EnabledDisabledPayloadOption batchesPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			EnabledDisabledPayloadOption enabledDisabledPayloadOption = base.FragmentFactory.CreateFragment<EnabledDisabledPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			this.enabledDisabled(enabledDisabledPayloadOption);
			if (this.inputState.guessing == 0)
			{
				enabledDisabledPayloadOption.Kind = PayloadOptionKinds.Batches;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, enabledDisabledPayloadOption.Kind, type, token);
			}
			return enabledDisabledPayloadOption;
		}

		// Token: 0x060015B3 RID: 5555 RVA: 0x0008C718 File Offset: 0x0008A918
		public WsdlPayloadOption wsdlPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			WsdlPayloadOption wsdlPayloadOption = base.FragmentFactory.CreateFragment<WsdlPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				wsdlPayloadOption.Kind = PayloadOptionKinds.Wsdl;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, wsdlPayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			if (num != 47)
			{
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal value = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						wsdlPayloadOption.Value = value;
					}
					break;
				}
				case 232:
				{
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token2, "NONE");
						wsdlPayloadOption.IsNone = true;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				Literal value = this.defaultLiteral();
				if (this.inputState.guessing == 0)
				{
					wsdlPayloadOption.Value = value;
				}
			}
			return wsdlPayloadOption;
		}

		// Token: 0x060015B4 RID: 5556 RVA: 0x0008C824 File Offset: 0x0008AA24
		public EnabledDisabledPayloadOption sessionsPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			EnabledDisabledPayloadOption enabledDisabledPayloadOption = base.FragmentFactory.CreateFragment<EnabledDisabledPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			this.enabledDisabled(enabledDisabledPayloadOption);
			if (this.inputState.guessing == 0)
			{
				enabledDisabledPayloadOption.Kind = PayloadOptionKinds.Sessions;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, enabledDisabledPayloadOption.Kind, type, token);
			}
			return enabledDisabledPayloadOption;
		}

		// Token: 0x060015B5 RID: 5557 RVA: 0x0008C888 File Offset: 0x0008AA88
		public LoginTypePayloadOption loginTypePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LoginTypePayloadOption loginTypePayloadOption = base.FragmentFactory.CreateFragment<LoginTypePayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				loginTypePayloadOption.Kind = PayloadOptionKinds.LoginType;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, loginTypePayloadOption.Kind, type, token);
				if (TSql80ParserBaseInternal.TryMatch(token2, "WINDOWS"))
				{
					loginTypePayloadOption.IsWindows = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "MIXED");
					loginTypePayloadOption.IsWindows = false;
				}
			}
			return loginTypePayloadOption;
		}

		// Token: 0x060015B6 RID: 5558 RVA: 0x0008C924 File Offset: 0x0008AB24
		public SessionTimeoutPayloadOption sessionTimeoutPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			SessionTimeoutPayloadOption sessionTimeoutPayloadOption = base.FragmentFactory.CreateFragment<SessionTimeoutPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				sessionTimeoutPayloadOption.Kind = PayloadOptionKinds.SessionTimeout;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, sessionTimeoutPayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NEVER");
					sessionTimeoutPayloadOption.IsNever = true;
				}
			}
			else
			{
				Literal timeout = this.integer();
				if (this.inputState.guessing == 0)
				{
					sessionTimeoutPayloadOption.Timeout = timeout;
				}
			}
			return sessionTimeoutPayloadOption;
		}

		// Token: 0x060015B7 RID: 5559 RVA: 0x0008CA04 File Offset: 0x0008AC04
		public LiteralPayloadOption databasePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
			IToken token = this.LT(1);
			this.match(43);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Kind = PayloadOptionKinds.Database;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			Literal value;
			if (num != 47)
			{
				switch (num)
				{
				case 230:
				case 231:
					value = this.stringLiteral();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				value = this.defaultLiteral();
			}
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Value = value;
			}
			return literalPayloadOption;
		}

		// Token: 0x060015B8 RID: 5560 RVA: 0x0008CABC File Offset: 0x0008ACBC
		public LiteralPayloadOption namespacePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Kind = PayloadOptionKinds.Namespace;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			Literal value;
			if (num != 47)
			{
				switch (num)
				{
				case 230:
				case 231:
					value = this.stringLiteral();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				value = this.defaultLiteral();
			}
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Value = value;
			}
			return literalPayloadOption;
		}

		// Token: 0x060015B9 RID: 5561 RVA: 0x0008CB78 File Offset: 0x0008AD78
		public SchemaPayloadOption schemaPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			SchemaPayloadOption schemaPayloadOption = base.FragmentFactory.CreateFragment<SchemaPayloadOption>();
			IToken token = this.LT(1);
			this.match(139);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				schemaPayloadOption.Kind = PayloadOptionKinds.Schema;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, schemaPayloadOption.Kind, type, token);
				if (TSql80ParserBaseInternal.TryMatch(token2, "STANDARD"))
				{
					schemaPayloadOption.IsStandard = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "NONE");
					schemaPayloadOption.IsStandard = false;
				}
			}
			return schemaPayloadOption;
		}

		// Token: 0x060015BA RID: 5562 RVA: 0x0008CC18 File Offset: 0x0008AE18
		public CharacterSetPayloadOption characterSetPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			CharacterSetPayloadOption characterSetPayloadOption = base.FragmentFactory.CreateFragment<CharacterSetPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				characterSetPayloadOption.Kind = PayloadOptionKinds.CharacterSet;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, characterSetPayloadOption.Kind, type, token);
				if (TSql80ParserBaseInternal.TryMatch(token2, "SQL"))
				{
					characterSetPayloadOption.IsSql = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token2, "XML");
					characterSetPayloadOption.IsSql = false;
				}
			}
			return characterSetPayloadOption;
		}

		// Token: 0x060015BB RID: 5563 RVA: 0x0008CCB8 File Offset: 0x0008AEB8
		public LiteralPayloadOption headerLimitPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal value = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Kind = PayloadOptionKinds.HeaderLimit;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
				literalPayloadOption.Value = value;
			}
			return literalPayloadOption;
		}

		// Token: 0x060015BC RID: 5564 RVA: 0x0008CD28 File Offset: 0x0008AF28
		public AuthenticationPayloadOption authenticationPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			AuthenticationPayloadOption authenticationPayloadOption = base.FragmentFactory.CreateFragment<AuthenticationPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				authenticationPayloadOption.Kind = PayloadOptionKinds.Authentication;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, authenticationPayloadOption.Kind, type, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.LA(1) == 192 || this.LA(1) == 198)
			{
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "WINDOWS");
					authenticationPayloadOption.Protocol = AuthenticationProtocol.Windows;
				}
			}
			else if ((this.LA(1) == 232 || this.LA(1) == 233) && (this.LA(2) == 192 || this.LA(2) == 198))
			{
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "CERTIFICATE"))
					{
						authenticationPayloadOption.Certificate = identifier;
						authenticationPayloadOption.TryCertificateFirst = true;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "WINDOWS");
						authenticationPayloadOption.Protocol = TSql90ParserBaseInternal.RecognizeAuthenticationProtocol(identifier, token2);
					}
				}
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 232 && this.LA(2) != 233))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				Identifier identifier = this.identifier();
				Identifier identifier2 = this.identifier();
				int num = this.LA(1);
				if (num != 192 && num != 198)
				{
					switch (num)
					{
					case 232:
					case 233:
					{
						Identifier identifier3 = this.identifier();
						if (this.inputState.guessing == 0)
						{
							if (TSql80ParserBaseInternal.TryMatch(token2, "CERTIFICATE"))
							{
								authenticationPayloadOption.Certificate = identifier;
								TSql80ParserBaseInternal.Match(identifier2, "WINDOWS", token2);
								authenticationPayloadOption.Protocol = TSql90ParserBaseInternal.RecognizeAuthenticationProtocol(identifier3, token2);
								authenticationPayloadOption.TryCertificateFirst = true;
							}
							else
							{
								TSql80ParserBaseInternal.Match(token2, "WINDOWS");
								authenticationPayloadOption.Protocol = TSql90ParserBaseInternal.RecognizeAuthenticationProtocol(identifier, token2);
								TSql80ParserBaseInternal.Match(identifier2, "CERTIFICATE", token2);
								authenticationPayloadOption.Certificate = identifier3;
							}
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "CERTIFICATE"))
					{
						authenticationPayloadOption.Certificate = identifier;
						TSql80ParserBaseInternal.Match(identifier2, "WINDOWS", token2);
						authenticationPayloadOption.TryCertificateFirst = true;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "WINDOWS");
						TSql80ParserBaseInternal.Match(identifier, "CERTIFICATE", token2);
						authenticationPayloadOption.Certificate = identifier2;
					}
					authenticationPayloadOption.Protocol = AuthenticationProtocol.Windows;
				}
			}
			return authenticationPayloadOption;
		}

		// Token: 0x060015BD RID: 5565 RVA: 0x0008CFF8 File Offset: 0x0008B1F8
		public EncryptionPayloadOption encryptionPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			EncryptionPayloadOption encryptionPayloadOption = base.FragmentFactory.CreateFragment<EncryptionPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				encryptionPayloadOption.Kind = PayloadOptionKinds.Encryption;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, encryptionPayloadOption.Kind, type, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				encryptionPayloadOption.EncryptionSupport = EndpointEncryptionSupportHelper.Instance.ParseOption(token2);
			}
			int num = this.LA(1);
			if (num != 192 && num != 198)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0 && (encryptionPayloadOption.EncryptionSupport == EndpointEncryptionSupport.Disabled || !string.Equals(TSql90ParserBaseInternal.Unquote(identifier.Value), "ALGORITHM", StringComparison.OrdinalIgnoreCase)))
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
					}
					if ((this.LA(1) == 232 || this.LA(1) == 233) && (this.LA(2) == 192 || this.LA(2) == 198))
					{
						Identifier id = this.identifier();
						if (this.inputState.guessing == 0)
						{
							encryptionPayloadOption.AlgorithmPartOne = TSql90ParserBaseInternal.RecognizeAesOrRc4(id, token2);
						}
					}
					else
					{
						if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 232 && this.LA(2) != 233))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						Identifier id = this.identifier();
						Identifier id2 = this.identifier();
						if (this.inputState.guessing == 0)
						{
							encryptionPayloadOption.AlgorithmPartOne = TSql90ParserBaseInternal.RecognizeAesOrRc4(id, token2);
							encryptionPayloadOption.AlgorithmPartTwo = TSql90ParserBaseInternal.RecognizeAesOrRc4(id2, token2);
							if (encryptionPayloadOption.AlgorithmPartOne == encryptionPayloadOption.AlgorithmPartTwo)
							{
								throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
							}
						}
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return encryptionPayloadOption;
		}

		// Token: 0x060015BE RID: 5566 RVA: 0x0008D214 File Offset: 0x0008B414
		public EnabledDisabledPayloadOption messageForwardingPayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			EnabledDisabledPayloadOption enabledDisabledPayloadOption = base.FragmentFactory.CreateFragment<EnabledDisabledPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			this.enabledDisabled(enabledDisabledPayloadOption);
			if (this.inputState.guessing == 0)
			{
				enabledDisabledPayloadOption.Kind = PayloadOptionKinds.MessageForwarding;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, enabledDisabledPayloadOption.Kind, type, token);
			}
			return enabledDisabledPayloadOption;
		}

		// Token: 0x060015BF RID: 5567 RVA: 0x0008D27C File Offset: 0x0008B47C
		public LiteralPayloadOption messageForwardSizePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			LiteralPayloadOption literalPayloadOption = base.FragmentFactory.CreateFragment<LiteralPayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal value = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalPayloadOption.Kind = PayloadOptionKinds.MessageForwardSize;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, literalPayloadOption.Kind, type, token);
				literalPayloadOption.Value = value;
			}
			return literalPayloadOption;
		}

		// Token: 0x060015C0 RID: 5568 RVA: 0x0008D2EC File Offset: 0x0008B4EC
		public RolePayloadOption rolePayloadOption(EndpointType type, PayloadOptionKinds encountered)
		{
			RolePayloadOption rolePayloadOption = base.FragmentFactory.CreateFragment<RolePayloadOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				rolePayloadOption.Kind = PayloadOptionKinds.Role;
				TSql90ParserBaseInternal.CheckIfPayloadOptionAllowed(encountered, rolePayloadOption.Kind, type, token);
			}
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "WITNESS"))
					{
						rolePayloadOption.Role = DatabaseMirroringEndpointRole.Witness;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "PARTNER");
						rolePayloadOption.Role = DatabaseMirroringEndpointRole.Partner;
					}
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					rolePayloadOption.Role = DatabaseMirroringEndpointRole.All;
				}
			}
			return rolePayloadOption;
		}

		// Token: 0x060015C1 RID: 5569 RVA: 0x0008D3E8 File Offset: 0x0008B5E8
		public void enabledDisabled(EnabledDisabledPayloadOption vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "ENABLED"))
				{
					vParent.IsEnabled = true;
					return;
				}
				TSql80ParserBaseInternal.Match(token, "DISABLED");
				vParent.IsEnabled = false;
			}
		}

		// Token: 0x060015C2 RID: 5570 RVA: 0x0008D440 File Offset: 0x0008B640
		public DefaultLiteral defaultLiteral()
		{
			DefaultLiteral defaultLiteral = base.FragmentFactory.CreateFragment<DefaultLiteral>();
			IToken token = this.LT(1);
			this.match(47);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(defaultLiteral, token);
				defaultLiteral.Value = token.getText();
			}
			return defaultLiteral;
		}

		// Token: 0x060015C3 RID: 5571 RVA: 0x0008D48C File Offset: 0x0008B68C
		public void soapMethodAlias(SoapMethod vParent)
		{
			if ((this.LA(1) == 230 || this.LA(1) == 231) && (this.LA(2) == 191 || this.LA(2) == 192 || this.LA(2) == 198))
			{
				Literal alias = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					vParent.Alias = alias;
					return;
				}
			}
			else
			{
				if ((this.LA(1) != 230 && this.LA(1) != 231) || this.LA(2) != 200)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				Literal @namespace = this.stringLiteral();
				this.match(200);
				Literal alias = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					vParent.Alias = alias;
					vParent.Namespace = @namespace;
					return;
				}
			}
		}

		// Token: 0x060015C4 RID: 5572 RVA: 0x0008D570 File Offset: 0x0008B770
		public void soapMethodOption(SoapMethod vParent)
		{
			int num = this.LA(1);
			if (num != 139)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				switch (this.LA(1))
				{
				case 230:
				case 231:
				{
					Literal name = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "NAME");
						if (vParent.Name != null)
						{
							throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
						}
						vParent.Name = name;
						return;
					}
					break;
				}
				case 232:
				{
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						if (vParent.Format != SoapMethodFormat.NotSpecified)
						{
							throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
						}
						TSql80ParserBaseInternal.Match(token, "FORMAT");
						vParent.Format = SoapMethodFormatsHelper.Instance.ParseOption(token2);
						return;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(139);
				this.match(206);
				if (this.inputState.guessing == 0 && vParent.Schema != SoapMethodSchemas.NotSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token3);
				}
				int num2 = this.LA(1);
				if (num2 != 47)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token4 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						if (TSql80ParserBaseInternal.TryMatch(token4, "NONE"))
						{
							vParent.Schema = SoapMethodSchemas.None;
							return;
						}
						TSql80ParserBaseInternal.Match(token4, "STANDARD");
						vParent.Schema = SoapMethodSchemas.Standard;
						return;
					}
				}
				else
				{
					this.match(47);
					if (this.inputState.guessing == 0)
					{
						vParent.Schema = SoapMethodSchemas.Default;
						return;
					}
				}
			}
		}

		// Token: 0x060015C5 RID: 5573 RVA: 0x0008D76C File Offset: 0x0008B96C
		public EventNotificationObjectScope eventNotificationObjectScope()
		{
			EventNotificationObjectScope eventNotificationObjectScope = base.FragmentFactory.CreateFragment<EventNotificationObjectScope>();
			this.match(105);
			if (this.LA(1) == 43)
			{
				IToken token = this.LT(1);
				this.match(43);
				if (this.inputState.guessing == 0)
				{
					eventNotificationObjectScope.Target = EventNotificationTarget.Database;
					TSql80ParserBaseInternal.UpdateTokenInfo(eventNotificationObjectScope, token);
				}
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("QUEUE"))
			{
				this.LT(1);
				this.match(232);
				SchemaObjectName queueName = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					eventNotificationObjectScope.Target = EventNotificationTarget.Queue;
					eventNotificationObjectScope.QueueName = queueName;
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_55_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "SERVER");
					eventNotificationObjectScope.Target = EventNotificationTarget.Server;
					TSql80ParserBaseInternal.UpdateTokenInfo(eventNotificationObjectScope, token2);
				}
			}
			return eventNotificationObjectScope;
		}

		// Token: 0x060015C6 RID: 5574 RVA: 0x0008D8BC File Offset: 0x0008BABC
		public EventTypeGroupContainer eventTypeGroupContainer()
		{
			EventTypeGroupContainer result = null;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				EventNotificationEventType eventTypeValue;
				EventNotificationEventGroup eventGroupValue;
				if (TriggerEventTypeHelper.Instance.TryParseOption(token, SqlVersionFlags.TSql90, out eventTypeValue))
				{
					result = base.CreateEventTypeContainer(eventTypeValue, token);
				}
				else if (AuditEventTypeHelper.Instance.TryParseOption(token, SqlVersionFlags.TSql90, out eventTypeValue))
				{
					result = base.CreateEventTypeContainer(eventTypeValue, token);
				}
				else if (TriggerEventGroupHelper.Instance.TryParseOption(token, SqlVersionFlags.TSql90, out eventGroupValue))
				{
					result = base.CreateEventGroupContainer(eventGroupValue, token);
				}
				else
				{
					eventGroupValue = AuditEventGroupHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
					result = base.CreateEventGroupContainer(eventGroupValue, token);
				}
			}
			return result;
		}

		// Token: 0x060015C7 RID: 5575 RVA: 0x0008D958 File Offset: 0x0008BB58
		public CreateFullTextCatalogStatement createFulltextCatalogStatement()
		{
			CreateFullTextCatalogStatement createFullTextCatalogStatement = base.FragmentFactory.CreateFragment<CreateFullTextCatalogStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CATALOG");
				createFullTextCatalogStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createFullTextCatalogStatement);
			}
			int num = this.LA(1);
			if (num <= 106)
			{
				if (num <= 64)
				{
					if (num <= 23)
					{
						switch (num)
						{
						case 1:
						case 4:
						case 6:
						case 9:
						case 11:
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_353;
						case 2:
						case 3:
						case 5:
						case 7:
						case 8:
						case 10:
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								goto IL_353;
							}
							break;
						}
					}
					else
					{
						if (num == 28)
						{
							goto IL_353;
						}
						switch (num)
						{
						case 33:
						case 35:
							goto IL_353;
						case 34:
							break;
						default:
							switch (num)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								goto IL_353;
							}
							break;
						}
					}
				}
				else if (num <= 86)
				{
					switch (num)
					{
					case 74:
					case 75:
						goto IL_353;
					default:
						switch (num)
						{
						case 82:
						case 83:
						case 86:
							goto IL_353;
						}
						break;
					}
				}
				else
				{
					if (num == 92 || num == 95)
					{
						goto IL_353;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						IToken token2 = this.LT(1);
						this.match(232);
						Identifier fileGroup = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "FILEGROUP");
							createFullTextCatalogStatement.FileGroup = fileGroup;
							goto IL_353;
						}
						goto IL_353;
					}
					case 106:
						goto IL_353;
					}
				}
			}
			else if (num <= 176)
			{
				if (num <= 144)
				{
					if (num == 119)
					{
						goto IL_353;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_353;
					}
				}
				else
				{
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						goto IL_353;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_353;
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								goto IL_353;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				switch (num)
				{
				case 180:
				case 181:
					goto IL_353;
				default:
					if (num == 191)
					{
						goto IL_353;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_353;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_353;
				default:
					if (num == 232)
					{
						goto IL_353;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_353:
			int num2 = this.LA(1);
			if (num2 <= 106)
			{
				if (num2 <= 64)
				{
					if (num2 <= 23)
					{
						switch (num2)
						{
						case 1:
						case 4:
						case 6:
						case 9:
						case 11:
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_646;
						case 2:
						case 3:
						case 5:
						case 7:
						case 8:
						case 10:
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_646;
							}
							break;
						}
					}
					else
					{
						if (num2 == 28)
						{
							goto IL_646;
						}
						switch (num2)
						{
						case 33:
						case 35:
							goto IL_646;
						case 34:
							break;
						default:
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								goto IL_646;
							}
							break;
						}
					}
				}
				else if (num2 <= 86)
				{
					switch (num2)
					{
					case 74:
					case 75:
						goto IL_646;
					default:
						switch (num2)
						{
						case 82:
						case 86:
							goto IL_646;
						case 83:
						{
							this.match(83);
							IToken token3 = this.LT(1);
							this.match(232);
							Literal path = this.stringLiteral();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.Match(token3, "PATH");
								createFullTextCatalogStatement.Path = path;
								goto IL_646;
							}
							goto IL_646;
						}
						}
						break;
					}
				}
				else if (num2 == 92 || num2 == 95 || num2 == 106)
				{
					goto IL_646;
				}
			}
			else if (num2 <= 176)
			{
				if (num2 <= 144)
				{
					if (num2 == 119)
					{
						goto IL_646;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_646;
					}
				}
				else
				{
					switch (num2)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						goto IL_646;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num2)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_646;
						case 168:
						case 169:
							break;
						default:
							if (num2 == 176)
							{
								goto IL_646;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				switch (num2)
				{
				case 180:
				case 181:
					goto IL_646;
				default:
					if (num2 == 191)
					{
						goto IL_646;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_646;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_646;
				default:
					if (num2 == 232)
					{
						goto IL_646;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_646:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				FullTextCatalogOption item = this.accentSensitivity();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextCatalogOption>(createFullTextCatalogStatement, createFullTextCatalogStatement.Options, item);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_56_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num3 = this.LA(1);
			if (num3 <= 95)
			{
				if (num3 <= 64)
				{
					if (num3 <= 23)
					{
						switch (num3)
						{
						case 1:
						case 4:
						case 6:
						case 11:
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_99E;
						case 2:
						case 3:
						case 5:
						case 7:
						case 8:
						case 10:
						case 14:
						case 16:
							break;
						case 9:
						{
							this.match(9);
							IToken token4 = this.LT(1);
							this.match(47);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.UpdateTokenInfo(createFullTextCatalogStatement, token4);
								createFullTextCatalogStatement.IsDefault = true;
								goto IL_99E;
							}
							goto IL_99E;
						}
						default:
							switch (num3)
							{
							case 22:
							case 23:
								goto IL_99E;
							}
							break;
						}
					}
					else
					{
						if (num3 == 28)
						{
							goto IL_99E;
						}
						switch (num3)
						{
						case 33:
						case 35:
							goto IL_99E;
						case 34:
							break;
						default:
							switch (num3)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								goto IL_99E;
							}
							break;
						}
					}
				}
				else if (num3 <= 82)
				{
					switch (num3)
					{
					case 74:
					case 75:
						goto IL_99E;
					default:
						if (num3 == 82)
						{
							goto IL_99E;
						}
						break;
					}
				}
				else if (num3 == 86 || num3 == 92 || num3 == 95)
				{
					goto IL_99E;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 119)
				{
					if (num3 == 106 || num3 == 119)
					{
						goto IL_99E;
					}
				}
				else
				{
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_99E;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_99E;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num3)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_99E;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 191)
			{
				if (num3 == 176)
				{
					goto IL_99E;
				}
				switch (num3)
				{
				case 180:
				case 181:
					goto IL_99E;
				default:
					if (num3 == 191)
					{
						goto IL_99E;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_99E;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_99E;
				default:
					if (num3 == 232)
					{
						goto IL_99E;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_99E:
			this.authorizationOpt(createFullTextCatalogStatement);
			return createFullTextCatalogStatement;
		}

		// Token: 0x060015C8 RID: 5576 RVA: 0x0008E30C File Offset: 0x0008C50C
		public CreateFullTextIndexStatement createFulltextIndexStatement()
		{
			CreateFullTextIndexStatement createFullTextIndexStatement = base.FragmentFactory.CreateFragment<CreateFullTextIndexStatement>();
			this.match(84);
			this.match(105);
			SchemaObjectName onName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				createFullTextIndexStatement.OnName = onName;
				base.ThrowPartialAstIfPhaseOne(createFullTextIndexStatement);
			}
			int num = this.LA(1);
			if (num != 91)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(191);
				FullTextIndexColumn item = this.fulltextIndexColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexColumn>(createFullTextIndexStatement, createFullTextIndexStatement.FullTextIndexColumns, item);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					item = this.fulltextIndexColumn();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexColumn>(createFullTextIndexStatement, createFullTextIndexStatement.FullTextIndexColumns, item);
					}
				}
				this.match(192);
			}
			this.match(91);
			this.match(84);
			Identifier keyIndexName = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createFullTextIndexStatement.KeyIndexName = keyIndexName;
			}
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 28)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							goto IL_3BB;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_3BB;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_3BB;
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_3BB;
							default:
								if (num2 == 28)
								{
									goto IL_3BB;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 33:
					case 35:
						goto IL_3BB;
					case 34:
						break;
					default:
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_3BB;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								goto IL_3BB;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 82 || num2 == 86 || num2 == 92)
				{
					goto IL_3BB;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 119)
				{
					if (num2 == 95)
					{
						goto IL_3BB;
					}
					switch (num2)
					{
					case 105:
					{
						FullTextCatalogAndFileGroup catalogAndFileGroup = this.fullTextCatalogAndFileGroup();
						if (this.inputState.guessing == 0)
						{
							createFullTextIndexStatement.CatalogAndFileGroup = catalogAndFileGroup;
							goto IL_3BB;
						}
						goto IL_3BB;
					}
					case 106:
						goto IL_3BB;
					default:
						if (num2 == 119)
						{
							goto IL_3BB;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_3BB;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_3BB;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_3BB;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176)
				{
					goto IL_3BB;
				}
				switch (num2)
				{
				case 180:
				case 181:
					goto IL_3BB;
				default:
					if (num2 == 191)
					{
						goto IL_3BB;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_3BB;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_3BB;
				default:
					if (num2 == 232)
					{
						goto IL_3BB;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_3BB:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				ChangeTrackingFullTextIndexOption item2 = this.fulltextChangeTrackingOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexOption>(createFullTextIndexStatement, createFullTextIndexStatement.Options, item2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createFullTextIndexStatement;
		}

		// Token: 0x060015C9 RID: 5577 RVA: 0x0008E75C File Offset: 0x0008C95C
		public OnOffFullTextCatalogOption accentSensitivity()
		{
			OnOffFullTextCatalogOption onOffFullTextCatalogOption = base.FragmentFactory.CreateFragment<OnOffFullTextCatalogOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			OptionState optionState = this.optionOnOff(onOffFullTextCatalogOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ACCENT_SENSITIVITY");
				onOffFullTextCatalogOption.OptionKind = FullTextCatalogOptionKind.AccentSensitivity;
				onOffFullTextCatalogOption.OptionState = optionState;
			}
			return onOffFullTextCatalogOption;
		}

		// Token: 0x060015CA RID: 5578 RVA: 0x0008E7C4 File Offset: 0x0008C9C4
		public FullTextIndexColumn fulltextIndexColumn()
		{
			FullTextIndexColumn fullTextIndexColumn = base.FragmentFactory.CreateFragment<FullTextIndexColumn>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				fullTextIndexColumn.Name = identifier;
			}
			if (this.LA(1) == 232 && this.LA(2) == 27 && base.NextTokenMatches("TYPE"))
			{
				this.match(232);
				this.match(27);
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					fullTextIndexColumn.TypeColumn = identifier;
				}
			}
			else if ((this.LA(1) != 192 && this.LA(1) != 198 && this.LA(1) != 232) || !TSql90ParserInternal.tokenSet_57_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 232 && base.NextTokenMatches("LANGUAGE"))
			{
				IdentifierOrValueExpression languageTerm = this.languageTerm();
				if (this.inputState.guessing == 0)
				{
					fullTextIndexColumn.LanguageTerm = languageTerm;
				}
			}
			else if (this.LA(1) != 192 && this.LA(1) != 198)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return fullTextIndexColumn;
		}

		// Token: 0x060015CB RID: 5579 RVA: 0x0008E908 File Offset: 0x0008CB08
		public IdentifierOrValueExpression languageTerm()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LANGUAGE");
			}
			int num = this.LA(1);
			if (num != 221)
			{
				if (num != 224)
				{
					switch (num)
					{
					case 230:
					case 231:
					{
						Literal literal = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.CheckIfValidLanguageString(literal);
							identifierOrValueExpression.ValueExpression = literal;
						}
						break;
					}
					case 232:
					case 233:
					{
						Identifier identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.CheckIfValidLanguageIdentifier(identifier);
							identifierOrValueExpression.Identifier = identifier;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					Literal literal = this.binary();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.CheckIfValidLanguageHex(literal);
						identifierOrValueExpression.ValueExpression = literal;
					}
				}
			}
			else
			{
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckIfValidLanguageInteger(literal);
					identifierOrValueExpression.ValueExpression = literal;
				}
			}
			return identifierOrValueExpression;
		}

		// Token: 0x060015CC RID: 5580 RVA: 0x0008EA34 File Offset: 0x0008CC34
		public FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup()
		{
			FullTextCatalogAndFileGroup fullTextCatalogAndFileGroup = base.FragmentFactory.CreateFragment<FullTextCatalogAndFileGroup>();
			IToken token = this.LT(1);
			this.match(105);
			Identifier catalogName = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fullTextCatalogAndFileGroup, token);
				fullTextCatalogAndFileGroup.CatalogName = catalogName;
			}
			return fullTextCatalogAndFileGroup;
		}

		// Token: 0x060015CD RID: 5581 RVA: 0x0008EA84 File Offset: 0x0008CC84
		public ChangeTrackingFullTextIndexOption fulltextChangeTrackingOption()
		{
			ChangeTrackingFullTextIndexOption changeTrackingFullTextIndexOption = base.FragmentFactory.CreateFragment<ChangeTrackingFullTextIndexOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CHANGE_TRACKING");
				changeTrackingFullTextIndexOption.OptionKind = FullTextIndexOptionKind.ChangeTracking;
			}
			int num = this.LA(1);
			if (num == 103)
			{
				IToken token2 = this.LT(1);
				this.match(103);
				int num2 = this.LA(1);
				if (num2 <= 95)
				{
					if (num2 <= 35)
					{
						if (num2 <= 17)
						{
							if (num2 != 1)
							{
								switch (num2)
								{
								case 4:
								case 6:
									break;
								case 5:
									goto IL_39A;
								default:
									switch (num2)
									{
									case 12:
									case 13:
									case 15:
									case 17:
										break;
									case 14:
									case 16:
										goto IL_39A;
									default:
										goto IL_39A;
									}
									break;
								}
							}
						}
						else
						{
							switch (num2)
							{
							case 22:
							case 23:
								break;
							default:
								if (num2 != 28)
								{
									switch (num2)
									{
									case 33:
									case 35:
										break;
									case 34:
										goto IL_39A;
									default:
										goto IL_39A;
									}
								}
								break;
							}
						}
					}
					else if (num2 <= 82)
					{
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							break;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							goto IL_39A;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								break;
							default:
								if (num2 != 82)
								{
									goto IL_39A;
								}
								break;
							}
							break;
						}
					}
					else if (num2 != 86 && num2 != 92 && num2 != 95)
					{
						goto IL_39A;
					}
				}
				else if (num2 <= 176)
				{
					if (num2 <= 144)
					{
						if (num2 != 106 && num2 != 119)
						{
							switch (num2)
							{
							case 123:
							case 125:
							case 126:
							case 129:
							case 131:
							case 132:
							case 134:
							case 138:
							case 140:
							case 142:
							case 143:
							case 144:
								break;
							case 124:
							case 127:
							case 128:
							case 130:
							case 133:
							case 135:
							case 136:
							case 137:
							case 139:
							case 141:
								goto IL_39A;
							default:
								goto IL_39A;
							}
						}
					}
					else
					{
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							break;
						case 157:
						case 158:
						case 159:
							goto IL_39A;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								break;
							case 168:
							case 169:
								goto IL_39A;
							default:
								if (num2 != 176)
								{
									goto IL_39A;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 198)
				{
					switch (num2)
					{
					case 180:
					case 181:
						break;
					default:
						if (num2 != 191)
						{
							if (num2 != 198)
							{
								goto IL_39A;
							}
							this.match(198);
							IToken token3 = this.LT(1);
							this.match(232);
							IToken token4 = this.LT(1);
							this.match(232);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.Match(token3, "NO");
								TSql80ParserBaseInternal.Match(token4, "POPULATION");
								TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingFullTextIndexOption, token4);
								changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.OffNoPopulation;
								return changeTrackingFullTextIndexOption;
							}
							return changeTrackingFullTextIndexOption;
						}
						break;
					}
				}
				else if (num2 != 204)
				{
					switch (num2)
					{
					case 219:
					case 220:
						break;
					default:
						if (num2 != 232)
						{
							goto IL_39A;
						}
						break;
					}
				}
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingFullTextIndexOption, token2);
					changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.Off;
					return changeTrackingFullTextIndexOption;
				}
				return changeTrackingFullTextIndexOption;
				IL_39A:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token5 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(changeTrackingFullTextIndexOption, token5);
				if (TSql80ParserBaseInternal.TryMatch(token5, "MANUAL"))
				{
					changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.Manual;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token5, "AUTO");
					changeTrackingFullTextIndexOption.Value = ChangeTrackingOption.Auto;
				}
			}
			return changeTrackingFullTextIndexOption;
		}

		// Token: 0x060015CE RID: 5582 RVA: 0x0008EEA8 File Offset: 0x0008D0A8
		public CreateXmlIndexStatement createXmlIndexStatement(bool vPrimary)
		{
			CreateXmlIndexStatement createXmlIndexStatement = base.FragmentFactory.CreateFragment<CreateXmlIndexStatement>();
			createXmlIndexStatement.Primary = vPrimary;
			this.match(84);
			Identifier identifier = this.identifier();
			this.match(105);
			SchemaObjectName onName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				createXmlIndexStatement.Name = identifier;
				createXmlIndexStatement.OnName = onName;
				base.ThrowPartialAstIfPhaseOne(createXmlIndexStatement);
			}
			this.match(191);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createXmlIndexStatement.XmlColumn = identifier;
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createXmlIndexStatement, token);
			}
			if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)) || !vPrimary)
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "USING");
				}
				IToken token3 = this.LT(1);
				this.match(232);
				this.match(84);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "XML");
				}
				identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					createXmlIndexStatement.SecondaryXmlIndexName = identifier;
				}
				this.match(67);
				IToken token4 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					createXmlIndexStatement.SecondaryXmlIndexType = SecondaryXmlIndexTypeHelper.Instance.ParseOption(token4);
					TSql80ParserBaseInternal.UpdateTokenInfo(createXmlIndexStatement, token4);
				}
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.match(171);
				this.indexOptionList(IndexAffectingStatement.CreateXmlIndex, createXmlIndexStatement.IndexOptions, createXmlIndexStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return createXmlIndexStatement;
		}

		// Token: 0x060015CF RID: 5583 RVA: 0x0008F0F8 File Offset: 0x0008D2F8
		public CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement()
		{
			CreateXmlSchemaCollectionStatement createXmlSchemaCollectionStatement = base.FragmentFactory.CreateFragment<CreateXmlSchemaCollectionStatement>();
			this.match(139);
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName name = this.schemaObjectNonEmptyTwoPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "COLLECTION");
				createXmlSchemaCollectionStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createXmlSchemaCollectionStatement);
			}
			this.match(9);
			ScalarExpression expression = this.expression();
			if (this.inputState.guessing == 0)
			{
				createXmlSchemaCollectionStatement.Expression = expression;
			}
			return createXmlSchemaCollectionStatement;
		}

		// Token: 0x060015D0 RID: 5584 RVA: 0x0008F184 File Offset: 0x0008D384
		public SchemaObjectName schemaObjectNonEmptyTwoPartName()
		{
			SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
			Identifier item = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, item);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return schemaObjectName;
						}
						switch (num)
						{
						case 4:
						case 6:
							return schemaObjectName;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
							return schemaObjectName;
						case 10:
						case 11:
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return schemaObjectName;
							default:
								if (num == 28)
								{
									return schemaObjectName;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return schemaObjectName;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return schemaObjectName;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return schemaObjectName;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return schemaObjectName;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return schemaObjectName;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return schemaObjectName;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return schemaObjectName;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return schemaObjectName;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return schemaObjectName;
				}
				switch (num)
				{
				case 180:
				case 181:
					return schemaObjectName;
				default:
					if (num == 191)
					{
						return schemaObjectName;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 200:
					this.match(200);
					item = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, item);
						return schemaObjectName;
					}
					return schemaObjectName;
				case 201:
				case 202:
					break;
				case 203:
				case 204:
					return schemaObjectName;
				default:
					switch (num)
					{
					case 219:
					case 220:
						return schemaObjectName;
					default:
						if (num == 232)
						{
							return schemaObjectName;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060015D1 RID: 5585 RVA: 0x0008F484 File Offset: 0x0008D684
		public void indexOptionList(IndexAffectingStatement statement, IList<IndexOption> optionsList, TSqlFragment vParent)
		{
			this.match(191);
			IndexOption indexOption = this.indexOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.VerifyAllowedIndexOption(statement, indexOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, optionsList, indexOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				indexOption = this.indexOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.VerifyAllowedIndexOption(statement, indexOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, optionsList, indexOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x060015D2 RID: 5586 RVA: 0x0008F528 File Offset: 0x0008D728
		public PasswordCreateLoginSource passwordLoginSource()
		{
			PasswordCreateLoginSource passwordCreateLoginSource = base.FragmentFactory.CreateFragment<PasswordCreateLoginSource>();
			int num = 0;
			this.match(171);
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal password = this.loginPassword();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PASSWORD");
				passwordCreateLoginSource.Password = password;
			}
			while (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_42_.member(this.LA(2)))
			{
				this.createLoginPasswordOption(passwordCreateLoginSource);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				PrincipalOption principalOption = this.createLoginParam();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(passwordCreateLoginSource, passwordCreateLoginSource.Options, principalOption);
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)principalOption.OptionKind, principalOption);
				}
			}
			return passwordCreateLoginSource;
		}

		// Token: 0x060015D3 RID: 5587 RVA: 0x0008F60C File Offset: 0x0008D80C
		public WindowsCreateLoginSource windowsLoginSource()
		{
			WindowsCreateLoginSource windowsCreateLoginSource = base.FragmentFactory.CreateFragment<WindowsCreateLoginSource>();
			int num = 0;
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "WINDOWS");
				TSql80ParserBaseInternal.UpdateTokenInfo(windowsCreateLoginSource, token);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IdentifierPrincipalOption identifierPrincipalOption = this.createLoginParamWin();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(windowsCreateLoginSource, windowsCreateLoginSource.Options, identifierPrincipalOption);
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)identifierPrincipalOption.OptionKind, identifierPrincipalOption);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					identifierPrincipalOption = this.createLoginParamWin();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(windowsCreateLoginSource, windowsCreateLoginSource.Options, identifierPrincipalOption);
						TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)identifierPrincipalOption.OptionKind, identifierPrincipalOption);
					}
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return windowsCreateLoginSource;
		}

		// Token: 0x060015D4 RID: 5588 RVA: 0x0008F73C File Offset: 0x0008D93C
		public CertificateCreateLoginSource certificateLoginSource()
		{
			CertificateCreateLoginSource certificateCreateLoginSource = base.FragmentFactory.CreateFragment<CertificateCreateLoginSource>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier certificate = this.identifier();
			Identifier identifier = this.createLoginParamCertOpt();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				certificateCreateLoginSource.Certificate = certificate;
				if (identifier != null)
				{
					certificateCreateLoginSource.Credential = identifier;
				}
			}
			return certificateCreateLoginSource;
		}

		// Token: 0x060015D5 RID: 5589 RVA: 0x0008F7A4 File Offset: 0x0008D9A4
		public AsymmetricKeyCreateLoginSource asymmetricKeyLoginSource()
		{
			AsymmetricKeyCreateLoginSource asymmetricKeyCreateLoginSource = base.FragmentFactory.CreateFragment<AsymmetricKeyCreateLoginSource>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier key = this.identifier();
			Identifier identifier = this.createLoginParamCertOpt();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
				asymmetricKeyCreateLoginSource.Key = key;
				if (identifier != null)
				{
					asymmetricKeyCreateLoginSource.Credential = identifier;
				}
			}
			return asymmetricKeyCreateLoginSource;
		}

		// Token: 0x060015D6 RID: 5590 RVA: 0x0008F814 File Offset: 0x0008DA14
		public Literal loginPassword()
		{
			int num = this.LA(1);
			Literal result;
			if (num != 224)
			{
				switch (num)
				{
				case 230:
				case 231:
					result = this.stringLiteral();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				result = this.binary();
			}
			return result;
		}

		// Token: 0x060015D7 RID: 5591 RVA: 0x0008F870 File Offset: 0x0008DA70
		public void createLoginPasswordOption(PasswordCreateLoginSource vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "HASHED"))
				{
					if (vParent.Hashed)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					vParent.Hashed = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "MUST_CHANGE");
					if (vParent.MustChange)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					vParent.MustChange = true;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x060015D8 RID: 5592 RVA: 0x0008F8EC File Offset: 0x0008DAEC
		public PrincipalOption createLoginParam()
		{
			PrincipalOption principalOption = null;
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			switch (num)
			{
			case 103:
			case 105:
				principalOption = this.onOffPrincipalOption(token);
				goto IL_108;
			case 104:
				break;
			default:
				if (num != 224)
				{
					switch (num)
					{
					case 232:
					case 233:
					{
						Identifier identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
							identifierPrincipalOption.OptionKind = IdentifierCreateLoginOptionsHelper.Instance.ParseOption(token);
							identifierPrincipalOption.Identifier = identifier;
							principalOption = identifierPrincipalOption;
							goto IL_108;
						}
						goto IL_108;
					}
					}
				}
				else
				{
					Literal value = this.binary();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "SID");
						LiteralPrincipalOption literalPrincipalOption = base.FragmentFactory.CreateFragment<LiteralPrincipalOption>();
						literalPrincipalOption.OptionKind = PrincipalOptionKind.Sid;
						literalPrincipalOption.Value = value;
						principalOption = literalPrincipalOption;
						goto IL_108;
					}
					goto IL_108;
				}
				break;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_108:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(principalOption, token);
			}
			return principalOption;
		}

		// Token: 0x060015D9 RID: 5593 RVA: 0x0008FA18 File Offset: 0x0008DC18
		public BinaryLiteral binary()
		{
			BinaryLiteral binaryLiteral = base.FragmentFactory.CreateFragment<BinaryLiteral>();
			IToken token = this.LT(1);
			this.match(224);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(binaryLiteral, token);
				binaryLiteral.Value = token.getText();
				binaryLiteral.IsLargeObject = TSql80ParserBaseInternal.IsBinaryLiteralLob(binaryLiteral.Value);
			}
			return binaryLiteral;
		}

		// Token: 0x060015DA RID: 5594 RVA: 0x0008FA78 File Offset: 0x0008DC78
		public OnOffPrincipalOption onOffPrincipalOption(IToken tOption)
		{
			OnOffPrincipalOption onOffPrincipalOption = base.FragmentFactory.CreateFragment<OnOffPrincipalOption>();
			OptionState optionState = this.optionOnOff(onOffPrincipalOption);
			if (this.inputState.guessing == 0)
			{
				onOffPrincipalOption.OptionKind = SecurityLoginOptionsHelper.Instance.ParseOption(tOption);
				onOffPrincipalOption.OptionState = optionState;
			}
			return onOffPrincipalOption;
		}

		// Token: 0x060015DB RID: 5595 RVA: 0x0008FAC0 File Offset: 0x0008DCC0
		public IdentifierPrincipalOption createLoginParamWin()
		{
			IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				identifierPrincipalOption.OptionKind = IdentifierCreateLoginOptionsHelper.Instance.ParseOption(token);
				if (identifierPrincipalOption.OptionKind == PrincipalOptionKind.Credential)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				identifierPrincipalOption.Identifier = identifier;
			}
			return identifierPrincipalOption;
		}

		// Token: 0x060015DC RID: 5596 RVA: 0x0008FB38 File Offset: 0x0008DD38
		public Identifier createLoginParamCertOpt()
		{
			Identifier result = null;
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				result = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "CREDENTIAL");
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return result;
		}

		// Token: 0x060015DD RID: 5597 RVA: 0x0008FBEC File Offset: 0x0008DDEC
		public void messageTypeValidation(MessageTypeStatementBase vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "VALIDATION");
				vParent.ValidationMethod = MessageValidationMethodsHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
			if (this.LA(1) == 171 && this.LA(2) == 139)
			{
				IToken token3 = this.LT(1);
				this.match(171);
				this.match(139);
				IToken token4 = this.LT(1);
				this.match(232);
				SchemaObjectName xmlSchemaCollectionName = this.schemaObjectNonEmptyTwoPartName();
				if (this.inputState.guessing != 0)
				{
					return;
				}
				if (vParent.ValidationMethod != MessageValidationMethod.ValidXml)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token3);
				}
				TSql80ParserBaseInternal.Match(token4, "COLLECTION");
				vParent.XmlSchemaCollectionName = xmlSchemaCollectionName;
				return;
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x060015DE RID: 5598 RVA: 0x0008FD24 File Offset: 0x0008DF24
		public CreatePartitionFunctionStatement createPartitionFunction()
		{
			CreatePartitionFunctionStatement createPartitionFunctionStatement = base.FragmentFactory.CreateFragment<CreatePartitionFunctionStatement>();
			this.match(73);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				createPartitionFunctionStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(createPartitionFunctionStatement);
			}
			this.match(191);
			PartitionParameterType parameterType = this.partitionParameterType();
			if (this.inputState.guessing == 0)
			{
				createPartitionFunctionStatement.ParameterType = parameterType;
			}
			this.match(192);
			this.match(9);
			this.partitionFunctionTypes(createPartitionFunctionStatement);
			return createPartitionFunctionStatement;
		}

		// Token: 0x060015DF RID: 5599 RVA: 0x0008FDA8 File Offset: 0x0008DFA8
		public CreatePartitionSchemeStatement createPartitionScheme()
		{
			CreatePartitionSchemeStatement createPartitionSchemeStatement = base.FragmentFactory.CreateFragment<CreatePartitionSchemeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SCHEME");
				createPartitionSchemeStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(createPartitionSchemeStatement);
			}
			this.match(9);
			IToken token2 = this.LT(1);
			this.match(232);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "PARTITION");
				createPartitionSchemeStatement.PartitionFunction = identifier;
			}
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 151)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					createPartitionSchemeStatement.IsAll = true;
				}
			}
			this.match(151);
			this.match(191);
			IdentifierOrValueExpression item = this.stringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(createPartitionSchemeStatement, createPartitionSchemeStatement.FileGroups, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.stringOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(createPartitionSchemeStatement, createPartitionSchemeStatement.FileGroups, item);
				}
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createPartitionSchemeStatement, token3);
			}
			return createPartitionSchemeStatement;
		}

		// Token: 0x060015E0 RID: 5600 RVA: 0x0008FF34 File Offset: 0x0008E134
		public PartitionParameterType partitionParameterType()
		{
			PartitionParameterType partitionParameterType = base.FragmentFactory.CreateFragment<PartitionParameterType>();
			DataTypeReference dataType = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				partitionParameterType.DataType = dataType;
			}
			this.collationOpt(partitionParameterType);
			return partitionParameterType;
		}

		// Token: 0x060015E1 RID: 5601 RVA: 0x0008FF70 File Offset: 0x0008E170
		public void partitionFunctionTypes(CreatePartitionFunctionStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.partitionFunctionRange(vParent);
			this.match(67);
			this.match(164);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RANGE");
			}
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_218;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_218;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_218;
					}
				}
			}
			else if (num <= 141)
			{
				if (num != 133 && num != 136 && num != 141)
				{
					goto IL_218;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_218;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 192:
					goto IL_22B;
				case 194:
				case 195:
				case 196:
				case 198:
					goto IL_218;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_218;
					default:
						goto IL_218;
					}
					break;
				}
			}
			ScalarExpression item = this.expression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, vParent.BoundaryValues, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.expression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, vParent.BoundaryValues, item);
				}
			}
			goto IL_22B;
			IL_218:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_22B:
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x060015E2 RID: 5602 RVA: 0x000901D0 File Offset: 0x0008E3D0
		public void partitionFunctionRange(CreatePartitionFunctionStatement vParent)
		{
			int num = this.LA(1);
			if (num != 67)
			{
				if (num != 93)
				{
					if (num != 133)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(133);
					if (this.inputState.guessing == 0)
					{
						vParent.Range = PartitionFunctionRange.Right;
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
						return;
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(93);
					if (this.inputState.guessing == 0)
					{
						vParent.Range = PartitionFunctionRange.Left;
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
						return;
					}
				}
			}
		}

		// Token: 0x060015E3 RID: 5603 RVA: 0x0009026B File Offset: 0x0008E46B
		public void queueOptionList(QueueStatement vParent, bool vDropAccepted)
		{
			this.match(171);
			this.queueOption(vParent, vDropAccepted);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.queueOption(vParent, vDropAccepted);
			}
		}

		// Token: 0x060015E4 RID: 5604 RVA: 0x000902A4 File Offset: 0x0008E4A4
		public UserRemoteServiceBindingOption bindingUserOption()
		{
			UserRemoteServiceBindingOption userRemoteServiceBindingOption = base.FragmentFactory.CreateFragment<UserRemoteServiceBindingOption>();
			this.match(163);
			this.match(206);
			Identifier user = this.identifier();
			if (this.inputState.guessing == 0)
			{
				userRemoteServiceBindingOption.OptionKind = RemoteServiceBindingOptionKind.User;
				userRemoteServiceBindingOption.User = user;
			}
			return userRemoteServiceBindingOption;
		}

		// Token: 0x060015E5 RID: 5605 RVA: 0x000902F8 File Offset: 0x0008E4F8
		public OnOffRemoteServiceBindingOption bindingAnonymousOption()
		{
			OnOffRemoteServiceBindingOption onOffRemoteServiceBindingOption = base.FragmentFactory.CreateFragment<OnOffRemoteServiceBindingOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			OptionState optionState = this.optionOnOff(onOffRemoteServiceBindingOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ANONYMOUS");
				onOffRemoteServiceBindingOption.OptionKind = RemoteServiceBindingOptionKind.Anonymous;
				onOffRemoteServiceBindingOption.OptionState = optionState;
			}
			return onOffRemoteServiceBindingOption;
		}

		// Token: 0x060015E6 RID: 5606 RVA: 0x00090360 File Offset: 0x0008E560
		public void routeOptionList(RouteStatement vParent)
		{
			int num = 0;
			this.match(171);
			RouteOption routeOption = this.routeOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)routeOption.OptionKind, routeOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RouteOption>(vParent, vParent.RouteOptions, routeOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				routeOption = this.routeOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)routeOption.OptionKind, routeOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RouteOption>(vParent, vParent.RouteOptions, routeOption);
				}
			}
		}

		// Token: 0x060015E7 RID: 5607 RVA: 0x000903F4 File Offset: 0x0008E5F4
		public void onQueueClause(AlterCreateServiceStatementBase vParent)
		{
			this.match(105);
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUEUE");
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "QUEUE");
				vParent.QueueName = schemaObjectName;
			}
		}

		// Token: 0x060015E8 RID: 5608 RVA: 0x00090450 File Offset: 0x0008E650
		public ServiceContract serviceContract()
		{
			ServiceContract serviceContract = base.FragmentFactory.CreateFragment<ServiceContract>();
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				serviceContract.Name = name;
			}
			return serviceContract;
		}

		// Token: 0x060015E9 RID: 5609 RVA: 0x00090488 File Offset: 0x0008E688
		public AlterServiceStatement alterServiceStatement()
		{
			AlterServiceStatement alterServiceStatement = base.FragmentFactory.CreateFragment<AlterServiceStatement>();
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterServiceStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterServiceStatement);
			}
			int num = this.LA(1);
			if (num != 105)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.addDropServiceContractList(alterServiceStatement);
			}
			else
			{
				this.onQueueClause(alterServiceStatement);
				if (this.LA(1) == 191 && (this.LA(2) == 4 || this.LA(2) == 54))
				{
					this.addDropServiceContractList(alterServiceStatement);
				}
				else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return alterServiceStatement;
		}

		// Token: 0x060015EA RID: 5610 RVA: 0x00090564 File Offset: 0x0008E764
		public void addDropServiceContractList(AlterServiceStatement vParent)
		{
			this.match(191);
			ServiceContract item = this.addDropServiceContract();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ServiceContract>(vParent, vParent.ServiceContracts, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.addDropServiceContract();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ServiceContract>(vParent, vParent.ServiceContracts, item);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x060015EB RID: 5611 RVA: 0x00090604 File Offset: 0x0008E804
		public ServiceContract addDropServiceContract()
		{
			ServiceContract serviceContract = base.FragmentFactory.CreateFragment<ServiceContract>();
			int num = this.LA(1);
			if (num != 4)
			{
				if (num != 54)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(54);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(serviceContract, token);
					serviceContract.Action = AlterAction.Drop;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(4);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(serviceContract, token2);
					serviceContract.Action = AlterAction.Add;
				}
			}
			this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				serviceContract.Name = name;
			}
			return serviceContract;
		}

		// Token: 0x060015EC RID: 5612 RVA: 0x000906D0 File Offset: 0x0008E8D0
		public void keySpecList(CreateSymmetricKeyStatement vParent)
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			KeyOption item = this.keySpec(ref flag, ref flag2, ref flag3);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<KeyOption>(vParent, vParent.KeyOptions, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.keySpec(ref flag, ref flag2, ref flag3);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<KeyOption>(vParent, vParent.KeyOptions, item);
				}
			}
		}

		// Token: 0x060015ED RID: 5613 RVA: 0x0009074C File Offset: 0x0008E94C
		public void encryptorListWithNoPassword(SymmetricKeyStatement vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(18);
			CryptoMechanism item = this.cryptoWithNoPasswordOrJustPassword();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENCRYPTION");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CryptoMechanism>(vParent, vParent.EncryptingMechanisms, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.cryptoWithNoPasswordOrJustPassword();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CryptoMechanism>(vParent, vParent.EncryptingMechanisms, item);
				}
			}
		}

		// Token: 0x060015EE RID: 5614 RVA: 0x000907E0 File Offset: 0x0008E9E0
		public KeyOption keySpec(ref bool keySourceSpecified, ref bool algorithmSpecified, ref bool identityValueSpecified)
		{
			KeyOption result;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("KEY_SOURCE"))
			{
				result = this.keySourceKeySpec(ref keySourceSpecified);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ALGORITHM"))
			{
				result = this.algorithmKeySpec(ref algorithmSpecified);
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.identityValueKeySpec(ref identityValueSpecified);
			}
			return result;
		}

		// Token: 0x060015EF RID: 5615 RVA: 0x00090890 File Offset: 0x0008EA90
		public KeySourceKeyOption keySourceKeySpec(ref bool keySourceSpecified)
		{
			KeySourceKeyOption keySourceKeyOption = base.FragmentFactory.CreateFragment<KeySourceKeyOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal passPhrase = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "KEY_SOURCE");
				keySourceKeyOption.OptionKind = KeyOptionKind.KeySource;
				if (keySourceSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				keySourceSpecified = true;
				TSql80ParserBaseInternal.UpdateTokenInfo(keySourceKeyOption, token);
				keySourceKeyOption.PassPhrase = passPhrase;
			}
			return keySourceKeyOption;
		}

		// Token: 0x060015F0 RID: 5616 RVA: 0x0009090C File Offset: 0x0008EB0C
		public AlgorithmKeyOption algorithmKeySpec(ref bool algorithmSpecified)
		{
			AlgorithmKeyOption algorithmKeyOption = base.FragmentFactory.CreateFragment<AlgorithmKeyOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ALGORITHM");
				algorithmKeyOption.OptionKind = KeyOptionKind.Algorithm;
				if (algorithmSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				algorithmSpecified = true;
				algorithmKeyOption.Algorithm = EncryptionAlgorithmsHelper.Instance.ParseOption(token2);
				TSql80ParserBaseInternal.UpdateTokenInfo(algorithmKeyOption, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(algorithmKeyOption, token2);
			}
			return algorithmKeyOption;
		}

		// Token: 0x060015F1 RID: 5617 RVA: 0x000909A8 File Offset: 0x0008EBA8
		public IdentityValueKeyOption identityValueKeySpec(ref bool identityValueSpecified)
		{
			IdentityValueKeyOption identityValueKeyOption = base.FragmentFactory.CreateFragment<IdentityValueKeyOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal identityPhrase = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "IDENTITY_VALUE");
				identityValueKeyOption.OptionKind = KeyOptionKind.IdentityValue;
				if (identityValueSpecified)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				identityValueSpecified = true;
				TSql80ParserBaseInternal.UpdateTokenInfo(identityValueKeyOption, token);
				identityValueKeyOption.IdentityPhrase = identityPhrase;
			}
			return identityValueKeyOption;
		}

		// Token: 0x060015F2 RID: 5618 RVA: 0x00090A24 File Offset: 0x0008EC24
		public CryptoMechanism cryptoWithNoPasswordOrJustPassword()
		{
			CryptoMechanism result;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				result = this.certificateCrypto();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				result = this.keyCrypto();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.passwordCrypto();
			}
			return result;
		}

		// Token: 0x060015F3 RID: 5619 RVA: 0x00090AC4 File Offset: 0x0008ECC4
		public CryptoMechanism certificateCrypto()
		{
			CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				cryptoMechanism.Identifier = identifier;
				cryptoMechanism.CryptoMechanismType = CryptoMechanismType.Certificate;
			}
			return cryptoMechanism;
		}

		// Token: 0x060015F4 RID: 5620 RVA: 0x00090B20 File Offset: 0x0008ED20
		public CryptoMechanism keyCrypto()
		{
			CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "SYMMETRIC"))
				{
					cryptoMechanism.CryptoMechanismType = CryptoMechanismType.SymmetricKey;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
					cryptoMechanism.CryptoMechanismType = CryptoMechanismType.AsymmetricKey;
				}
				cryptoMechanism.Identifier = identifier;
			}
			return cryptoMechanism;
		}

		// Token: 0x060015F5 RID: 5621 RVA: 0x00090B9C File Offset: 0x0008ED9C
		public CryptoMechanism passwordCrypto()
		{
			CryptoMechanism cryptoMechanism = base.FragmentFactory.CreateFragment<CryptoMechanism>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal passwordOrSignature = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PASSWORD");
				cryptoMechanism.PasswordOrSignature = passwordOrSignature;
				cryptoMechanism.CryptoMechanismType = CryptoMechanismType.Password;
			}
			return cryptoMechanism;
		}

		// Token: 0x060015F6 RID: 5622 RVA: 0x00090C04 File Offset: 0x0008EE04
		public AlterSymmetricKeyStatement alterSymmetricKeyStatement()
		{
			AlterSymmetricKeyStatement alterSymmetricKeyStatement = base.FragmentFactory.CreateFragment<AlterSymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
				alterSymmetricKeyStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterSymmetricKeyStatement);
			}
			int num = this.LA(1);
			if (num != 4)
			{
				if (num != 54)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(54);
				if (this.inputState.guessing == 0)
				{
					alterSymmetricKeyStatement.IsAdd = false;
				}
			}
			else
			{
				this.match(4);
				if (this.inputState.guessing == 0)
				{
					alterSymmetricKeyStatement.IsAdd = true;
				}
			}
			this.encryptorListWithNoPassword(alterSymmetricKeyStatement);
			return alterSymmetricKeyStatement;
		}

		// Token: 0x060015F7 RID: 5623 RVA: 0x00090CD0 File Offset: 0x0008EED0
		public CreateTypeUddtStatement createTypeUddtStatement()
		{
			CreateTypeUddtStatement createTypeUddtStatement = base.FragmentFactory.CreateFragment<CreateTypeUddtStatement>();
			IToken token = this.LT(1);
			this.match(71);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTypeUddtStatement, token);
				base.ThrowPartialAstIfPhaseOne(createTypeUddtStatement);
			}
			DataTypeReference dataType = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				createTypeUddtStatement.DataType = dataType;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return createTypeUddtStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return createTypeUddtStatement;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return createTypeUddtStatement;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return createTypeUddtStatement;
						default:
							if (num == 28)
							{
								return createTypeUddtStatement;
							}
							switch (num)
							{
							case 33:
							case 35:
								return createTypeUddtStatement;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return createTypeUddtStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return createTypeUddtStatement;
						default:
							if (num == 82)
							{
								return createTypeUddtStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return createTypeUddtStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					switch (num)
					{
					case 99:
					case 100:
					{
						NullableConstraintDefinition nullableConstraint = this.nullableConstraint();
						if (this.inputState.guessing == 0)
						{
							createTypeUddtStatement.NullableConstraint = nullableConstraint;
							return createTypeUddtStatement;
						}
						return createTypeUddtStatement;
					}
					default:
						if (num == 106 || num == 119)
						{
							return createTypeUddtStatement;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return createTypeUddtStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return createTypeUddtStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return createTypeUddtStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return createTypeUddtStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return createTypeUddtStatement;
				default:
					if (num == 191)
					{
						return createTypeUddtStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return createTypeUddtStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return createTypeUddtStatement;
				default:
					if (num == 232)
					{
						return createTypeUddtStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060015F8 RID: 5624 RVA: 0x00090FEC File Offset: 0x0008F1EC
		public CreateTypeUdtStatement createTypeUdtStatement()
		{
			CreateTypeUdtStatement createTypeUdtStatement = base.FragmentFactory.CreateFragment<CreateTypeUdtStatement>();
			IToken token = this.LT(1);
			this.match(175);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(createTypeUdtStatement, token);
				base.ThrowPartialAstIfPhaseOne(createTypeUdtStatement);
			}
			AssemblyName assemblyName = this.assemblyName();
			if (this.inputState.guessing == 0)
			{
				createTypeUdtStatement.AssemblyName = assemblyName;
			}
			return createTypeUdtStatement;
		}

		// Token: 0x060015F9 RID: 5625 RVA: 0x00091054 File Offset: 0x0008F254
		public NullableConstraintDefinition nullableConstraint()
		{
			NullableConstraintDefinition nullableConstraintDefinition = base.FragmentFactory.CreateFragment<NullableConstraintDefinition>();
			bool nullable = this.nullNotNull(nullableConstraintDefinition);
			if (this.inputState.guessing == 0)
			{
				nullableConstraintDefinition.Nullable = nullable;
			}
			return nullableConstraintDefinition;
		}

		// Token: 0x060015FA RID: 5626 RVA: 0x0009108C File Offset: 0x0008F28C
		public UserLoginOption userLoginOption()
		{
			UserLoginOption userLoginOption = base.FragmentFactory.CreateFragment<UserLoginOption>();
			int num = this.LA(1);
			if (num != 67 && num != 71)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "WITHOUT");
					TSql80ParserBaseInternal.Match(token2, "LOGIN");
					TSql80ParserBaseInternal.UpdateTokenInfo(userLoginOption, token2);
					userLoginOption.UserLoginOptionType = UserLoginOptionType.WithoutLogin;
				}
			}
			else
			{
				int num2 = this.LA(1);
				if (num2 != 67)
				{
					if (num2 != 71)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(71);
				}
				else
				{
					this.match(67);
				}
				if (this.LA(1) == 232 && this.LA(2) == 91)
				{
					IToken token3 = this.LT(1);
					this.match(232);
					this.match(91);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "ASYMMETRIC");
						userLoginOption.UserLoginOptionType = UserLoginOptionType.AsymmetricKey;
					}
				}
				else
				{
					if (this.LA(1) != 232 || (this.LA(2) != 232 && this.LA(2) != 233))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token4 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						userLoginOption.UserLoginOptionType = UserLoginOptionHelper.Instance.ParseOption(token4);
					}
				}
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					userLoginOption.Identifier = identifier;
				}
			}
			return userLoginOption;
		}

		// Token: 0x060015FB RID: 5627 RVA: 0x0009126C File Offset: 0x0008F46C
		public void createUserDefaultSchemaOpt(CreateUserStatement vParent)
		{
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "DEFAULT_SCHEMA");
					IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
					identifierPrincipalOption.OptionKind = PrincipalOptionKind.DefaultSchema;
					identifierPrincipalOption.Identifier = identifier;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(vParent, vParent.UserOptions, identifierPrincipalOption);
					return;
				}
				return;
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x060015FC RID: 5628 RVA: 0x00091344 File Offset: 0x0008F544
		public AlterApplicationRoleStatement alterApplicationRoleStatement()
		{
			AlterApplicationRoleStatement alterApplicationRoleStatement = base.FragmentFactory.CreateFragment<AlterApplicationRoleStatement>();
			this.applicationRoleStatement(alterApplicationRoleStatement, false);
			return alterApplicationRoleStatement;
		}

		// Token: 0x060015FD RID: 5629 RVA: 0x00091368 File Offset: 0x0008F568
		public AlterAssemblyStatement alterAssemblyStatement()
		{
			AlterAssemblyStatement alterAssemblyStatement = base.FragmentFactory.CreateFragment<AlterAssemblyStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(232);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
				alterAssemblyStatement.Name = identifier;
				base.ThrowPartialAstIfPhaseOne(alterAssemblyStatement);
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_310;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_310;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_310;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								goto IL_310;
							default:
								if (num == 28)
								{
									goto IL_310;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						goto IL_310;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_310;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 71:
							{
								ScalarExpression item = this.alterAssemblyFromClause();
								if (this.inputState.guessing == 0)
								{
									TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(alterAssemblyStatement, alterAssemblyStatement.Parameters, item);
									flag = true;
									goto IL_310;
								}
								goto IL_310;
							}
							case 74:
							case 75:
								goto IL_310;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_310;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						goto IL_310;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_310;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_310;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_310;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_310;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_310;
				default:
					if (num == 191)
					{
						goto IL_310;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_310;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_310;
				default:
					if (num == 232)
					{
						goto IL_310;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_310:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.alterAssemblyWith(alterAssemblyStatement);
				if (this.inputState.guessing == 0)
				{
					flag = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			bool flag2 = false;
			if (this.LA(1) == 54 && this.LA(2) == 65)
			{
				int pos = this.mark();
				flag2 = true;
				this.inputState.guessing++;
				try
				{
					this.match(54);
					this.match(65);
				}
				catch (RecognitionException)
				{
					flag2 = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag2)
			{
				this.alterAssemblyDropFile(alterAssemblyStatement);
				if (this.inputState.guessing == 0)
				{
					flag = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 4 && this.LA(2) == 65)
			{
				this.alterAssemblyAddFile(alterAssemblyStatement);
				if (this.inputState.guessing == 0)
				{
					flag = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0 && !flag)
			{
				throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(identifier);
			}
			return alterAssemblyStatement;
		}

		// Token: 0x060015FE RID: 5630 RVA: 0x00091844 File Offset: 0x0008FA44
		public AlterAsymmetricKeyStatement alterAsymmetricKeyStatement()
		{
			AlterAsymmetricKeyStatement alterAsymmetricKeyStatement = base.FragmentFactory.CreateFragment<AlterAsymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
				alterAsymmetricKeyStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterAsymmetricKeyStatement);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "REMOVE");
				}
				if (this.LA(1) == 232 && this.LA(2) == 91)
				{
					IToken token3 = this.LT(1);
					this.match(232);
					IToken token4 = this.LT(1);
					this.match(91);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "PRIVATE");
						alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.RemovePrivateKey;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterAsymmetricKeyStatement, token4);
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 111)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token5 = this.LT(1);
					this.match(232);
					IToken token6 = this.LT(1);
					this.match(111);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token5, "ATTESTED");
						alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.RemoveAttestedOption;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterAsymmetricKeyStatement, token6);
					}
				}
			}
			else if (this.LA(1) == 171)
			{
				this.match(171);
				IToken token7 = this.LT(1);
				this.match(232);
				this.match(91);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token7, "PRIVATE");
					alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.WithPrivateKey;
				}
				this.match(191);
				this.passwordChangeOption(alterAsymmetricKeyStatement);
				while (this.LA(1) == 198)
				{
					this.match(198);
					this.passwordChangeOption(alterAsymmetricKeyStatement);
				}
				IToken token8 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(alterAsymmetricKeyStatement, token8);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 18)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.LT(1);
				this.match(232);
				this.match(18);
				Literal attestedBy = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					alterAsymmetricKeyStatement.AttestedBy = attestedBy;
					alterAsymmetricKeyStatement.Kind = AlterCertificateStatementKind.AttestedBy;
				}
			}
			return alterAsymmetricKeyStatement;
		}

		// Token: 0x060015FF RID: 5631 RVA: 0x00091B1C File Offset: 0x0008FD1C
		public AlterAuthorizationStatement alterAuthorizationStatement()
		{
			AlterAuthorizationStatement alterAuthorizationStatement = base.FragmentFactory.CreateFragment<AlterAuthorizationStatement>();
			this.match(11);
			SecurityTargetObject securityTargetObject = this.authorizationTargetObject();
			if (this.inputState.guessing == 0)
			{
				alterAuthorizationStatement.SecurityTargetObject = securityTargetObject;
			}
			this.match(151);
			int num = this.LA(1);
			if (num != 139)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier principalName = this.identifier();
					if (this.inputState.guessing == 0)
					{
						alterAuthorizationStatement.PrincipalName = principalName;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(139);
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "OWNER");
					TSql80ParserBaseInternal.UpdateTokenInfo(alterAuthorizationStatement, token);
					alterAuthorizationStatement.ToSchemaOwner = true;
				}
			}
			return alterAuthorizationStatement;
		}

		// Token: 0x06001600 RID: 5632 RVA: 0x00091C08 File Offset: 0x0008FE08
		public AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement()
		{
			AlterRemoteServiceBindingStatement alterRemoteServiceBindingStatement = base.FragmentFactory.CreateFragment<AlterRemoteServiceBindingStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REMOTE");
				TSql80ParserBaseInternal.Match(token2, "SERVICE");
				TSql80ParserBaseInternal.Match(token3, "BINDING");
				alterRemoteServiceBindingStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterRemoteServiceBindingStatement);
			}
			this.match(171);
			int num = this.LA(1);
			RemoteServiceBindingOption item;
			if (num == 163)
			{
				item = this.bindingUserOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, item);
				}
				int num2 = this.LA(1);
				if (num2 <= 95)
				{
					if (num2 <= 35)
					{
						if (num2 <= 17)
						{
							if (num2 == 1)
							{
								return alterRemoteServiceBindingStatement;
							}
							switch (num2)
							{
							case 4:
							case 6:
								return alterRemoteServiceBindingStatement;
							case 5:
								break;
							default:
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									return alterRemoteServiceBindingStatement;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 22:
							case 23:
								return alterRemoteServiceBindingStatement;
							default:
								if (num2 == 28)
								{
									return alterRemoteServiceBindingStatement;
								}
								switch (num2)
								{
								case 33:
								case 35:
									return alterRemoteServiceBindingStatement;
								}
								break;
							}
						}
					}
					else if (num2 <= 82)
					{
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return alterRemoteServiceBindingStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								return alterRemoteServiceBindingStatement;
							default:
								if (num2 == 82)
								{
									return alterRemoteServiceBindingStatement;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 86 || num2 == 92 || num2 == 95)
					{
						return alterRemoteServiceBindingStatement;
					}
				}
				else if (num2 <= 176)
				{
					if (num2 <= 144)
					{
						if (num2 == 106 || num2 == 119)
						{
							return alterRemoteServiceBindingStatement;
						}
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return alterRemoteServiceBindingStatement;
						}
					}
					else
					{
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return alterRemoteServiceBindingStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return alterRemoteServiceBindingStatement;
							case 168:
							case 169:
								break;
							default:
								if (num2 == 176)
								{
									return alterRemoteServiceBindingStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 198)
				{
					switch (num2)
					{
					case 180:
					case 181:
						return alterRemoteServiceBindingStatement;
					default:
						if (num2 == 191)
						{
							return alterRemoteServiceBindingStatement;
						}
						if (num2 == 198)
						{
							this.match(198);
							item = this.bindingAnonymousOption();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, item);
								return alterRemoteServiceBindingStatement;
							}
							return alterRemoteServiceBindingStatement;
						}
						break;
					}
				}
				else
				{
					if (num2 == 204)
					{
						return alterRemoteServiceBindingStatement;
					}
					switch (num2)
					{
					case 219:
					case 220:
						return alterRemoteServiceBindingStatement;
					default:
						if (num2 == 232)
						{
							return alterRemoteServiceBindingStatement;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 232)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			item = this.bindingAnonymousOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, item);
			}
			int num3 = this.LA(1);
			if (num3 <= 95)
			{
				if (num3 <= 35)
				{
					if (num3 <= 17)
					{
						if (num3 == 1)
						{
							return alterRemoteServiceBindingStatement;
						}
						switch (num3)
						{
						case 4:
						case 6:
							return alterRemoteServiceBindingStatement;
						case 5:
							break;
						default:
							switch (num3)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return alterRemoteServiceBindingStatement;
							}
							break;
						}
					}
					else
					{
						switch (num3)
						{
						case 22:
						case 23:
							return alterRemoteServiceBindingStatement;
						default:
							if (num3 == 28)
							{
								return alterRemoteServiceBindingStatement;
							}
							switch (num3)
							{
							case 33:
							case 35:
								return alterRemoteServiceBindingStatement;
							}
							break;
						}
					}
				}
				else if (num3 <= 82)
				{
					switch (num3)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return alterRemoteServiceBindingStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num3)
						{
						case 74:
						case 75:
							return alterRemoteServiceBindingStatement;
						default:
							if (num3 == 82)
							{
								return alterRemoteServiceBindingStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 86 || num3 == 92 || num3 == 95)
				{
					return alterRemoteServiceBindingStatement;
				}
			}
			else if (num3 <= 176)
			{
				if (num3 <= 144)
				{
					if (num3 == 106 || num3 == 119)
					{
						return alterRemoteServiceBindingStatement;
					}
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterRemoteServiceBindingStatement;
					}
				}
				else
				{
					switch (num3)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return alterRemoteServiceBindingStatement;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num3)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return alterRemoteServiceBindingStatement;
						case 168:
						case 169:
							break;
						default:
							if (num3 == 176)
							{
								return alterRemoteServiceBindingStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 198)
			{
				switch (num3)
				{
				case 180:
				case 181:
					return alterRemoteServiceBindingStatement;
				default:
					if (num3 == 191)
					{
						return alterRemoteServiceBindingStatement;
					}
					if (num3 == 198)
					{
						this.match(198);
						item = this.bindingUserOption();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RemoteServiceBindingOption>(alterRemoteServiceBindingStatement, alterRemoteServiceBindingStatement.Options, item);
							return alterRemoteServiceBindingStatement;
						}
						return alterRemoteServiceBindingStatement;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					return alterRemoteServiceBindingStatement;
				}
				switch (num3)
				{
				case 219:
				case 220:
					return alterRemoteServiceBindingStatement;
				default:
					if (num3 == 232)
					{
						return alterRemoteServiceBindingStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001601 RID: 5633 RVA: 0x000922D4 File Offset: 0x000904D4
		public AlterCertificateStatement alterCertificateStatement()
		{
			AlterCertificateStatement alterCertificateStatement = base.FragmentFactory.CreateFragment<AlterCertificateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				alterCertificateStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterCertificateStatement);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "REMOVE");
				}
				if (this.LA(1) == 232 && this.LA(2) == 91)
				{
					IToken token3 = this.LT(1);
					this.match(232);
					IToken token4 = this.LT(1);
					this.match(91);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "PRIVATE");
						alterCertificateStatement.Kind = AlterCertificateStatementKind.RemovePrivateKey;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterCertificateStatement, token4);
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 111)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token5 = this.LT(1);
					this.match(232);
					IToken token6 = this.LT(1);
					this.match(111);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token5, "ATTESTED");
						alterCertificateStatement.Kind = AlterCertificateStatementKind.RemoveAttestedOption;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterCertificateStatement, token6);
					}
				}
			}
			else if (this.LA(1) == 171)
			{
				this.match(171);
				if (this.LA(1) == 232 && this.LA(2) == 91)
				{
					this.privateKeySpec(alterCertificateStatement);
					if (this.inputState.guessing == 0)
					{
						alterCertificateStatement.Kind = AlterCertificateStatementKind.WithPrivateKey;
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 67)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.createCertificateActivityFlag(alterCertificateStatement);
					if (this.inputState.guessing == 0)
					{
						alterCertificateStatement.Kind = AlterCertificateStatementKind.WithActiveForBeginDialog;
					}
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 18)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token7 = this.LT(1);
				this.match(232);
				this.match(18);
				Literal attestedBy = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token7, "ATTESTED");
					alterCertificateStatement.Kind = AlterCertificateStatementKind.AttestedBy;
					alterCertificateStatement.AttestedBy = attestedBy;
				}
			}
			return alterCertificateStatement;
		}

		// Token: 0x06001602 RID: 5634 RVA: 0x000925A0 File Offset: 0x000907A0
		public AlterCredentialStatement alterCredentialStatement()
		{
			AlterCredentialStatement alterCredentialStatement = base.FragmentFactory.CreateFragment<AlterCredentialStatement>();
			this.credentialStatementBody(alterCredentialStatement);
			return alterCredentialStatement;
		}

		// Token: 0x06001603 RID: 5635 RVA: 0x000925C4 File Offset: 0x000907C4
		public AlterEndpointStatement alterEndpointStatement()
		{
			AlterEndpointStatement alterEndpointStatement = base.FragmentFactory.CreateFragment<AlterEndpointStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENDPOINT");
				alterEndpointStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterEndpointStatement);
			}
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				this.endpointOptions(alterEndpointStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_58_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_332;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_332;
						case 5:
							break;
						default:
							switch (num)
							{
							case 9:
								this.protocolInfo(alterEndpointStatement);
								goto IL_332;
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_332;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_332;
						default:
							if (num == 28)
							{
								goto IL_332;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_332;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_332;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num == 67)
						{
							goto IL_332;
						}
						switch (num)
						{
						case 74:
						case 75:
							goto IL_332;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_332;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						goto IL_332;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_332;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_332;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_332;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_332;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_332;
				default:
					if (num == 191)
					{
						goto IL_332;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_332;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_332;
				default:
					if (num == 232)
					{
						goto IL_332;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_332:
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						if (num2 == 1)
						{
							return alterEndpointStatement;
						}
						switch (num2)
						{
						case 4:
						case 6:
							return alterEndpointStatement;
						case 5:
							break;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return alterEndpointStatement;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							return alterEndpointStatement;
						default:
							if (num2 == 28)
							{
								return alterEndpointStatement;
							}
							switch (num2)
							{
							case 33:
							case 35:
								return alterEndpointStatement;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return alterEndpointStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						if (num2 == 67)
						{
							this.payloadInfo(alterEndpointStatement);
							return alterEndpointStatement;
						}
						switch (num2)
						{
						case 74:
						case 75:
							return alterEndpointStatement;
						}
						break;
					}
				}
				else if (num2 == 82 || num2 == 86 || num2 == 92)
				{
					return alterEndpointStatement;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 119)
				{
					if (num2 == 95 || num2 == 106 || num2 == 119)
					{
						return alterEndpointStatement;
					}
				}
				else
				{
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterEndpointStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return alterEndpointStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num2)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return alterEndpointStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176)
				{
					return alterEndpointStatement;
				}
				switch (num2)
				{
				case 180:
				case 181:
					return alterEndpointStatement;
				default:
					if (num2 == 191)
					{
						return alterEndpointStatement;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					return alterEndpointStatement;
				}
				switch (num2)
				{
				case 219:
				case 220:
					return alterEndpointStatement;
				default:
					if (num2 == 232)
					{
						return alterEndpointStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001604 RID: 5636 RVA: 0x00092BA0 File Offset: 0x00090DA0
		public TSqlStatement alterFulltextStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FULLTEXT");
			}
			int num = this.LA(1);
			TSqlStatement result;
			if (num != 84)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.alterFulltextCatalogStatement();
			}
			else
			{
				result = this.alterFulltextIndexStatement();
			}
			return result;
		}

		// Token: 0x06001605 RID: 5637 RVA: 0x00092C18 File Offset: 0x00090E18
		public AlterIndexStatement alterIndexStatement()
		{
			AlterIndexStatement alterIndexStatement = base.FragmentFactory.CreateFragment<AlterIndexStatement>();
			IndexAffectingStatement statement = IndexAffectingStatement.AlterIndexSet;
			this.match(84);
			int num = this.LA(1);
			if (num != 5)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier name = this.identifier();
					if (this.inputState.guessing == 0)
					{
						alterIndexStatement.Name = name;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					alterIndexStatement.All = true;
				}
			}
			this.match(105);
			SchemaObjectName onName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				alterIndexStatement.OnName = onName;
			}
			if (this.LA(1) == 142)
			{
				this.match(142);
				this.indexOptionList(statement, alterIndexStatement.IndexOptions, alterIndexStatement);
				if (this.inputState.guessing == 0)
				{
					alterIndexStatement.AlterIndexType = AlterIndexType.Set;
				}
			}
			else if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_17_.member(this.LA(2)) && base.NextTokenMatches("DISABLE"))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					alterIndexStatement.AlterIndexType = AlterIndexType.Disable;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterIndexStatement, token);
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_17_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					alterIndexStatement.AlterIndexType = AlterIndexTypeHelper.Instance.ParseOption(token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(alterIndexStatement, token2);
				}
				if (this.LA(1) == 232 && this.LA(2) == 206)
				{
					PartitionSpecifier partition = this.partitionSpecifier();
					if (this.inputState.guessing == 0)
					{
						alterIndexStatement.Partition = partition;
					}
				}
				else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (this.inputState.guessing == 0)
				{
					statement = TSql90ParserBaseInternal.GetAlterIndexStatementKind(alterIndexStatement);
				}
				if (this.LA(1) == 171 && this.LA(2) == 191)
				{
					this.match(171);
					this.indexOptionList(statement, alterIndexStatement.IndexOptions, alterIndexStatement);
				}
				else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return alterIndexStatement;
		}

		// Token: 0x06001606 RID: 5638 RVA: 0x00092EEC File Offset: 0x000910EC
		public AlterLoginStatement alterLoginStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			Identifier vName = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LOGIN");
			}
			int num = this.LA(1);
			AlterLoginStatement result;
			if (num != 171)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.alterLoginEnableDisable(vName);
			}
			else
			{
				result = this.alterLoginOptions(vName);
			}
			return result;
		}

		// Token: 0x06001607 RID: 5639 RVA: 0x00092F70 File Offset: 0x00091170
		public AlterMasterKeyStatement alterMasterKeyStatement()
		{
			AlterMasterKeyStatement alterMasterKeyStatement = base.FragmentFactory.CreateFragment<AlterMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
			}
			int num = this.LA(1);
			if (num != 4)
			{
				if (num != 54)
				{
					if (this.LA(1) == 232 && this.LA(2) == 171)
					{
						IToken token2 = this.LT(1);
						this.match(232);
						this.match(171);
						IToken token3 = this.LT(1);
						this.match(232);
						this.match(18);
						IToken token4 = this.LT(1);
						this.match(232);
						this.match(206);
						Literal password = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "REGENERATE");
							TSql80ParserBaseInternal.Match(token3, "ENCRYPTION");
							TSql80ParserBaseInternal.Match(token4, "PASSWORD");
							alterMasterKeyStatement.Option = AlterMasterKeyOption.Regenerate;
							alterMasterKeyStatement.Password = password;
						}
					}
					else
					{
						if (this.LA(1) != 232 || this.LA(2) != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token5 = this.LT(1);
						this.match(232);
						IToken token6 = this.LT(1);
						this.match(232);
						this.match(171);
						IToken token7 = this.LT(1);
						this.match(232);
						this.match(18);
						IToken token8 = this.LT(1);
						this.match(232);
						this.match(206);
						Literal password = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token5, "FORCE");
							TSql80ParserBaseInternal.Match(token6, "REGENERATE");
							TSql80ParserBaseInternal.Match(token7, "ENCRYPTION");
							TSql80ParserBaseInternal.Match(token8, "PASSWORD");
							alterMasterKeyStatement.Option = AlterMasterKeyOption.ForceRegenerate;
							alterMasterKeyStatement.Password = password;
						}
					}
				}
				else
				{
					this.match(54);
					IToken token9 = this.LT(1);
					this.match(232);
					this.match(18);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token9, "ENCRYPTION");
					}
					if (this.LA(1) == 232 && this.LA(2) == 232)
					{
						IToken token10 = this.LT(1);
						this.match(232);
						IToken token11 = this.LT(1);
						this.match(232);
						IToken token12 = this.LT(1);
						this.match(91);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token10, "SERVICE");
							TSql80ParserBaseInternal.Match(token11, "MASTER");
							alterMasterKeyStatement.Option = AlterMasterKeyOption.DropEncryptionByServiceMasterKey;
							TSql80ParserBaseInternal.UpdateTokenInfo(alterMasterKeyStatement, token12);
						}
					}
					else
					{
						if (this.LA(1) != 232 || this.LA(2) != 206)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token13 = this.LT(1);
						this.match(232);
						this.match(206);
						Literal password = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token13, "PASSWORD");
							alterMasterKeyStatement.Option = AlterMasterKeyOption.DropEncryptionByPassword;
							alterMasterKeyStatement.Password = password;
						}
					}
				}
			}
			else
			{
				this.match(4);
				IToken token14 = this.LT(1);
				this.match(232);
				this.match(18);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token14, "ENCRYPTION");
				}
				if (this.LA(1) == 232 && this.LA(2) == 232)
				{
					IToken token15 = this.LT(1);
					this.match(232);
					IToken token16 = this.LT(1);
					this.match(232);
					IToken token17 = this.LT(1);
					this.match(91);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token15, "SERVICE");
						TSql80ParserBaseInternal.Match(token16, "MASTER");
						alterMasterKeyStatement.Option = AlterMasterKeyOption.AddEncryptionByServiceMasterKey;
						TSql80ParserBaseInternal.UpdateTokenInfo(alterMasterKeyStatement, token17);
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 206)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token18 = this.LT(1);
					this.match(232);
					this.match(206);
					Literal password = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token18, "PASSWORD");
						alterMasterKeyStatement.Option = AlterMasterKeyOption.AddEncryptionByPassword;
						alterMasterKeyStatement.Password = password;
					}
				}
			}
			return alterMasterKeyStatement;
		}

		// Token: 0x06001608 RID: 5640 RVA: 0x0009347C File Offset: 0x0009167C
		public AlterMessageTypeStatement alterMessageTypeStatement()
		{
			AlterMessageTypeStatement alterMessageTypeStatement = base.FragmentFactory.CreateFragment<AlterMessageTypeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MESSAGE");
				TSql80ParserBaseInternal.Match(token2, "TYPE");
				alterMessageTypeStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterMessageTypeStatement);
			}
			this.messageTypeValidation(alterMessageTypeStatement);
			return alterMessageTypeStatement;
		}

		// Token: 0x06001609 RID: 5641 RVA: 0x00093500 File Offset: 0x00091700
		public TSqlStatement alterPartitionStatement()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTITION");
			}
			int num = this.LA(1);
			TSqlStatement result;
			if (num != 73)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.alterPartitionSchemeStatement();
			}
			else
			{
				result = this.alterPartitionFunctionStatement();
			}
			return result;
		}

		// Token: 0x0600160A RID: 5642 RVA: 0x00093578 File Offset: 0x00091778
		public AlterQueueStatement alterQueueStatement()
		{
			AlterQueueStatement alterQueueStatement = base.FragmentFactory.CreateFragment<AlterQueueStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName name = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUEUE");
				alterQueueStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterQueueStatement);
			}
			this.queueOptionList(alterQueueStatement, true);
			return alterQueueStatement;
		}

		// Token: 0x0600160B RID: 5643 RVA: 0x000935DC File Offset: 0x000917DC
		public AlterRoleStatement alterRoleStatement()
		{
			AlterRoleStatement alterRoleStatement = base.FragmentFactory.CreateFragment<AlterRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				alterRoleStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterRoleStatement);
			}
			AlterRoleAction action = this.renameAlterRoleAction();
			if (this.inputState.guessing == 0)
			{
				alterRoleStatement.Action = action;
			}
			return alterRoleStatement;
		}

		// Token: 0x0600160C RID: 5644 RVA: 0x00093654 File Offset: 0x00091854
		public AlterRouteStatement alterRouteStatement()
		{
			AlterRouteStatement alterRouteStatement = base.FragmentFactory.CreateFragment<AlterRouteStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROUTE");
				alterRouteStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterRouteStatement);
			}
			this.routeOptionList(alterRouteStatement);
			return alterRouteStatement;
		}

		// Token: 0x0600160D RID: 5645 RVA: 0x000936B8 File Offset: 0x000918B8
		public AlterSchemaStatement alterSchemaStatement()
		{
			AlterSchemaStatement alterSchemaStatement = base.FragmentFactory.CreateFragment<AlterSchemaStatement>();
			this.match(139);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterSchemaStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterSchemaStatement);
			}
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "TRANSFER");
			}
			if (this.LA(1) == 232 && this.LA(2) == 203)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(203);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "OBJECT"))
					{
						alterSchemaStatement.ObjectKind = SecurityObjectKind.Object;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "TYPE");
						alterSchemaStatement.ObjectKind = SecurityObjectKind.Type;
					}
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 139)
			{
				IToken token3 = this.LT(1);
				this.match(232);
				this.match(139);
				IToken token4 = this.LT(1);
				this.match(232);
				this.match(203);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "XML");
					TSql80ParserBaseInternal.Match(token4, "COLLECTION");
					alterSchemaStatement.ObjectKind = SecurityObjectKind.XmlSchemaCollection;
				}
			}
			else if ((this.LA(1) != 200 && this.LA(1) != 232 && this.LA(1) != 233) || !TSql90ParserInternal.tokenSet_59_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			SchemaObjectName objectName = this.schemaObjectTwoPartName();
			if (this.inputState.guessing == 0)
			{
				alterSchemaStatement.ObjectName = objectName;
			}
			return alterSchemaStatement;
		}

		// Token: 0x0600160E RID: 5646 RVA: 0x000938A8 File Offset: 0x00091AA8
		public TSqlStatement alterServiceStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
			}
			TSqlStatement result;
			if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				result = this.alterServiceMasterKeyStatement();
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 105 && this.LA(2) != 191))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.alterServiceStatement();
			}
			return result;
		}

		// Token: 0x0600160F RID: 5647 RVA: 0x00093958 File Offset: 0x00091B58
		public AlterUserStatement alterUserStatement()
		{
			AlterUserStatement alterUserStatement = base.FragmentFactory.CreateFragment<AlterUserStatement>();
			this.match(163);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterUserStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterUserStatement);
			}
			this.match(171);
			PrincipalOption item = this.userOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(alterUserStatement, alterUserStatement.UserOptions, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.userOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(alterUserStatement, alterUserStatement.UserOptions, item);
				}
			}
			return alterUserStatement;
		}

		// Token: 0x06001610 RID: 5648 RVA: 0x00093A08 File Offset: 0x00091C08
		public AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement()
		{
			AlterXmlSchemaCollectionStatement alterXmlSchemaCollectionStatement = base.FragmentFactory.CreateFragment<AlterXmlSchemaCollectionStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(139);
			IToken token2 = this.LT(1);
			this.match(232);
			SchemaObjectName name = this.schemaObjectNonEmptyTwoPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
				TSql80ParserBaseInternal.Match(token2, "COLLECTION");
				alterXmlSchemaCollectionStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterXmlSchemaCollectionStatement);
			}
			this.match(4);
			ScalarExpression expression = this.expression();
			if (this.inputState.guessing == 0)
			{
				alterXmlSchemaCollectionStatement.Expression = expression;
			}
			return alterXmlSchemaCollectionStatement;
		}

		// Token: 0x06001611 RID: 5649 RVA: 0x00093AB4 File Offset: 0x00091CB4
		public ApplicationRoleOption applicationRoleOption(bool defaultSchemaAndPasswordOnly)
		{
			ApplicationRoleOption applicationRoleOption = base.FragmentFactory.CreateFragment<ApplicationRoleOption>();
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("PASSWORD"))
			{
				this.match(232);
				this.match(206);
				Literal valueExpression = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					applicationRoleOption.OptionKind = ApplicationRoleOptionKind.Password;
					applicationRoleOption.Value = base.IdentifierOrValueExpression(valueExpression);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					applicationRoleOption.OptionKind = ApplicationRoleOptionHelper.Instance.ParseOption(token);
					if (defaultSchemaAndPasswordOnly && applicationRoleOption.OptionKind != ApplicationRoleOptionKind.DefaultSchema)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					applicationRoleOption.Value = base.IdentifierOrValueExpression(identifier);
				}
			}
			return applicationRoleOption;
		}

		// Token: 0x06001612 RID: 5650 RVA: 0x00093BD4 File Offset: 0x00091DD4
		public ScalarExpression alterAssemblyFromClause()
		{
			this.match(71);
			return this.expression();
		}

		// Token: 0x06001613 RID: 5651 RVA: 0x00093BF4 File Offset: 0x00091DF4
		public void alterAssemblyWith(AlterAssemblyStatement vParent)
		{
			int num = 0;
			this.match(171);
			AssemblyOption assemblyOption = this.alterAssemblyWithItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)assemblyOption.OptionKind, assemblyOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AssemblyOption>(vParent, vParent.Options, assemblyOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				assemblyOption = this.alterAssemblyWithItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)assemblyOption.OptionKind, assemblyOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AssemblyOption>(vParent, vParent.Options, assemblyOption);
				}
			}
		}

		// Token: 0x06001614 RID: 5652 RVA: 0x00093C88 File Offset: 0x00091E88
		public void alterAssemblyDropFile(AlterAssemblyStatement vParent)
		{
			this.match(54);
			this.match(65);
			int num = this.LA(1);
			if (num != 5)
			{
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal item = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.DropFiles, item);
					}
					while (this.LA(1) == 198)
					{
						this.match(198);
						item = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.DropFiles, item);
						}
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.IsDropAll = true;
					return;
				}
			}
		}

		// Token: 0x06001615 RID: 5653 RVA: 0x00093D68 File Offset: 0x00091F68
		public void alterAssemblyAddFile(AlterAssemblyStatement vParent)
		{
			this.match(4);
			this.match(65);
			this.match(71);
			AddFileSpec item = this.alterAssemblyAddFileSpec();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AddFileSpec>(vParent, vParent.AddFiles, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.alterAssemblyAddFileSpec();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AddFileSpec>(vParent, vParent.AddFiles, item);
				}
			}
		}

		// Token: 0x06001616 RID: 5654 RVA: 0x00093DEC File Offset: 0x00091FEC
		public AssemblyOption alterAssemblyWithItem()
		{
			AssemblyOption result;
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				result = this.assemblyPermissionSetOrVisibilityOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.assemblyUncheckedDataOption();
			}
			return result;
		}

		// Token: 0x06001617 RID: 5655 RVA: 0x00093E58 File Offset: 0x00092058
		public AssemblyOption assemblyPermissionSetOrVisibilityOption()
		{
			IToken tPermissionSetVisibility = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			switch (num)
			{
			case 103:
			case 105:
				return this.assemblyVisibilityOption(tPermissionSetVisibility);
			case 104:
				break;
			default:
				if (num == 232)
				{
					return this.assemblyPermissionSetOption(tPermissionSetVisibility);
				}
				break;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001618 RID: 5656 RVA: 0x00093ED4 File Offset: 0x000920D4
		public AssemblyOption assemblyUncheckedDataOption()
		{
			AssemblyOption assemblyOption = base.FragmentFactory.CreateFragment<AssemblyOption>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "UNCHECKED");
				TSql80ParserBaseInternal.UpdateTokenInfo(assemblyOption, token);
				TSql80ParserBaseInternal.Match(token2, "DATA");
				assemblyOption.OptionKind = AssemblyOptionKind.UncheckedData;
				TSql80ParserBaseInternal.UpdateTokenInfo(assemblyOption, token2);
			}
			return assemblyOption;
		}

		// Token: 0x06001619 RID: 5657 RVA: 0x00093F50 File Offset: 0x00092150
		public OnOffAssemblyOption assemblyVisibilityOption(IToken tPermissionSetVisibility)
		{
			OnOffAssemblyOption onOffAssemblyOption = base.FragmentFactory.CreateFragment<OnOffAssemblyOption>();
			OptionState optionState = this.optionOnOff(onOffAssemblyOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(tPermissionSetVisibility, "VISIBILITY");
				TSql80ParserBaseInternal.UpdateTokenInfo(onOffAssemblyOption, tPermissionSetVisibility);
				onOffAssemblyOption.OptionKind = AssemblyOptionKind.Visibility;
				onOffAssemblyOption.OptionState = optionState;
			}
			return onOffAssemblyOption;
		}

		// Token: 0x0600161A RID: 5658 RVA: 0x00093FA0 File Offset: 0x000921A0
		public AddFileSpec alterAssemblyAddFileSpec()
		{
			AddFileSpec addFileSpec = base.FragmentFactory.CreateFragment<AddFileSpec>();
			ScalarExpression file = this.expression();
			if (this.inputState.guessing == 0)
			{
				addFileSpec.File = file;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return addFileSpec;
						}
						switch (num)
						{
						case 4:
						case 6:
							return addFileSpec;
						case 5:
							break;
						default:
							switch (num)
							{
							case 9:
							{
								this.match(9);
								Literal fileName = this.stringLiteral();
								if (this.inputState.guessing == 0)
								{
									addFileSpec.FileName = fileName;
									return addFileSpec;
								}
								return addFileSpec;
							}
							case 12:
							case 13:
							case 15:
							case 17:
								return addFileSpec;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return addFileSpec;
						default:
							if (num == 28)
							{
								return addFileSpec;
							}
							switch (num)
							{
							case 33:
							case 35:
								return addFileSpec;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return addFileSpec;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return addFileSpec;
						default:
							if (num == 82)
							{
								return addFileSpec;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return addFileSpec;
				}
			}
			else if (num <= 176)
			{
				if (num <= 144)
				{
					if (num == 106 || num == 119)
					{
						return addFileSpec;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return addFileSpec;
					}
				}
				else
				{
					switch (num)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						return addFileSpec;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							return addFileSpec;
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								return addFileSpec;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 180:
				case 181:
					return addFileSpec;
				default:
					if (num == 191 || num == 198)
					{
						return addFileSpec;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return addFileSpec;
				}
				switch (num)
				{
				case 219:
				case 220:
					return addFileSpec;
				default:
					if (num == 232)
					{
						return addFileSpec;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600161B RID: 5659 RVA: 0x00094280 File Offset: 0x00092480
		public AlterFullTextCatalogStatement alterFulltextCatalogStatement()
		{
			AlterFullTextCatalogStatement alterFullTextCatalogStatement = base.FragmentFactory.CreateFragment<AlterFullTextCatalogStatement>();
			this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterFullTextCatalogStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterFullTextCatalogStatement);
			}
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.LA(1) == 171 && this.LA(2) == 232)
				{
					this.match(171);
					FullTextCatalogOption item = this.accentSensitivity();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextCatalogOption>(alterFullTextCatalogStatement, alterFullTextCatalogStatement.Options, item);
						TSql80ParserBaseInternal.Match(token, "REBUILD");
						alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.Rebuild;
					}
				}
				else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				if (this.inputState.guessing == 0)
				{
					if (alterFullTextCatalogStatement.Action == AlterFullTextCatalogAction.None)
					{
						if (TSql80ParserBaseInternal.TryMatch(token, "REORGANIZE"))
						{
							alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.Reorganize;
						}
						else
						{
							TSql80ParserBaseInternal.Match(token, "REBUILD");
							alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.Rebuild;
						}
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(alterFullTextCatalogStatement, token);
				}
			}
			else
			{
				this.match(9);
				IToken token2 = this.LT(1);
				this.match(47);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(alterFullTextCatalogStatement, token2);
					alterFullTextCatalogStatement.Action = AlterFullTextCatalogAction.AsDefault;
				}
			}
			return alterFullTextCatalogStatement;
		}

		// Token: 0x0600161C RID: 5660 RVA: 0x0009442C File Offset: 0x0009262C
		public AlterFullTextIndexStatement alterFulltextIndexStatement()
		{
			AlterFullTextIndexStatement alterFullTextIndexStatement = base.FragmentFactory.CreateFragment<AlterFullTextIndexStatement>();
			this.match(84);
			this.match(105);
			SchemaObjectName onName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				alterFullTextIndexStatement.OnName = onName;
				base.ThrowPartialAstIfPhaseOne(alterFullTextIndexStatement);
			}
			AlterFullTextIndexAction action = this.alterFulltextIndexAction();
			if (this.inputState.guessing == 0)
			{
				alterFullTextIndexStatement.Action = action;
			}
			return alterFullTextIndexStatement;
		}

		// Token: 0x0600161D RID: 5661 RVA: 0x00094494 File Offset: 0x00092694
		public AlterFullTextIndexAction alterFulltextIndexAction()
		{
			int num = this.LA(1);
			AlterFullTextIndexAction result;
			if (num != 4)
			{
				if (num != 54)
				{
					if (num == 142)
					{
						result = this.setChangeTrackingAlterFulltextIndexAction();
					}
					else if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_17_.member(this.LA(2)) && (base.NextTokenMatches("ENABLE") || base.NextTokenMatches("DISABLE")))
					{
						result = this.enableDisableAlterFulltextIndexAction();
					}
					else if (this.LA(1) == 232 && (this.LA(2) == 72 || this.LA(2) == 160 || this.LA(2) == 232) && base.NextTokenMatches("START"))
					{
						result = this.startPopulationAlterFulltextIndexAction();
					}
					else
					{
						if (this.LA(1) != 232 || this.LA(2) != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						result = this.otherPopulationAlterFulltextIndexAction();
					}
				}
				else
				{
					result = this.dropAlterFulltextIndexAction();
				}
			}
			else
			{
				result = this.addAlterFulltextIndexAction();
			}
			return result;
		}

		// Token: 0x0600161E RID: 5662 RVA: 0x000945AC File Offset: 0x000927AC
		public SimpleAlterFullTextIndexAction enableDisableAlterFulltextIndexAction()
		{
			SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				simpleAlterFullTextIndexAction.ActionKind = TSql90ParserBaseInternal.EnableDisableMatcher<SimpleAlterFullTextIndexActionKind>(token, SimpleAlterFullTextIndexActionKind.Enable, SimpleAlterFullTextIndexActionKind.Disable);
				TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token);
			}
			return simpleAlterFullTextIndexAction;
		}

		// Token: 0x0600161F RID: 5663 RVA: 0x00094600 File Offset: 0x00092800
		public SimpleAlterFullTextIndexAction setChangeTrackingAlterFulltextIndexAction()
		{
			SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
			this.match(142);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CHANGE_TRACKING");
			}
			int num = this.LA(1);
			if (num != 103)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token2, "MANUAL"))
					{
						simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.SetChangeTrackingManual;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token2, "AUTO");
						simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.SetChangeTrackingAuto;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.SetChangeTrackingOff;
					TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token3);
				}
			}
			return simpleAlterFullTextIndexAction;
		}

		// Token: 0x06001620 RID: 5664 RVA: 0x00094700 File Offset: 0x00092900
		public AddAlterFullTextIndexAction addAlterFulltextIndexAction()
		{
			AddAlterFullTextIndexAction addAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<AddAlterFullTextIndexAction>();
			this.match(4);
			this.match(191);
			FullTextIndexColumn item = this.fulltextIndexColumn();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexColumn>(addAlterFullTextIndexAction, addAlterFullTextIndexAction.Columns, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.fulltextIndexColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FullTextIndexColumn>(addAlterFullTextIndexAction, addAlterFullTextIndexAction.Columns, item);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(addAlterFullTextIndexAction, token);
			}
			bool withNoPopulation = this.populationOption(addAlterFullTextIndexAction);
			if (this.inputState.guessing == 0)
			{
				addAlterFullTextIndexAction.WithNoPopulation = withNoPopulation;
			}
			return addAlterFullTextIndexAction;
		}

		// Token: 0x06001621 RID: 5665 RVA: 0x000947D0 File Offset: 0x000929D0
		public DropAlterFullTextIndexAction dropAlterFulltextIndexAction()
		{
			DropAlterFullTextIndexAction dropAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<DropAlterFullTextIndexAction>();
			this.match(54);
			this.match(191);
			Identifier item = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropAlterFullTextIndexAction, dropAlterFullTextIndexAction.Columns, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropAlterFullTextIndexAction, dropAlterFullTextIndexAction.Columns, item);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(dropAlterFullTextIndexAction, token);
			}
			bool withNoPopulation = this.populationOption(dropAlterFullTextIndexAction);
			if (this.inputState.guessing == 0)
			{
				dropAlterFullTextIndexAction.WithNoPopulation = withNoPopulation;
			}
			return dropAlterFullTextIndexAction;
		}

		// Token: 0x06001622 RID: 5666 RVA: 0x000948A0 File Offset: 0x00092AA0
		public SimpleAlterFullTextIndexAction startPopulationAlterFulltextIndexAction()
		{
			SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "START");
			}
			int num = this.LA(1);
			if (num != 72)
			{
				if (num != 160)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token2, "INCREMENTAL");
						simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StartIncrementalPopulation;
					}
				}
				else
				{
					this.match(160);
					if (this.inputState.guessing == 0)
					{
						simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StartUpdatePopulation;
					}
				}
			}
			else
			{
				this.match(72);
				if (this.inputState.guessing == 0)
				{
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StartFullPopulation;
				}
			}
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "POPULATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token3);
			}
			return simpleAlterFullTextIndexAction;
		}

		// Token: 0x06001623 RID: 5667 RVA: 0x000949C4 File Offset: 0x00092BC4
		public SimpleAlterFullTextIndexAction otherPopulationAlterFulltextIndexAction()
		{
			SimpleAlterFullTextIndexAction simpleAlterFullTextIndexAction = base.FragmentFactory.CreateFragment<SimpleAlterFullTextIndexAction>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "STOP"))
				{
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.StopPopulation;
				}
				else if (TSql80ParserBaseInternal.TryMatch(token, "PAUSE"))
				{
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.PausePopulation;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "RESUME");
					simpleAlterFullTextIndexAction.ActionKind = SimpleAlterFullTextIndexActionKind.ResumePopulation;
				}
				TSql80ParserBaseInternal.Match(token2, "POPULATION");
				TSql80ParserBaseInternal.UpdateTokenInfo(simpleAlterFullTextIndexAction, token2);
			}
			return simpleAlterFullTextIndexAction;
		}

		// Token: 0x06001624 RID: 5668 RVA: 0x00094A68 File Offset: 0x00092C68
		public bool populationOption(TSqlFragment vParent)
		{
			bool result = false;
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token = this.LT(1);
				this.match(232);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "NO");
					TSql80ParserBaseInternal.Match(token2, "POPULATION");
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					result = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return result;
		}

		// Token: 0x06001625 RID: 5669 RVA: 0x00094B30 File Offset: 0x00092D30
		public PartitionSpecifier partitionSpecifier()
		{
			PartitionSpecifier partitionSpecifier = base.FragmentFactory.CreateFragment<PartitionSpecifier>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			ScalarExpression number = this.expression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTITION");
				partitionSpecifier.Number = number;
			}
			return partitionSpecifier;
		}

		// Token: 0x06001626 RID: 5670 RVA: 0x00094B90 File Offset: 0x00092D90
		public AlterLoginEnableDisableStatement alterLoginEnableDisable(Identifier vName)
		{
			AlterLoginEnableDisableStatement alterLoginEnableDisableStatement = base.FragmentFactory.CreateFragment<AlterLoginEnableDisableStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				alterLoginEnableDisableStatement.Name = vName;
				alterLoginEnableDisableStatement.IsEnable = TSql90ParserBaseInternal.EnableDisableMatcher<bool>(token, true, false);
				TSql80ParserBaseInternal.UpdateTokenInfo(alterLoginEnableDisableStatement, token);
				base.ThrowPartialAstIfPhaseOne(alterLoginEnableDisableStatement);
			}
			return alterLoginEnableDisableStatement;
		}

		// Token: 0x06001627 RID: 5671 RVA: 0x00094BF0 File Offset: 0x00092DF0
		public AlterLoginOptionsStatement alterLoginOptions(Identifier vName)
		{
			AlterLoginOptionsStatement alterLoginOptionsStatement = base.FragmentFactory.CreateFragment<AlterLoginOptionsStatement>();
			int num = 0;
			this.match(171);
			if (this.inputState.guessing == 0)
			{
				alterLoginOptionsStatement.Name = vName;
				base.ThrowPartialAstIfPhaseOne(alterLoginOptionsStatement);
			}
			PrincipalOption principalOption = this.alterLoginParam();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(alterLoginOptionsStatement, alterLoginOptionsStatement.Options, principalOption);
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)principalOption.OptionKind, principalOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				principalOption = this.alterLoginParam();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<PrincipalOption>(alterLoginOptionsStatement, alterLoginOptionsStatement.Options, principalOption);
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)principalOption.OptionKind, principalOption);
				}
			}
			return alterLoginOptionsStatement;
		}

		// Token: 0x06001628 RID: 5672 RVA: 0x00094CAC File Offset: 0x00092EAC
		public PrincipalOption alterLoginParam()
		{
			PrincipalOption principalOption = null;
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				int num = this.LA(1);
				switch (num)
				{
				case 103:
				case 105:
					principalOption = this.onOffPrincipalOption(token);
					goto IL_12C;
				case 104:
					break;
				default:
					if (num != 224)
					{
						switch (num)
						{
						case 230:
						case 231:
							break;
						case 232:
						case 233:
						{
							Identifier identifier = this.identifier();
							if (this.inputState.guessing == 0)
							{
								IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
								if (TSql80ParserBaseInternal.TryMatch(token, "NAME"))
								{
									identifierPrincipalOption.OptionKind = PrincipalOptionKind.Name;
								}
								else
								{
									identifierPrincipalOption.OptionKind = IdentifierCreateLoginOptionsHelper.Instance.ParseOption(token);
								}
								identifierPrincipalOption.Identifier = identifier;
								principalOption = identifierPrincipalOption;
								goto IL_12C;
							}
							goto IL_12C;
						}
						default:
							goto IL_119;
						}
					}
					principalOption = this.passwordAlterLoginOption();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "PASSWORD");
						goto IL_12C;
					}
					goto IL_12C;
				}
				IL_119:
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_12C:
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(principalOption, token);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NO");
					TSql80ParserBaseInternal.Match(token3, "CREDENTIAL");
					PrincipalOption principalOption2 = base.FragmentFactory.CreateFragment<PrincipalOption>();
					principalOption2.OptionKind = PrincipalOptionKind.NoCredential;
					TSql80ParserBaseInternal.UpdateTokenInfo(principalOption2, token3);
					principalOption = principalOption2;
				}
			}
			return principalOption;
		}

		// Token: 0x06001629 RID: 5673 RVA: 0x00094E9C File Offset: 0x0009309C
		public PasswordAlterPrincipalOption passwordAlterLoginOption()
		{
			PasswordAlterPrincipalOption passwordAlterPrincipalOption = base.FragmentFactory.CreateFragment<PasswordAlterPrincipalOption>();
			Literal password = this.loginPassword();
			if (this.inputState.guessing == 0)
			{
				passwordAlterPrincipalOption.Password = password;
				passwordAlterPrincipalOption.OptionKind = PrincipalOptionKind.Password;
			}
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Literal oldPassword = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "OLD_PASSWORD");
					passwordAlterPrincipalOption.OldPassword = oldPassword;
				}
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_42_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_60_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				while (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_42_.member(this.LA(2)))
				{
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql90ParserBaseInternal.RecognizeAlterLoginSecAdminPasswordOption(token2, passwordAlterPrincipalOption);
					}
				}
			}
			return passwordAlterPrincipalOption;
		}

		// Token: 0x0600162A RID: 5674 RVA: 0x00094FCC File Offset: 0x000931CC
		public AlterPartitionFunctionStatement alterPartitionFunctionStatement()
		{
			AlterPartitionFunctionStatement alterPartitionFunctionStatement = base.FragmentFactory.CreateFragment<AlterPartitionFunctionStatement>();
			this.match(73);
			Identifier name = this.identifier();
			this.match(191);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				alterPartitionFunctionStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterPartitionFunctionStatement);
			}
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "SPLIT"))
				{
					alterPartitionFunctionStatement.IsSplit = true;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "MERGE");
					alterPartitionFunctionStatement.IsSplit = false;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(alterPartitionFunctionStatement, token);
			}
			if (this.LA(1) == 232 && this.LA(2) == 191)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(191);
				ScalarExpression boundary = this.expression();
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "RANGE");
					alterPartitionFunctionStatement.Boundary = boundary;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterPartitionFunctionStatement, token3);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterPartitionFunctionStatement;
		}

		// Token: 0x0600162B RID: 5675 RVA: 0x00095134 File Offset: 0x00093334
		public AlterPartitionSchemeStatement alterPartitionSchemeStatement()
		{
			AlterPartitionSchemeStatement alterPartitionSchemeStatement = base.FragmentFactory.CreateFragment<AlterPartitionSchemeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SCHEME");
				alterPartitionSchemeStatement.Name = name;
				base.ThrowPartialAstIfPhaseOne(alterPartitionSchemeStatement);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "NEXT");
				TSql80ParserBaseInternal.Match(token3, "USED");
				TSql80ParserBaseInternal.UpdateTokenInfo(alterPartitionSchemeStatement, token3);
			}
			if (this.LA(1) >= 230 && this.LA(1) <= 233 && TSql90ParserInternal.tokenSet_17_.member(this.LA(2)))
			{
				IdentifierOrValueExpression fileGroup = this.stringOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					alterPartitionSchemeStatement.FileGroup = fileGroup;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterPartitionSchemeStatement;
		}

		// Token: 0x0600162C RID: 5676 RVA: 0x00095270 File Offset: 0x00093470
		public ExecuteAsClause executeAsClause(bool vCallerProhibited, bool vOwnerProhibited)
		{
			ExecuteAsClause executeAsClause = base.FragmentFactory.CreateFragment<ExecuteAsClause>();
			switch (this.LA(1))
			{
			case 60:
			{
				IToken token = this.LT(1);
				this.match(60);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(executeAsClause, token);
				}
				break;
			}
			case 61:
			{
				IToken token2 = this.LT(1);
				this.match(61);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(executeAsClause, token2);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.match(9);
			switch (this.LA(1))
			{
			case 230:
			case 231:
			{
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					executeAsClause.ExecuteAsOption = ExecuteAsOption.String;
					executeAsClause.Literal = literal;
				}
				break;
			}
			case 232:
			{
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					executeAsClause.ExecuteAsOption = ExecuteAsOptionHelper.Instance.ParseOption(token3);
					if ((vCallerProhibited && executeAsClause.ExecuteAsOption == ExecuteAsOption.Caller) || (vOwnerProhibited && executeAsClause.ExecuteAsOption == ExecuteAsOption.Owner))
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token3);
					}
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executeAsClause;
		}

		// Token: 0x0600162D RID: 5677 RVA: 0x000953C0 File Offset: 0x000935C0
		public void queueOption(QueueStatement vParent, bool vDropAccepted)
		{
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				QueueOption item = this.stateQueueOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<QueueOption>(vParent, vParent.QueueOptions, item);
					return;
				}
				return;
			}
			else
			{
				if (this.LA(1) == 232 && this.LA(2) == 191)
				{
					this.queueActivationOption(vParent, vDropAccepted);
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x0600162E RID: 5678 RVA: 0x00095444 File Offset: 0x00093644
		public QueueStateOption stateQueueOption()
		{
			QueueStateOption queueStateOption = base.FragmentFactory.CreateFragment<QueueStateOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			OptionState optionState = this.optionOnOff(queueStateOption);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "STATUS"))
				{
					queueStateOption.OptionKind = QueueOptionKind.Status;
				}
				else
				{
					TSql80ParserBaseInternal.Match(token, "RETENTION");
					queueStateOption.OptionKind = QueueOptionKind.Retention;
				}
				queueStateOption.OptionState = optionState;
			}
			return queueStateOption;
		}

		// Token: 0x0600162F RID: 5679 RVA: 0x000954C4 File Offset: 0x000936C4
		public void queueActivationOption(QueueStatement vParent, bool vDropAccepted)
		{
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ACTIVATION");
			}
			QueueOption item = this.activationQueueOptionArgument(vDropAccepted, ref flag, ref flag2, ref flag3);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<QueueOption>(vParent, vParent.QueueOptions, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.activationQueueOptionArgument(vDropAccepted, ref flag, ref flag2, ref flag3);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<QueueOption>(vParent, vParent.QueueOptions, item);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
				if (vParent is CreateQueueStatement && (flag || flag2 || flag3) && (!flag || !flag2 || !flag3))
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46069", vParent, TSqlParserResource.SQL46069Message, new string[0]);
				}
			}
		}

		// Token: 0x06001630 RID: 5680 RVA: 0x000955DC File Offset: 0x000937DC
		public QueueOption activationQueueOptionArgument(bool vDropAccepted, ref bool procedureName, ref bool maxQueueReaders, ref bool executeAs)
		{
			int num = this.LA(1);
			QueueOption result;
			if (num != 54)
			{
				switch (num)
				{
				case 60:
				case 61:
					result = this.executeAsQueueOptionArgument();
					if (this.inputState.guessing == 0)
					{
						executeAs = true;
					}
					break;
				default:
					if (num == 232)
					{
						IToken vStartToken = this.LT(1);
						this.match(232);
						this.match(206);
						int num2 = this.LA(1);
						if (num2 <= 200)
						{
							switch (num2)
							{
							case 103:
							case 105:
								return this.statusQueueOptionArgument(vStartToken);
							case 104:
								goto IL_D7;
							default:
								if (num2 != 200)
								{
									goto IL_D7;
								}
								break;
							}
						}
						else if (num2 != 221)
						{
							switch (num2)
							{
							case 232:
							case 233:
								break;
							default:
								goto IL_D7;
							}
						}
						else
						{
							result = this.maxQueueReadersQueueOptionArgument(vStartToken);
							if (this.inputState.guessing == 0)
							{
								maxQueueReaders = true;
								break;
							}
							break;
						}
						result = this.procedureNameQueueOptionArgument(vStartToken);
						if (this.inputState.guessing == 0)
						{
							procedureName = true;
							break;
						}
						break;
						IL_D7:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				result = this.dropQueueOptionArgument(vDropAccepted);
			}
			return result;
		}

		// Token: 0x06001631 RID: 5681 RVA: 0x0009570C File Offset: 0x0009390C
		public QueueStateOption statusQueueOptionArgument(IToken vStartToken)
		{
			QueueStateOption queueStateOption = base.FragmentFactory.CreateFragment<QueueStateOption>();
			OptionState optionState = this.optionOnOff(queueStateOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(vStartToken, "STATUS");
				TSql80ParserBaseInternal.UpdateTokenInfo(queueStateOption, vStartToken);
				queueStateOption.OptionState = optionState;
				queueStateOption.OptionKind = QueueOptionKind.ActivationStatus;
			}
			return queueStateOption;
		}

		// Token: 0x06001632 RID: 5682 RVA: 0x0009575C File Offset: 0x0009395C
		public QueueProcedureOption procedureNameQueueOptionArgument(IToken vStartToken)
		{
			QueueProcedureOption queueProcedureOption = base.FragmentFactory.CreateFragment<QueueProcedureOption>();
			SchemaObjectName optionValue = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(vStartToken, "PROCEDURE_NAME");
				TSql80ParserBaseInternal.UpdateTokenInfo(queueProcedureOption, vStartToken);
				queueProcedureOption.OptionValue = optionValue;
				queueProcedureOption.OptionKind = QueueOptionKind.ActivationProcedureName;
			}
			return queueProcedureOption;
		}

		// Token: 0x06001633 RID: 5683 RVA: 0x000957AC File Offset: 0x000939AC
		public QueueValueOption maxQueueReadersQueueOptionArgument(IToken vStartToken)
		{
			QueueValueOption queueValueOption = base.FragmentFactory.CreateFragment<QueueValueOption>();
			Literal optionValue = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(vStartToken, "MAX_QUEUE_READERS");
				TSql80ParserBaseInternal.UpdateTokenInfo(queueValueOption, vStartToken);
				queueValueOption.OptionValue = optionValue;
				queueValueOption.OptionKind = QueueOptionKind.ActivationMaxQueueReaders;
			}
			return queueValueOption;
		}

		// Token: 0x06001634 RID: 5684 RVA: 0x000957FC File Offset: 0x000939FC
		public QueueOption dropQueueOptionArgument(bool vDropAccepted)
		{
			QueueOption queueOption = base.FragmentFactory.CreateFragment<QueueOption>();
			IToken token = this.LT(1);
			this.match(54);
			if (this.inputState.guessing == 0)
			{
				if (!vDropAccepted)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(queueOption, token);
				queueOption.OptionKind = QueueOptionKind.ActivationDrop;
			}
			return queueOption;
		}

		// Token: 0x06001635 RID: 5685 RVA: 0x00095850 File Offset: 0x00093A50
		public QueueExecuteAsOption executeAsQueueOptionArgument()
		{
			QueueExecuteAsOption queueExecuteAsOption = base.FragmentFactory.CreateFragment<QueueExecuteAsOption>();
			ExecuteAsClause optionValue = this.executeAsClause(true, false);
			if (this.inputState.guessing == 0)
			{
				queueExecuteAsOption.OptionValue = optionValue;
				queueExecuteAsOption.OptionKind = QueueOptionKind.ActivationExecuteAs;
			}
			return queueExecuteAsOption;
		}

		// Token: 0x06001636 RID: 5686 RVA: 0x00095890 File Offset: 0x00093A90
		public RenameAlterRoleAction renameAlterRoleAction()
		{
			RenameAlterRoleAction renameAlterRoleAction = base.FragmentFactory.CreateFragment<RenameAlterRoleAction>();
			this.match(171);
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Identifier newName = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NAME");
				renameAlterRoleAction.NewName = newName;
			}
			return renameAlterRoleAction;
		}

		// Token: 0x06001637 RID: 5687 RVA: 0x000958FC File Offset: 0x00093AFC
		public RouteOption routeOption()
		{
			RouteOption routeOption = base.FragmentFactory.CreateFragment<RouteOption>();
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("LIFETIME"))
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					routeOption.OptionKind = RouteOptionKind.Lifetime;
					routeOption.Literal = literal;
					TSql80ParserBaseInternal.UpdateTokenInfo(routeOption, token);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					routeOption.OptionKind = RouteOptionHelper.Instance.ParseOption(token2);
					routeOption.Literal = literal;
					TSql80ParserBaseInternal.UpdateTokenInfo(routeOption, token2);
				}
			}
			return routeOption;
		}

		// Token: 0x06001638 RID: 5688 RVA: 0x00095A14 File Offset: 0x00093C14
		public SchemaObjectName schemaObjectTwoPartName()
		{
			SchemaObjectName schemaObjectName = null;
			int num = this.LA(1);
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
					schemaObjectName = this.schemaObjectNonEmptyTwoPartName();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(200);
				Identifier item = this.identifier();
				if (this.inputState.guessing == 0)
				{
					schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, item);
				}
			}
			return schemaObjectName;
		}

		// Token: 0x06001639 RID: 5689 RVA: 0x00095AA0 File Offset: 0x00093CA0
		public AlterServiceMasterKeyStatement alterServiceMasterKeyStatement()
		{
			AlterServiceMasterKeyStatement alterServiceMasterKeyStatement = base.FragmentFactory.CreateFragment<AlterServiceMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
				base.ThrowPartialAstIfPhaseOne(alterServiceMasterKeyStatement);
			}
			if (this.LA(1) == 232 && this.LA(2) == 232 && base.NextTokenMatches("FORCE"))
			{
				IToken token2 = this.LT(1);
				this.match(232);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "FORCE");
					TSql80ParserBaseInternal.Match(token3, "REGENERATE");
					alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.ForceRegenerate;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterServiceMasterKeyStatement, token3);
				}
			}
			else if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_17_.member(this.LA(2)))
			{
				IToken token4 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "REGENERATE");
					alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.Regenerate;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterServiceMasterKeyStatement, token4);
				}
			}
			else
			{
				if (this.LA(1) != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				IToken token5 = this.LT(1);
				this.match(232);
				this.match(206);
				Literal account = this.stringLiteral();
				this.match(198);
				IToken token6 = this.LT(1);
				this.match(232);
				this.match(206);
				Literal password = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token5, "OLD_ACCOUNT"))
					{
						TSql80ParserBaseInternal.Match(token6, "OLD_PASSWORD");
						alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.WithOldAccount;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token5, "NEW_ACCOUNT");
						TSql80ParserBaseInternal.Match(token6, "NEW_PASSWORD");
						alterServiceMasterKeyStatement.Kind = AlterServiceMasterKeyOption.WithNewAccount;
					}
					alterServiceMasterKeyStatement.Account = account;
					alterServiceMasterKeyStatement.Password = password;
				}
			}
			return alterServiceMasterKeyStatement;
		}

		// Token: 0x0600163A RID: 5690 RVA: 0x00095CDC File Offset: 0x00093EDC
		public IdentifierPrincipalOption userOption()
		{
			IdentifierPrincipalOption identifierPrincipalOption = base.FragmentFactory.CreateFragment<IdentifierPrincipalOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identifierPrincipalOption, token);
				identifierPrincipalOption.OptionKind = UserOptionHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
				identifierPrincipalOption.Identifier = identifier;
			}
			return identifierPrincipalOption;
		}

		// Token: 0x0600163B RID: 5691 RVA: 0x00095D4C File Offset: 0x00093F4C
		public void authorization(IAuthorization vParent)
		{
			this.match(11);
			Identifier owner = this.identifier();
			if (this.inputState.guessing == 0)
			{
				vParent.Owner = owner;
			}
		}

		// Token: 0x0600163C RID: 5692 RVA: 0x00095D7C File Offset: 0x00093F7C
		public StatementList createSchemaElementList()
		{
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			while (TSql90ParserInternal.tokenSet_61_.member(this.LA(1)))
			{
				TSqlStatement item = this.createSchemaElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(statementList, statementList.Statements, item);
				}
			}
			return statementList;
		}

		// Token: 0x0600163D RID: 5693 RVA: 0x00095DCC File Offset: 0x00093FCC
		public TSqlStatement createSchemaElement()
		{
			int num = this.LA(1);
			TSqlStatement tsqlStatement;
			if (num != 49)
			{
				if (num != 75)
				{
					if (num != 132)
					{
						if (this.LA(1) == 35 && this.LA(2) == 166)
						{
							tsqlStatement = this.createViewStatement();
						}
						else
						{
							if (this.LA(1) != 35 || this.LA(2) != 148)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							tsqlStatement = this.createTableStatement();
						}
					}
					else
					{
						tsqlStatement = this.revokeStatement90();
					}
				}
				else
				{
					tsqlStatement = this.grantStatement90();
				}
			}
			else
			{
				tsqlStatement = this.denyStatement90();
			}
			this.optSemicolons(tsqlStatement);
			return tsqlStatement;
		}

		// Token: 0x0600163E RID: 5694 RVA: 0x00095E74 File Offset: 0x00094074
		public void functionStatementBody(FunctionStatementBody vResult, out bool vParseErrorOccurred)
		{
			this.match(73);
			SchemaObjectName name = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(name, "TRIGGER");
				vResult.Name = name;
				TSql80ParserBaseInternal.CheckForTemporaryFunction(name);
				base.ThrowPartialAstIfPhaseOne(vResult);
			}
			this.match(191);
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.functionParameterList(vResult);
			}
			this.match(192);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RETURNS");
			}
			this.functionReturnTypeAndBody(vResult, out vParseErrorOccurred);
		}

		// Token: 0x0600163F RID: 5695 RVA: 0x00095F3C File Offset: 0x0009413C
		public void functionParameterList(FunctionStatementBody vResult)
		{
			ProcedureParameter item = this.functionParameter();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(vResult, vResult.Parameters, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.functionParameter();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(vResult, vResult.Parameters, item);
				}
			}
		}

		// Token: 0x06001640 RID: 5696 RVA: 0x00095FA8 File Offset: 0x000941A8
		public void functionReturnTypeAndBody(FunctionStatementBody vParent, out bool vParseErrorOccurred)
		{
			vParseErrorOccurred = false;
			int num = this.LA(1);
			if (num != 53 && num != 96)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
				{
					DeclareTableVariableBody declareTableVariableBody = this.declareTableBody(IndexAffectingStatement.CreateOrAlterFunction);
					if (this.inputState.guessing == 0)
					{
						TableValuedFunctionReturnType tableValuedFunctionReturnType = base.FragmentFactory.CreateFragment<TableValuedFunctionReturnType>();
						tableValuedFunctionReturnType.DeclareTableVariableBody = declareTableVariableBody;
						vParent.ReturnType = tableValuedFunctionReturnType;
					}
					int num2 = this.LA(1);
					if (num2 != 9 && num2 != 13)
					{
						if (num2 != 171)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.functionAttributes(vParent);
					}
					int num3 = this.LA(1);
					if (num3 != 9)
					{
						if (num3 != 13)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(9);
					}
					BeginEndBlockStatement beginEndBlockStatement = this.beginEndBlockStatement();
					if (this.inputState.guessing == 0)
					{
						base.SetFunctionBodyStatement(vParent, beginEndBlockStatement);
						vParseErrorOccurred = (beginEndBlockStatement == null);
						return;
					}
					return;
				}
				default:
					if (this.LA(1) == 148 && (this.LA(2) == 9 || this.LA(2) == 131 || this.LA(2) == 171))
					{
						this.match(148);
						int num4 = this.LA(1);
						if (num4 != 9 && num4 != 131)
						{
							if (num4 != 171)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							this.functionAttributesNoExecuteAs(vParent);
						}
						int num5 = this.LA(1);
						if (num5 != 9)
						{
							if (num5 != 131)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(9);
						}
						this.match(131);
						SelectFunctionReturnType returnType = this.functionReturnClauseRelational();
						if (this.inputState.guessing == 0)
						{
							vParent.ReturnType = returnType;
							return;
						}
						return;
					}
					else
					{
						if (this.LA(1) != 148 || this.LA(2) != 191)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(148);
						DeclareTableVariableBody declareTableVariableBody = this.declareTableBodyMain(IndexAffectingStatement.CreateOrAlterFunction);
						if (this.inputState.guessing == 0)
						{
							TableValuedFunctionReturnType tableValuedFunctionReturnType2 = base.FragmentFactory.CreateFragment<TableValuedFunctionReturnType>();
							tableValuedFunctionReturnType2.DeclareTableVariableBody = declareTableVariableBody;
							vParent.ReturnType = tableValuedFunctionReturnType2;
						}
						int num6 = this.LA(1);
						if (num6 != 9)
						{
							if (num6 != 171)
							{
								if (num6 != 175)
								{
									throw new NoViableAltException(this.LT(1), this.getFilename());
								}
							}
							else
							{
								this.functionAttributes(vParent);
							}
						}
						int num7 = this.LA(1);
						if (num7 != 9)
						{
							if (num7 != 175)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(9);
						}
						MethodSpecifier methodSpecifier = this.methodSpecifier();
						this.optSemicolons(vParent);
						if (this.inputState.guessing == 0)
						{
							vParent.MethodSpecifier = methodSpecifier;
							return;
						}
						return;
					}
					break;
				}
			}
			DataTypeReference dataType = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				ScalarFunctionReturnType scalarFunctionReturnType = base.FragmentFactory.CreateFragment<ScalarFunctionReturnType>();
				scalarFunctionReturnType.DataType = dataType;
				vParent.ReturnType = scalarFunctionReturnType;
			}
			int num8 = this.LA(1);
			if (num8 <= 13)
			{
				if (num8 == 9 || num8 == 13)
				{
					goto IL_B4;
				}
			}
			else
			{
				if (num8 == 171)
				{
					this.functionAttributes(vParent);
					goto IL_B4;
				}
				if (num8 == 175)
				{
					goto IL_B4;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_B4:
			int num9 = this.LA(1);
			if (num9 != 9)
			{
				if (num9 != 13 && num9 != 175)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(9);
			}
			int num10 = this.LA(1);
			if (num10 != 13)
			{
				if (num10 != 175)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				MethodSpecifier methodSpecifier = this.methodSpecifier();
				this.optSemicolons(vParent);
				if (this.inputState.guessing == 0)
				{
					vParent.MethodSpecifier = methodSpecifier;
					return;
				}
			}
			else
			{
				BeginEndBlockStatement beginEndBlockStatement = this.beginEndBlockStatement();
				if (this.inputState.guessing == 0)
				{
					base.SetFunctionBodyStatement(vParent, beginEndBlockStatement);
					vParseErrorOccurred = (beginEndBlockStatement == null);
					return;
				}
			}
		}

		// Token: 0x06001641 RID: 5697 RVA: 0x000963DC File Offset: 0x000945DC
		public ProcedureParameter functionParameter()
		{
			ProcedureParameter procedureParameter = base.FragmentFactory.CreateFragment<ProcedureParameter>();
			Identifier variableName = this.identifierVariable();
			int num = this.LA(1);
			if (num <= 53)
			{
				if (num == 9)
				{
					this.match(9);
					goto IL_64;
				}
				if (num == 53)
				{
					goto IL_64;
				}
			}
			else
			{
				if (num == 96)
				{
					goto IL_64;
				}
				switch (num)
				{
				case 232:
				case 233:
					goto IL_64;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_64:
			if (this.inputState.guessing == 0)
			{
				procedureParameter.VariableName = variableName;
			}
			this.scalarProcedureParameter(procedureParameter, false);
			return procedureParameter;
		}

		// Token: 0x06001642 RID: 5698 RVA: 0x0009646C File Offset: 0x0009466C
		public void scalarProcedureParameter(ProcedureParameter vParent, bool outputAllowed)
		{
			DataTypeReference dataType = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				vParent.DataType = dataType;
			}
			int num = this.LA(1);
			if (num <= 171)
			{
				if (num == 9 || num == 67 || num == 171)
				{
					goto IL_A8;
				}
			}
			else if (num <= 198)
			{
				if (num == 192 || num == 198)
				{
					goto IL_A8;
				}
			}
			else if (num != 206)
			{
				if (num == 232)
				{
					goto IL_A8;
				}
			}
			else
			{
				this.match(206);
				ScalarExpression value = this.possibleNegativeConstantOrIdentifierWithDefault();
				if (this.inputState.guessing == 0)
				{
					vParent.Value = value;
					goto IL_A8;
				}
				goto IL_A8;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_A8:
			int num2 = this.LA(1);
			if (num2 <= 171)
			{
				if (num2 == 9 || num2 == 67 || num2 == 171)
				{
					return;
				}
			}
			else
			{
				if (num2 == 192 || num2 == 198)
				{
					return;
				}
				if (num2 == 232)
				{
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing != 0)
					{
						return;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					TSql80ParserBaseInternal.Match(token, "OUTPUT", "OUT");
					if (outputAllowed)
					{
						vParent.Modifier = ParameterModifier.Output;
						return;
					}
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46039", token, TSqlParserResource.SQL46039Message, new string[0]);
					return;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001643 RID: 5699 RVA: 0x000965DC File Offset: 0x000947DC
		public void functionAttributes(FunctionStatementBody vParent)
		{
			int num = 0;
			this.match(171);
			FunctionOption functionOption = this.functionAttribute();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FunctionOption>(vParent, vParent.Options, functionOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				functionOption = this.functionAttribute();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FunctionOption>(vParent, vParent.Options, functionOption);
				}
			}
		}

		// Token: 0x06001644 RID: 5700 RVA: 0x00096670 File Offset: 0x00094870
		public BeginEndBlockStatement beginEndBlockStatement()
		{
			BeginEndBlockStatement beginEndBlockStatement = base.FragmentFactory.CreateFragment<BeginEndBlockStatement>();
			bool flag = false;
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			IToken token = this.LT(1);
			this.match(13);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(beginEndBlockStatement, token);
			}
			while (this.LA(1) == 204)
			{
				this.LT(1);
				this.match(204);
			}
			int num = 0;
			while (TSql90ParserInternal.tokenSet_3_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_62_.member(this.LA(2)) && base.IsStatementIsNext())
			{
				TSqlStatement tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement != null)
					{
						statementList.Statements.Add(tsqlStatement);
					}
					else
					{
						flag = true;
						base.ThrowIfEndOfFileOrBatch();
					}
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(56);
			if (this.inputState.guessing == 0)
			{
				beginEndBlockStatement.StatementList = statementList;
				TSql80ParserBaseInternal.UpdateTokenInfo(beginEndBlockStatement, token2);
				if (flag)
				{
					beginEndBlockStatement = null;
				}
			}
			return beginEndBlockStatement;
		}

		// Token: 0x06001645 RID: 5701 RVA: 0x0009679C File Offset: 0x0009499C
		public MethodSpecifier methodSpecifier()
		{
			MethodSpecifier methodSpecifier = base.FragmentFactory.CreateFragment<MethodSpecifier>();
			this.LT(1);
			this.match(175);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "NAME");
			}
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				methodSpecifier.AssemblyName = identifier;
			}
			this.match(200);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				methodSpecifier.ClassName = identifier;
			}
			this.match(200);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				methodSpecifier.MethodName = identifier;
			}
			return methodSpecifier;
		}

		// Token: 0x06001646 RID: 5702 RVA: 0x00096860 File Offset: 0x00094A60
		public void functionAttributesNoExecuteAs(FunctionStatementBody vParent)
		{
			int num = 0;
			this.match(171);
			FunctionOption functionOption = this.functionAttributeNoExecuteAs();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FunctionOption>(vParent, vParent.Options, functionOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				functionOption = this.functionAttributeNoExecuteAs();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)functionOption.OptionKind, functionOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<FunctionOption>(vParent, vParent.Options, functionOption);
				}
			}
		}

		// Token: 0x06001647 RID: 5703 RVA: 0x000968F4 File Offset: 0x00094AF4
		public DeclareTableVariableBody declareTableBody(IndexAffectingStatement statementType)
		{
			bool asDefined = false;
			Identifier variableName = this.identifierVariable();
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 148)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(9);
				if (this.inputState.guessing == 0)
				{
					asDefined = true;
				}
			}
			this.match(148);
			DeclareTableVariableBody declareTableVariableBody = this.declareTableBodyMain(statementType);
			if (this.inputState.guessing == 0)
			{
				declareTableVariableBody.VariableName = variableName;
				declareTableVariableBody.AsDefined = asDefined;
			}
			return declareTableVariableBody;
		}

		// Token: 0x06001648 RID: 5704 RVA: 0x0009697C File Offset: 0x00094B7C
		public DeclareTableVariableBody declareTableBodyMain(IndexAffectingStatement statementType)
		{
			DeclareTableVariableBody declareTableVariableBody = base.FragmentFactory.CreateFragment<DeclareTableVariableBody>();
			this.match(191);
			TableDefinition definition = this.tableDefinition(statementType, null);
			if (this.inputState.guessing == 0)
			{
				declareTableVariableBody.Definition = definition;
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(declareTableVariableBody, token);
			}
			return declareTableVariableBody;
		}

		// Token: 0x06001649 RID: 5705 RVA: 0x000969E8 File Offset: 0x00094BE8
		public SelectStatement subqueryExpressionWithOptionalCTE()
		{
			SelectStatement selectStatement = base.FragmentFactory.CreateFragment<SelectStatement>();
			int num = this.LA(1);
			if (num != 140)
			{
				if (num != 171)
				{
					if (num != 191)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
					if (this.inputState.guessing == 0)
					{
						selectStatement.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
					}
				}
			}
			QueryExpression queryExpression = this.subqueryExpression();
			if (this.inputState.guessing == 0)
			{
				selectStatement.QueryExpression = queryExpression;
			}
			return selectStatement;
		}

		// Token: 0x0600164A RID: 5706 RVA: 0x00096A70 File Offset: 0x00094C70
		public QueryExpression subqueryExpression()
		{
			BinaryQueryExpression binaryQueryExpression = null;
			QueryExpression queryExpression = this.subqueryExpressionUnit();
			while (this.LA(1) == 59 || this.LA(1) == 87 || this.LA(1) == 158)
			{
				if (this.inputState.guessing == 0)
				{
					binaryQueryExpression = base.FragmentFactory.CreateFragment<BinaryQueryExpression>();
					binaryQueryExpression.FirstQueryExpression = queryExpression;
				}
				int num = this.LA(1);
				if (num != 59)
				{
					if (num != 87)
					{
						if (num != 158)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(158);
						if (this.inputState.guessing == 0)
						{
							binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Union;
						}
					}
					else
					{
						this.match(87);
						if (this.inputState.guessing == 0)
						{
							binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Intersect;
						}
					}
				}
				else
				{
					this.match(59);
					if (this.inputState.guessing == 0)
					{
						binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Except;
					}
				}
				int num2 = this.LA(1);
				if (num2 != 5)
				{
					if (num2 != 140 && num2 != 191)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(5);
					if (this.inputState.guessing == 0)
					{
						binaryQueryExpression.All = true;
					}
				}
				queryExpression = this.subqueryExpressionUnit();
				if (this.inputState.guessing == 0)
				{
					binaryQueryExpression.SecondQueryExpression = queryExpression;
					queryExpression = binaryQueryExpression;
				}
			}
			return queryExpression;
		}

		// Token: 0x0600164B RID: 5707 RVA: 0x00096BD0 File Offset: 0x00094DD0
		public FunctionOption functionAttribute()
		{
			int num = this.LA(1);
			FunctionOption result;
			switch (num)
			{
			case 60:
			case 61:
				result = this.functionExecuteAsOption();
				break;
			default:
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.functionAttributeNoExecuteAs();
				break;
			}
			return result;
		}

		// Token: 0x0600164C RID: 5708 RVA: 0x00096C24 File Offset: 0x00094E24
		public FunctionOption functionAttributeNoExecuteAs()
		{
			FunctionOption functionOption = base.FragmentFactory.CreateFragment<FunctionOption>();
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_63_.member(this.LA(2)))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					functionOption.OptionKind = TSql80ParserBaseInternal.ParseAlterCreateFunctionWithOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(functionOption, token);
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 100)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(100);
				this.match(105);
				this.match(100);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "RETURNS");
					TSql80ParserBaseInternal.Match(token3, "INPUT");
					functionOption.OptionKind = FunctionOptionKind.ReturnsNullOnNullInput;
					TSql80ParserBaseInternal.UpdateTokenInfo(functionOption, token3);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 105)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token4 = this.LT(1);
				this.match(232);
				this.match(105);
				this.match(100);
				IToken token5 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "CALLED");
					TSql80ParserBaseInternal.Match(token5, "INPUT");
					functionOption.OptionKind = FunctionOptionKind.CalledOnNullInput;
					TSql80ParserBaseInternal.UpdateTokenInfo(functionOption, token5);
				}
			}
			return functionOption;
		}

		// Token: 0x0600164D RID: 5709 RVA: 0x00096DD4 File Offset: 0x00094FD4
		public ExecuteAsFunctionOption functionExecuteAsOption()
		{
			ExecuteAsFunctionOption executeAsFunctionOption = base.FragmentFactory.CreateFragment<ExecuteAsFunctionOption>();
			ExecuteAsClause executeAs = this.executeAsClause(false, false);
			if (this.inputState.guessing == 0)
			{
				executeAsFunctionOption.OptionKind = FunctionOptionKind.ExecuteAs;
				executeAsFunctionOption.ExecuteAs = executeAs;
			}
			return executeAsFunctionOption;
		}

		// Token: 0x0600164E RID: 5710 RVA: 0x00096E14 File Offset: 0x00095014
		public void identifierColumnList(TSqlFragment vParent, IList<ColumnReferenceExpression> columns)
		{
			this.match(191);
			ColumnReferenceExpression item = this.identifierColumnReferenceExpression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, columns, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.identifierColumnReferenceExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, columns, item);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x0600164F RID: 5711 RVA: 0x00096EA8 File Offset: 0x000950A8
		public StatisticsOption createStatisticsStatementWithOption(ref bool isConflictingOption)
		{
			StatisticsOption result;
			if (this.LA(1) == 232 && this.LA(2) == 221)
			{
				result = this.sampleStatisticsOption(ref isConflictingOption);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				result = this.statsStreamStatisticsOption();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_42_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.simpleStatisticsOption(ref isConflictingOption);
			}
			return result;
		}

		// Token: 0x06001650 RID: 5712 RVA: 0x00096F40 File Offset: 0x00095140
		public LiteralStatisticsOption sampleStatisticsOption(ref bool isConflictingOption)
		{
			LiteralStatisticsOption literalStatisticsOption = base.FragmentFactory.CreateFragment<LiteralStatisticsOption>();
			IToken token = this.LT(1);
			this.match(232);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SAMPLE");
				if (isConflictingOption)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46071", token, TSqlParserResource.SQL46071Message, new string[0]);
				}
				else
				{
					isConflictingOption = true;
				}
				literalStatisticsOption.Literal = literal;
			}
			int num = this.LA(1);
			if (num != 116)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token2);
					literalStatisticsOption.OptionKind = TSql80ParserBaseInternal.ParseSampleOptionsWithOption(token2);
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(116);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token3);
					literalStatisticsOption.OptionKind = StatisticsOptionKind.SamplePercent;
				}
			}
			return literalStatisticsOption;
		}

		// Token: 0x06001651 RID: 5713 RVA: 0x00097048 File Offset: 0x00095248
		public LiteralStatisticsOption statsStreamStatisticsOption()
		{
			LiteralStatisticsOption literalStatisticsOption = base.FragmentFactory.CreateFragment<LiteralStatisticsOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.binary();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "STATS_STREAM");
				literalStatisticsOption.OptionKind = StatisticsOptionKind.StatsStream;
				literalStatisticsOption.Literal = literal;
			}
			return literalStatisticsOption;
		}

		// Token: 0x06001652 RID: 5714 RVA: 0x000970B0 File Offset: 0x000952B0
		public StatisticsOption simpleStatisticsOption(ref bool isConflictingOption)
		{
			StatisticsOption statisticsOption = base.FragmentFactory.CreateFragment<StatisticsOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(token, "FULLSCAN"))
				{
					if (isConflictingOption)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46071", token, TSqlParserResource.SQL46071Message, new string[0]);
					}
					else
					{
						isConflictingOption = true;
					}
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token);
				statisticsOption.OptionKind = TSql80ParserBaseInternal.ParseCreateStatisticsWithOption(token);
			}
			return statisticsOption;
		}

		// Token: 0x06001653 RID: 5715 RVA: 0x0009712C File Offset: 0x0009532C
		public void columnNameList(TSqlFragment vParent, IList<Identifier> columnNames)
		{
			this.match(191);
			Identifier item = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(vParent, columnNames, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(vParent, columnNames, item);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06001654 RID: 5716 RVA: 0x000971C0 File Offset: 0x000953C0
		public StatisticsOption updateStatisticsStatementWithOption(ref bool isConflictingOption)
		{
			StatisticsOption result;
			if (this.LA(1) == 232 && this.LA(2) == 221)
			{
				result = this.sampleStatisticsOption(ref isConflictingOption);
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("STATS_STREAM"))
			{
				result = this.statsStreamStatisticsOption();
			}
			else if ((this.LA(1) == 135 || this.LA(1) == 232) && this.LA(2) == 206)
			{
				result = this.updateStatisticsLiteralOption();
			}
			else
			{
				if ((this.LA(1) != 5 && this.LA(1) != 84 && this.LA(1) != 232) || !TSql90ParserInternal.tokenSet_42_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.updateStatisticsSimpleOption(ref isConflictingOption);
			}
			return result;
		}

		// Token: 0x06001655 RID: 5717 RVA: 0x000972B4 File Offset: 0x000954B4
		public LiteralStatisticsOption updateStatisticsLiteralOption()
		{
			LiteralStatisticsOption literalStatisticsOption = base.FragmentFactory.CreateFragment<LiteralStatisticsOption>();
			int num = this.LA(1);
			if (num != 135)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				this.match(206);
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "PAGECOUNT");
					literalStatisticsOption.OptionKind = StatisticsOptionKind.PageCount;
					TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token);
					literalStatisticsOption.Literal = literal;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(135);
				this.match(206);
				Literal literal = this.integer();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(literalStatisticsOption, token2);
					literalStatisticsOption.OptionKind = StatisticsOptionKind.RowCount;
					literalStatisticsOption.Literal = literal;
				}
			}
			return literalStatisticsOption;
		}

		// Token: 0x06001656 RID: 5718 RVA: 0x000973A0 File Offset: 0x000955A0
		public StatisticsOption updateStatisticsSimpleOption(ref bool isConflictingOption)
		{
			StatisticsOption statisticsOption = base.FragmentFactory.CreateFragment<StatisticsOption>();
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 84)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						if (TSql80ParserBaseInternal.TryMatch(token, "FULLSCAN"))
						{
							if (isConflictingOption)
							{
								TSql80ParserBaseInternal.ThrowParseErrorException("SQL46071", token, TSqlParserResource.SQL46071Message, new string[0]);
							}
							else
							{
								isConflictingOption = true;
							}
						}
						TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token);
						statisticsOption.OptionKind = StatisticsOptionHelper.Instance.ParseOption(token);
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(84);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token2);
						statisticsOption.OptionKind = StatisticsOptionKind.Index;
					}
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(statisticsOption, token3);
					statisticsOption.OptionKind = StatisticsOptionKind.All;
				}
			}
			return statisticsOption;
		}

		// Token: 0x06001657 RID: 5719 RVA: 0x000974BC File Offset: 0x000956BC
		public KillStatement killStatement()
		{
			KillStatement killStatement = base.FragmentFactory.CreateFragment<KillStatement>();
			int num = this.LA(1);
			ScalarExpression parameter;
			if (num != 199 && num != 221)
			{
				switch (num)
				{
				case 230:
				case 231:
					parameter = this.stringLiteral();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				parameter = this.signedInteger();
			}
			if (this.inputState.guessing == 0)
			{
				killStatement.Parameter = parameter;
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "STATUSONLY");
					killStatement.WithStatusOnly = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(killStatement, token);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return killStatement;
		}

		// Token: 0x06001658 RID: 5720 RVA: 0x000975DC File Offset: 0x000957DC
		public KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement()
		{
			KillQueryNotificationSubscriptionStatement killQueryNotificationSubscriptionStatement = base.FragmentFactory.CreateFragment<KillQueryNotificationSubscriptionStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUERY");
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "NOTIFICATION");
			}
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "SUBSCRIPTION");
			}
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 221)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				Literal subscriptionId = this.integer();
				if (this.inputState.guessing == 0)
				{
					killQueryNotificationSubscriptionStatement.SubscriptionId = subscriptionId;
				}
			}
			else
			{
				IToken token4 = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					killQueryNotificationSubscriptionStatement.All = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(killQueryNotificationSubscriptionStatement, token4);
				}
			}
			return killQueryNotificationSubscriptionStatement;
		}

		// Token: 0x06001659 RID: 5721 RVA: 0x000976FC File Offset: 0x000958FC
		public KillStatsJobStatement killStatsJobStatement()
		{
			KillStatsJobStatement killStatsJobStatement = base.FragmentFactory.CreateFragment<KillStatsJobStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "STATS");
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "JOB");
			}
			ScalarExpression jobId = this.signedInteger();
			if (this.inputState.guessing == 0)
			{
				killStatsJobStatement.JobId = jobId;
			}
			return killStatsJobStatement;
		}

		// Token: 0x0600165A RID: 5722 RVA: 0x0009778C File Offset: 0x0009598C
		public Permission permission()
		{
			Permission permission = base.FragmentFactory.CreateFragment<Permission>();
			int num = 0;
			while (TSql90ParserInternal.tokenSet_37_.member(this.LA(1)))
			{
				Identifier identifier = this.securityStatementPermission();
				if (this.inputState.guessing == 0)
				{
					if (permission.Identifiers.Count >= 5)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(identifier);
					}
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(permission, permission.Identifiers, identifier);
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num2 = this.LA(1);
			if (num2 <= 105)
			{
				if (num2 == 71 || num2 == 105)
				{
					return permission;
				}
			}
			else
			{
				if (num2 == 151)
				{
					return permission;
				}
				if (num2 == 191)
				{
					this.columnNameList(permission, permission.Columns);
					return permission;
				}
				if (num2 == 198)
				{
					return permission;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600165B RID: 5723 RVA: 0x00097868 File Offset: 0x00095A68
		public Identifier securityStatementPermission()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			TSql80ParserBaseInternal.UpdateTokenInfo(identifier, this.LT(1));
			identifier.SetUnquotedIdentifier(this.LT(1).getText());
			switch (this.LA(1))
			{
			case 4:
				this.match(4);
				return identifier;
			case 5:
				this.match(5);
				return identifier;
			case 6:
				this.match(6);
				return identifier;
			case 7:
				this.match(7);
				return identifier;
			case 8:
				this.match(8);
				return identifier;
			case 9:
				this.match(9);
				return identifier;
			case 10:
				this.match(10);
				return identifier;
			case 11:
				this.match(11);
				return identifier;
			case 12:
				this.match(12);
				return identifier;
			case 13:
				this.match(13);
				return identifier;
			case 14:
				this.match(14);
				return identifier;
			case 15:
				this.match(15);
				return identifier;
			case 16:
				this.match(16);
				return identifier;
			case 17:
				this.match(17);
				return identifier;
			case 18:
				this.match(18);
				return identifier;
			case 19:
				this.match(19);
				return identifier;
			case 20:
				this.match(20);
				return identifier;
			case 21:
				this.match(21);
				return identifier;
			case 22:
				this.match(22);
				return identifier;
			case 23:
				this.match(23);
				return identifier;
			case 24:
				this.match(24);
				return identifier;
			case 25:
				this.match(25);
				return identifier;
			case 26:
				this.match(26);
				return identifier;
			case 27:
				this.match(27);
				return identifier;
			case 28:
				this.match(28);
				return identifier;
			case 29:
				this.match(29);
				return identifier;
			case 30:
				this.match(30);
				return identifier;
			case 31:
				this.match(31);
				return identifier;
			case 32:
				this.match(32);
				return identifier;
			case 33:
				this.match(33);
				return identifier;
			case 34:
				this.match(34);
				return identifier;
			case 35:
				this.match(35);
				return identifier;
			case 36:
				this.match(36);
				return identifier;
			case 37:
				this.match(37);
				return identifier;
			case 38:
				this.match(38);
				return identifier;
			case 39:
				this.match(39);
				return identifier;
			case 40:
				this.match(40);
				return identifier;
			case 41:
				this.match(41);
				return identifier;
			case 42:
				this.match(42);
				return identifier;
			case 43:
				this.match(43);
				return identifier;
			case 44:
				this.match(44);
				return identifier;
			case 45:
				this.match(45);
				return identifier;
			case 46:
				this.match(46);
				return identifier;
			case 47:
				this.match(47);
				return identifier;
			case 48:
				this.match(48);
				return identifier;
			case 49:
				this.match(49);
				return identifier;
			case 50:
				this.match(50);
				return identifier;
			case 51:
				this.match(51);
				return identifier;
			case 52:
				this.match(52);
				return identifier;
			case 53:
				this.match(53);
				return identifier;
			case 54:
				this.match(54);
				return identifier;
			case 55:
				this.match(55);
				return identifier;
			case 56:
				this.match(56);
				return identifier;
			case 57:
				this.match(57);
				return identifier;
			case 58:
				this.match(58);
				return identifier;
			case 59:
				this.match(59);
				return identifier;
			case 60:
				this.match(60);
				return identifier;
			case 61:
				this.match(61);
				return identifier;
			case 62:
				this.match(62);
				return identifier;
			case 63:
				this.match(63);
				return identifier;
			case 64:
				this.match(64);
				return identifier;
			case 65:
				this.match(65);
				return identifier;
			case 66:
				this.match(66);
				return identifier;
			case 67:
				this.match(67);
				return identifier;
			case 68:
				this.match(68);
				return identifier;
			case 69:
				this.match(69);
				return identifier;
			case 70:
				this.match(70);
				return identifier;
			case 72:
				this.match(72);
				return identifier;
			case 73:
				this.match(73);
				return identifier;
			case 74:
				this.match(74);
				return identifier;
			case 76:
				this.match(76);
				return identifier;
			case 77:
				this.match(77);
				return identifier;
			case 78:
				this.match(78);
				return identifier;
			case 79:
				this.match(79);
				return identifier;
			case 80:
				this.match(80);
				return identifier;
			case 81:
				this.match(81);
				return identifier;
			case 82:
				this.match(82);
				return identifier;
			case 83:
				this.match(83);
				return identifier;
			case 84:
				this.match(84);
				return identifier;
			case 85:
				this.match(85);
				return identifier;
			case 86:
				this.match(86);
				return identifier;
			case 87:
				this.match(87);
				return identifier;
			case 88:
				this.match(88);
				return identifier;
			case 89:
				this.match(89);
				return identifier;
			case 90:
				this.match(90);
				return identifier;
			case 91:
				this.match(91);
				return identifier;
			case 92:
				this.match(92);
				return identifier;
			case 93:
				this.match(93);
				return identifier;
			case 94:
				this.match(94);
				return identifier;
			case 95:
				this.match(95);
				return identifier;
			case 96:
				this.match(96);
				return identifier;
			case 97:
				this.match(97);
				return identifier;
			case 98:
				this.match(98);
				return identifier;
			case 99:
				this.match(99);
				return identifier;
			case 100:
				this.match(100);
				return identifier;
			case 101:
				this.match(101);
				return identifier;
			case 102:
				this.match(102);
				return identifier;
			case 103:
				this.match(103);
				return identifier;
			case 104:
				this.match(104);
				return identifier;
			case 106:
				this.match(106);
				return identifier;
			case 107:
				this.match(107);
				return identifier;
			case 108:
				this.match(108);
				return identifier;
			case 109:
				this.match(109);
				return identifier;
			case 110:
				this.match(110);
				return identifier;
			case 111:
				this.match(111);
				return identifier;
			case 112:
				this.match(112);
				return identifier;
			case 113:
				this.match(113);
				return identifier;
			case 114:
				this.match(114);
				return identifier;
			case 115:
				this.match(115);
				return identifier;
			case 116:
				this.match(116);
				return identifier;
			case 117:
				this.match(117);
				return identifier;
			case 118:
				this.match(118);
				return identifier;
			case 119:
				this.match(119);
				return identifier;
			case 120:
				this.match(120);
				return identifier;
			case 121:
				this.match(121);
				return identifier;
			case 122:
				this.match(122);
				return identifier;
			case 123:
				this.match(123);
				return identifier;
			case 124:
				this.match(124);
				return identifier;
			case 125:
				this.match(125);
				return identifier;
			case 126:
				this.match(126);
				return identifier;
			case 127:
				this.match(127);
				return identifier;
			case 128:
				this.match(128);
				return identifier;
			case 129:
				this.match(129);
				return identifier;
			case 130:
				this.match(130);
				return identifier;
			case 131:
				this.match(131);
				return identifier;
			case 132:
				this.match(132);
				return identifier;
			case 133:
				this.match(133);
				return identifier;
			case 134:
				this.match(134);
				return identifier;
			case 135:
				this.match(135);
				return identifier;
			case 136:
				this.match(136);
				return identifier;
			case 137:
				this.match(137);
				return identifier;
			case 138:
				this.match(138);
				return identifier;
			case 139:
				this.match(139);
				return identifier;
			case 140:
				this.match(140);
				return identifier;
			case 141:
				this.match(141);
				return identifier;
			case 142:
				this.match(142);
				return identifier;
			case 143:
				this.match(143);
				return identifier;
			case 144:
				this.match(144);
				return identifier;
			case 145:
				this.match(145);
				return identifier;
			case 146:
				this.match(146);
				return identifier;
			case 147:
				this.match(147);
				return identifier;
			case 148:
				this.match(148);
				return identifier;
			case 149:
				this.match(149);
				return identifier;
			case 150:
				this.match(150);
				return identifier;
			case 152:
				this.match(152);
				return identifier;
			case 153:
				this.match(153);
				return identifier;
			case 154:
				this.match(154);
				return identifier;
			case 155:
				this.match(155);
				return identifier;
			case 156:
				this.match(156);
				return identifier;
			case 157:
				this.match(157);
				return identifier;
			case 158:
				this.match(158);
				return identifier;
			case 159:
				this.match(159);
				return identifier;
			case 160:
				this.match(160);
				return identifier;
			case 161:
				this.match(161);
				return identifier;
			case 162:
				this.match(162);
				return identifier;
			case 163:
				this.match(163);
				return identifier;
			case 164:
				this.match(164);
				return identifier;
			case 165:
				this.match(165);
				return identifier;
			case 166:
				this.match(166);
				return identifier;
			case 167:
				this.match(167);
				return identifier;
			case 168:
				this.match(168);
				return identifier;
			case 170:
				this.match(170);
				return identifier;
			case 171:
				this.match(171);
				return identifier;
			case 172:
				this.match(172);
				return identifier;
			case 173:
				this.match(173);
				return identifier;
			case 174:
				this.match(174);
				return identifier;
			case 175:
				this.match(175);
				return identifier;
			case 176:
				this.match(176);
				return identifier;
			case 177:
				this.match(177);
				return identifier;
			case 178:
				this.match(178);
				return identifier;
			case 179:
				this.match(179);
				return identifier;
			case 180:
				this.match(180);
				return identifier;
			case 181:
				this.match(181);
				return identifier;
			case 232:
				this.LT(1);
				this.match(232);
				return identifier;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600165C RID: 5724 RVA: 0x000985BC File Offset: 0x000967BC
		public void securityTargetObjectCommon(SecurityTargetObject vParent)
		{
			SecurityTargetObjectName securityTargetObjectName = base.FragmentFactory.CreateFragment<SecurityTargetObjectName>();
			IToken token = this.LT(1);
			this.match(105);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			bool flag = false;
			if (TSql90ParserInternal.tokenSet_37_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_64_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					int num = 0;
					while (TSql90ParserInternal.tokenSet_37_.member(this.LA(1)))
					{
						this.securityStatementPermission();
						num++;
					}
					if (num < 1)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(203);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				if (TSql90ParserInternal.tokenSet_37_.member(this.LA(1)) && this.LA(2) == 203)
				{
					Identifier identifier = this.securityStatementPermission();
					if (this.inputState.guessing == 0)
					{
						vParent.ObjectKind = TSql90ParserBaseInternal.ParseSecurityObjectKind(identifier);
					}
				}
				else
				{
					if (!TSql90ParserInternal.tokenSet_37_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_37_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					Identifier identifier = this.securityStatementPermission();
					if (TSql90ParserInternal.tokenSet_37_.member(this.LA(1)) && this.LA(2) == 203)
					{
						Identifier identifier2 = this.securityStatementPermission();
						if (this.inputState.guessing == 0)
						{
							vParent.ObjectKind = TSql90ParserBaseInternal.ParseSecurityObjectKind(identifier, identifier2);
						}
					}
					else
					{
						if (!TSql90ParserInternal.tokenSet_37_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_37_.member(this.LA(2)))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						Identifier identifier2 = this.securityStatementPermission();
						Identifier identifier3 = this.securityStatementPermission();
						if (this.inputState.guessing == 0)
						{
							vParent.ObjectKind = TSql90ParserBaseInternal.ParseSecurityObjectKind(identifier, identifier2, identifier3);
						}
					}
				}
				this.match(203);
			}
			else if ((this.LA(1) != 200 && this.LA(1) != 232 && this.LA(1) != 233) || !TSql90ParserInternal.tokenSet_65_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
			if (this.inputState.guessing == 0)
			{
				securityTargetObjectName.MultiPartIdentifier = multiPartIdentifier;
				vParent.ObjectName = securityTargetObjectName;
			}
		}

		// Token: 0x0600165D RID: 5725 RVA: 0x0009888C File Offset: 0x00096A8C
		public MultiPartIdentifier multiPartIdentifier(int vMaxNumber)
		{
			MultiPartIdentifier multiPartIdentifier = base.FragmentFactory.CreateFragment<MultiPartIdentifier>();
			List<Identifier> otherCollection = this.identifierList(vMaxNumber);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(multiPartIdentifier, multiPartIdentifier.Identifiers, otherCollection);
			}
			return multiPartIdentifier;
		}

		// Token: 0x0600165E RID: 5726 RVA: 0x000988C8 File Offset: 0x00096AC8
		public SecurityTargetObject securityTargetObject(bool vColumnsDisallowed)
		{
			SecurityTargetObject securityTargetObject = base.FragmentFactory.CreateFragment<SecurityTargetObject>();
			this.securityTargetObjectCommon(securityTargetObject);
			int num = this.LA(1);
			if (num != 71 && num != 151)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.columnNameList(securityTargetObject, securityTargetObject.Columns);
				if (this.inputState.guessing == 0 && vColumnsDisallowed)
				{
					TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(securityTargetObject.Columns[0]);
				}
			}
			return securityTargetObject;
		}

		// Token: 0x0600165F RID: 5727 RVA: 0x0009894C File Offset: 0x00096B4C
		public SecurityTargetObject authorizationTargetObject()
		{
			SecurityTargetObject securityTargetObject = base.FragmentFactory.CreateFragment<SecurityTargetObject>();
			this.securityTargetObjectCommon(securityTargetObject);
			return securityTargetObject;
		}

		// Token: 0x06001660 RID: 5728 RVA: 0x00098970 File Offset: 0x00096B70
		public SecurityPrincipal principal()
		{
			SecurityPrincipal securityPrincipal = base.FragmentFactory.CreateFragment<SecurityPrincipal>();
			int num = this.LA(1);
			if (num != 100)
			{
				if (num != 122)
				{
					switch (num)
					{
					case 232:
					case 233:
					{
						Identifier identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							securityPrincipal.PrincipalType = PrincipalType.Identifier;
							securityPrincipal.Identifier = identifier;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					IToken token = this.LT(1);
					this.match(122);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(securityPrincipal, token);
						securityPrincipal.PrincipalType = PrincipalType.Public;
					}
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(100);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(securityPrincipal, token2);
					securityPrincipal.PrincipalType = PrincipalType.Null;
				}
			}
			return securityPrincipal;
		}

		// Token: 0x06001661 RID: 5729 RVA: 0x00098A4C File Offset: 0x00096C4C
		public void permissionsList(SecurityStatement vParent, ref bool vContainsColumnList)
		{
			Permission permission = this.permission();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Permission>(vParent, vParent.Permissions, permission);
				vContainsColumnList = (vContainsColumnList || (permission.Columns != null && permission.Columns.Count > 0));
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				permission = this.permission();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Permission>(vParent, vParent.Permissions, permission);
					vContainsColumnList = (vContainsColumnList || (permission.Columns != null && permission.Columns.Count > 0));
				}
			}
		}

		// Token: 0x06001662 RID: 5730 RVA: 0x00098AFC File Offset: 0x00096CFC
		public void securityStatementTargetObjectOpt(SecurityStatement vParent, bool vPermissionContainsColumns)
		{
			int num = this.LA(1);
			if (num != 71)
			{
				if (num != 105)
				{
					if (num != 151)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					SecurityTargetObject securityTargetObject = this.securityTargetObject(vPermissionContainsColumns);
					if (this.inputState.guessing == 0)
					{
						vParent.SecurityTargetObject = securityTargetObject;
						return;
					}
				}
			}
		}

		// Token: 0x06001663 RID: 5731 RVA: 0x00098B58 File Offset: 0x00096D58
		public void securityStatementPrincipalList(SecurityStatement vParent)
		{
			SecurityPrincipal item = this.principal();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SecurityPrincipal>(vParent, vParent.Principals, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.principal();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SecurityPrincipal>(vParent, vParent.Principals, item);
				}
			}
		}

		// Token: 0x06001664 RID: 5732 RVA: 0x00098BC4 File Offset: 0x00096DC4
		public void securityStatementAsClauseOpt(SecurityStatement vParent)
		{
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return;
						}
						switch (num)
						{
						case 4:
						case 6:
							return;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						{
							this.match(9);
							Identifier asClause = this.identifier();
							if (this.inputState.guessing == 0)
							{
								vParent.AsClause = asClause;
								return;
							}
							return;
						}
						case 10:
						case 11:
						case 14:
						case 16:
							break;
						case 12:
						case 13:
						case 15:
						case 17:
							return;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return;
							default:
								if (num == 28)
								{
									return;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95 || num == 106 || num == 119)
					{
						return;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return;
				}
				switch (num)
				{
				case 180:
				case 181:
					return;
				default:
					if (num == 191)
					{
						return;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return;
				}
				switch (num)
				{
				case 219:
				case 220:
					return;
				default:
					if (num == 232)
					{
						return;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001665 RID: 5733 RVA: 0x00098E6C File Offset: 0x0009706C
		public WaitForSupportedStatement waitforInnerStatement()
		{
			WaitForSupportedStatement result;
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_30_.member(this.LA(2)) && base.NextTokenMatches("RECEIVE"))
			{
				result = this.receiveStatement();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.getConversationGroupStatement();
			}
			return result;
		}

		// Token: 0x06001666 RID: 5734 RVA: 0x00098EEC File Offset: 0x000970EC
		public ColumnReferenceExpression column()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			columnReferenceExpression.ColumnType = ColumnType.Regular;
			int num = this.LA(1);
			if (num > 136)
			{
				if (num != 200)
				{
					if (num == 227)
					{
						goto IL_35C;
					}
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_365;
					}
				}
				MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
				if (this.inputState.guessing == 0)
				{
					columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
				}
				int num2 = this.LA(1);
				if (num2 <= 95)
				{
					if (num2 <= 35)
					{
						if (num2 <= 17)
						{
							if (num2 == 1)
							{
								goto IL_378;
							}
							switch (num2)
							{
							case 4:
							case 6:
								goto IL_378;
							case 5:
								break;
							default:
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									goto IL_378;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_378;
							default:
								if (num2 == 28)
								{
									goto IL_378;
								}
								switch (num2)
								{
								case 33:
								case 35:
									goto IL_378;
								}
								break;
							}
						}
					}
					else if (num2 <= 82)
					{
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_378;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								goto IL_378;
							default:
								if (num2 == 82)
								{
									goto IL_378;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 86 || num2 == 92 || num2 == 95)
					{
						goto IL_378;
					}
				}
				else if (num2 <= 172)
				{
					if (num2 <= 119)
					{
						if (num2 == 106 || num2 == 111 || num2 == 119)
						{
							goto IL_378;
						}
					}
					else
					{
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_378;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num2)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								goto IL_378;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num2)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									goto IL_378;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 192)
				{
					if (num2 == 176)
					{
						goto IL_378;
					}
					switch (num2)
					{
					case 180:
					case 181:
						goto IL_378;
					default:
						switch (num2)
						{
						case 191:
						case 192:
							goto IL_378;
						}
						break;
					}
				}
				else if (num2 <= 204)
				{
					switch (num2)
					{
					case 198:
						goto IL_378;
					case 199:
						break;
					case 200:
						this.match(200);
						this.specialColumn(columnReferenceExpression);
						goto IL_378;
					default:
						if (num2 == 204)
						{
							goto IL_378;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 219:
					case 220:
					case 221:
					case 224:
						goto IL_378;
					case 222:
					case 223:
						break;
					default:
						switch (num2)
						{
						case 232:
						case 234:
							goto IL_378;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (num != 81 && num != 136)
			{
				goto IL_365;
			}
			IL_35C:
			this.specialColumn(columnReferenceExpression);
			goto IL_378;
			IL_365:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_378:
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckSpecialColumn(columnReferenceExpression);
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
			}
			return columnReferenceExpression;
		}

		// Token: 0x06001667 RID: 5735 RVA: 0x0009928C File Offset: 0x0009748C
		public ValueExpression binaryOrVariable()
		{
			int num = this.LA(1);
			ValueExpression result;
			if (num != 224)
			{
				if (num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.variable();
			}
			else
			{
				result = this.binary();
			}
			return result;
		}

		// Token: 0x06001668 RID: 5736 RVA: 0x000992DC File Offset: 0x000974DC
		public ValueExpression integerOrVariable()
		{
			int num = this.LA(1);
			ValueExpression result;
			if (num != 221)
			{
				if (num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.variable();
			}
			else
			{
				result = this.integer();
			}
			return result;
		}

		// Token: 0x06001669 RID: 5737 RVA: 0x0009932C File Offset: 0x0009752C
		public void modificationTextStatement(TextModificationStatement vParent)
		{
			int num = this.LA(1);
			if (num <= 136)
			{
				if (num != 17)
				{
					if (num == 81 || num == 136)
					{
						goto IL_85;
					}
				}
				else
				{
					this.match(17);
					if (this.inputState.guessing == 0)
					{
						vParent.Bulk = true;
						goto IL_85;
					}
					goto IL_85;
				}
			}
			else
			{
				if (num == 200 || num == 227)
				{
					goto IL_85;
				}
				switch (num)
				{
				case 232:
				case 233:
					goto IL_85;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_85:
			ColumnReferenceExpression column = this.column();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(column, true);
				vParent.Column = column;
			}
			int num2 = this.LA(1);
			ValueExpression textId;
			if (num2 != 221)
			{
				if (num2 != 224 && num2 != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				textId = this.binaryOrVariable();
			}
			else
			{
				textId = this.integer();
			}
			if (this.inputState.guessing == 0)
			{
				vParent.TextId = textId;
			}
			int num3 = this.LA(1);
			if (num3 <= 199)
			{
				if (num3 == 100 || num3 == 171 || num3 == 199)
				{
					return;
				}
			}
			else
			{
				if (num3 == 221 || num3 == 224)
				{
					return;
				}
				switch (num3)
				{
				case 230:
				case 231:
				case 234:
					return;
				case 232:
				{
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "TIMESTAMP");
					}
					this.match(206);
					Literal timestamp = this.binary();
					if (this.inputState.guessing == 0)
					{
						vParent.Timestamp = timestamp;
						return;
					}
					return;
				}
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600166A RID: 5738 RVA: 0x00099518 File Offset: 0x00097718
		public ScalarExpression signedIntegerOrVariableOrNull()
		{
			int num = this.LA(1);
			if (num <= 199)
			{
				if (num == 100)
				{
					return this.nullLiteral();
				}
				if (num != 199)
				{
					goto IL_41;
				}
			}
			else if (num != 221 && num != 234)
			{
				goto IL_41;
			}
			return this.signedIntegerOrVariable();
			IL_41:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600166B RID: 5739 RVA: 0x0009957C File Offset: 0x0009777C
		public void modificationTextStatementWithLog(TextModificationStatement vParent)
		{
			this.match(171);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LOG");
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.WithLog = true;
			}
		}

		// Token: 0x0600166C RID: 5740 RVA: 0x000995D0 File Offset: 0x000977D0
		public ValueExpression writeString()
		{
			int num = this.LA(1);
			ValueExpression result;
			if (num != 100)
			{
				if (num != 224)
				{
					switch (num)
					{
					case 230:
					case 231:
						return this.stringLiteral();
					case 234:
						return this.variable();
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.binary();
			}
			else
			{
				result = this.nullLiteral();
			}
			return result;
		}

		// Token: 0x0600166D RID: 5741 RVA: 0x0009964C File Offset: 0x0009784C
		public NullLiteral nullLiteral()
		{
			NullLiteral nullLiteral = base.FragmentFactory.CreateFragment<NullLiteral>();
			IToken token = this.LT(1);
			this.match(100);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(nullLiteral, token);
				nullLiteral.Value = token.getText();
			}
			return nullLiteral;
		}

		// Token: 0x0600166E RID: 5742 RVA: 0x00099698 File Offset: 0x00097898
		public VariableReference variable()
		{
			VariableReference variableReference = base.FragmentFactory.CreateFragment<VariableReference>();
			IToken token = this.LT(1);
			this.match(234);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(variableReference, token);
				variableReference.Name = token.getText();
			}
			return variableReference;
		}

		// Token: 0x0600166F RID: 5743 RVA: 0x000996E8 File Offset: 0x000978E8
		public OpenMasterKeyStatement openMasterKeyStatement()
		{
			OpenMasterKeyStatement openMasterKeyStatement = base.FragmentFactory.CreateFragment<OpenMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
			}
			this.match(91);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "DECRYPTION");
			}
			this.match(18);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "PASSWORD");
			}
			this.match(206);
			Literal password = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				openMasterKeyStatement.Password = password;
			}
			return openMasterKeyStatement;
		}

		// Token: 0x06001670 RID: 5744 RVA: 0x000997C4 File Offset: 0x000979C4
		public OpenSymmetricKeyStatement openSymmetricKeyStatement()
		{
			OpenSymmetricKeyStatement openSymmetricKeyStatement = base.FragmentFactory.CreateFragment<OpenSymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
			}
			this.match(91);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				openSymmetricKeyStatement.Name = name;
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "DECRYPTION");
			}
			this.match(18);
			CryptoMechanism decryptionMechanism = this.decryptionMechanism();
			if (this.inputState.guessing == 0)
			{
				openSymmetricKeyStatement.DecryptionMechanism = decryptionMechanism;
			}
			return openSymmetricKeyStatement;
		}

		// Token: 0x06001671 RID: 5745 RVA: 0x00099880 File Offset: 0x00097A80
		public OpenCursorStatement openCursorStatement()
		{
			OpenCursorStatement openCursorStatement = base.FragmentFactory.CreateFragment<OpenCursorStatement>();
			CursorId cursor = this.cursorId();
			if (this.inputState.guessing == 0)
			{
				openCursorStatement.Cursor = cursor;
			}
			return openCursorStatement;
		}

		// Token: 0x06001672 RID: 5746 RVA: 0x000998B8 File Offset: 0x00097AB8
		public CryptoMechanism decryptionMechanism()
		{
			CryptoMechanism cryptoMechanism;
			if (this.LA(1) == 232 && this.LA(2) == 206)
			{
				cryptoMechanism = this.passwordCrypto();
			}
			else if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				cryptoMechanism = this.certificateCrypto();
				if (this.LA(1) == 171 && this.LA(2) == 232)
				{
					this.match(171);
					this.decryptionMechanismPassword(cryptoMechanism);
				}
				else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 91)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				cryptoMechanism = this.keyCrypto();
				if (this.LA(1) == 171 && this.LA(2) == 232)
				{
					IToken token = this.LT(1);
					this.match(171);
					this.decryptionMechanismPassword(cryptoMechanism);
					if (this.inputState.guessing == 0 && cryptoMechanism.CryptoMechanismType == CryptoMechanismType.SymmetricKey)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
				}
				else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return cryptoMechanism;
		}

		// Token: 0x06001673 RID: 5747 RVA: 0x00099A58 File Offset: 0x00097C58
		public void decryptionMechanismPassword(CryptoMechanism vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal passwordOrSignature = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PASSWORD");
				vParent.PasswordOrSignature = passwordOrSignature;
			}
		}

		// Token: 0x06001674 RID: 5748 RVA: 0x00099AAC File Offset: 0x00097CAC
		public CursorId cursorId()
		{
			CursorId cursorId = base.FragmentFactory.CreateFragment<CursorId>();
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("GLOBAL"))
			{
				IToken token = this.LT(1);
				this.match(232);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "GLOBAL");
					cursorId.Name = base.IdentifierOrValueExpression(identifier);
					cursorId.IsGlobal = true;
				}
			}
			else
			{
				if (this.LA(1) < 232 || this.LA(1) > 234 || !TSql90ParserInternal.tokenSet_66_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IdentifierOrValueExpression name = this.identifierOrVariable();
				if (this.inputState.guessing == 0)
				{
					cursorId.Name = name;
					cursorId.IsGlobal = false;
				}
			}
			return cursorId;
		}

		// Token: 0x06001675 RID: 5749 RVA: 0x00099BB0 File Offset: 0x00097DB0
		public CloseMasterKeyStatement closeMasterKeyStatement()
		{
			CloseMasterKeyStatement closeMasterKeyStatement = base.FragmentFactory.CreateFragment<CloseMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
			}
			IToken token2 = this.LT(1);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(closeMasterKeyStatement, token2);
			}
			return closeMasterKeyStatement;
		}

		// Token: 0x06001676 RID: 5750 RVA: 0x00099C20 File Offset: 0x00097E20
		public CloseSymmetricKeyStatement closeSymmetricKeyStatement()
		{
			CloseSymmetricKeyStatement closeSymmetricKeyStatement = base.FragmentFactory.CreateFragment<CloseSymmetricKeyStatement>();
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
				}
				this.match(91);
				Identifier name = this.identifier();
				if (this.inputState.guessing == 0)
				{
					closeSymmetricKeyStatement.Name = name;
				}
			}
			else
			{
				this.match(5);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "SYMMETRIC");
					closeSymmetricKeyStatement.All = true;
				}
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "KEYS");
					TSql80ParserBaseInternal.UpdateTokenInfo(closeSymmetricKeyStatement, token3);
				}
			}
			return closeSymmetricKeyStatement;
		}

		// Token: 0x06001677 RID: 5751 RVA: 0x00099D34 File Offset: 0x00097F34
		public CloseCursorStatement closeCursorStatement()
		{
			CloseCursorStatement closeCursorStatement = base.FragmentFactory.CreateFragment<CloseCursorStatement>();
			CursorId cursor = this.cursorId();
			if (this.inputState.guessing == 0)
			{
				closeCursorStatement.Cursor = cursor;
			}
			return closeCursorStatement;
		}

		// Token: 0x06001678 RID: 5752 RVA: 0x00099D6C File Offset: 0x00097F6C
		public FetchCursorStatement rowSelector()
		{
			FetchCursorStatement fetchCursorStatement = base.FragmentFactory.CreateFragment<FetchCursorStatement>();
			if (this.LA(1) >= 232 && this.LA(1) <= 234 && TSql90ParserInternal.tokenSet_67_.member(this.LA(2)))
			{
				CursorId cursor = this.cursorId();
				if (this.inputState.guessing == 0)
				{
					fetchCursorStatement.Cursor = cursor;
				}
			}
			else if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_68_.member(this.LA(2)))
			{
				FetchType fetchType = this.fetchType();
				this.match(71);
				CursorId cursor = this.cursorId();
				if (this.inputState.guessing == 0)
				{
					fetchCursorStatement.Cursor = cursor;
					fetchCursorStatement.FetchType = fetchType;
				}
			}
			else
			{
				if (this.LA(1) != 71)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(71);
				CursorId cursor = this.cursorId();
				if (this.inputState.guessing == 0)
				{
					fetchCursorStatement.Cursor = cursor;
				}
			}
			return fetchCursorStatement;
		}

		// Token: 0x06001679 RID: 5753 RVA: 0x00099E70 File Offset: 0x00098070
		public FetchType fetchType()
		{
			FetchType fetchType = base.FragmentFactory.CreateFragment<FetchType>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				fetchType.Orientation = FetchOrientationHelper.Instance.ParseOption(token);
			}
			int num = this.LA(1);
			ScalarExpression rowOffset;
			if (num <= 199)
			{
				if (num != 71)
				{
					if (num != 199)
					{
						goto IL_10E;
					}
				}
				else
				{
					if (this.inputState.guessing == 0 && (fetchType.Orientation == FetchOrientation.Relative || fetchType.Orientation == FetchOrientation.Absolute))
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
					}
					return fetchType;
				}
			}
			else if (num != 221)
			{
				if (num != 234)
				{
					goto IL_10E;
				}
				rowOffset = this.variable();
				if (this.inputState.guessing != 0)
				{
					return fetchType;
				}
				if (fetchType.Orientation != FetchOrientation.Relative && fetchType.Orientation != FetchOrientation.Absolute)
				{
					throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
				}
				fetchType.RowOffset = rowOffset;
				return fetchType;
			}
			rowOffset = this.signedInteger();
			if (this.inputState.guessing != 0)
			{
				return fetchType;
			}
			if (fetchType.Orientation != FetchOrientation.Relative && fetchType.Orientation != FetchOrientation.Absolute)
			{
				throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token);
			}
			fetchType.RowOffset = rowOffset;
			return fetchType;
			IL_10E:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600167A RID: 5754 RVA: 0x00099FA0 File Offset: 0x000981A0
		public DropDatabaseStatement dropDatabaseStatement()
		{
			DropDatabaseStatement dropDatabaseStatement = base.FragmentFactory.CreateFragment<DropDatabaseStatement>();
			this.match(43);
			Identifier item = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropDatabaseStatement, dropDatabaseStatement.Databases, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropDatabaseStatement, dropDatabaseStatement.Databases, item);
				}
			}
			return dropDatabaseStatement;
		}

		// Token: 0x0600167B RID: 5755 RVA: 0x0009A020 File Offset: 0x00098220
		public DropIndexStatement dropIndexStatement()
		{
			DropIndexStatement dropIndexStatement = base.FragmentFactory.CreateFragment<DropIndexStatement>();
			this.match(84);
			DropIndexClauseBase item = this.dropIndexClause();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DropIndexClauseBase>(dropIndexStatement, dropIndexStatement.DropIndexClauses, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.dropIndexClause();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DropIndexClauseBase>(dropIndexStatement, dropIndexStatement.DropIndexClauses, item);
				}
			}
			return dropIndexStatement;
		}

		// Token: 0x0600167C RID: 5756 RVA: 0x0009A0A0 File Offset: 0x000982A0
		public DropStatisticsStatement dropStatisticsStatement()
		{
			DropStatisticsStatement dropStatisticsStatement = base.FragmentFactory.CreateFragment<DropStatisticsStatement>();
			this.match(146);
			ChildObjectName item = this.statisticsDropObject();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ChildObjectName>(dropStatisticsStatement, dropStatisticsStatement.Objects, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.statisticsDropObject();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ChildObjectName>(dropStatisticsStatement, dropStatisticsStatement.Objects, item);
				}
			}
			return dropStatisticsStatement;
		}

		// Token: 0x0600167D RID: 5757 RVA: 0x0009A124 File Offset: 0x00098324
		public DropTableStatement dropTableStatement()
		{
			DropTableStatement dropTableStatement = base.FragmentFactory.CreateFragment<DropTableStatement>();
			this.match(148);
			this.dropObjectList(dropTableStatement, false);
			return dropTableStatement;
		}

		// Token: 0x0600167E RID: 5758 RVA: 0x0009A154 File Offset: 0x00098354
		public DropProcedureStatement dropProcedureStatement()
		{
			DropProcedureStatement dropProcedureStatement = base.FragmentFactory.CreateFragment<DropProcedureStatement>();
			switch (this.LA(1))
			{
			case 120:
				this.match(120);
				break;
			case 121:
				this.match(121);
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.dropObjectList(dropProcedureStatement, true);
			return dropProcedureStatement;
		}

		// Token: 0x0600167F RID: 5759 RVA: 0x0009A1B8 File Offset: 0x000983B8
		public DropFunctionStatement dropFunctionStatement()
		{
			DropFunctionStatement dropFunctionStatement = base.FragmentFactory.CreateFragment<DropFunctionStatement>();
			this.match(73);
			this.dropObjectList(dropFunctionStatement, true);
			return dropFunctionStatement;
		}

		// Token: 0x06001680 RID: 5760 RVA: 0x0009A1E4 File Offset: 0x000983E4
		public DropViewStatement dropViewStatement()
		{
			DropViewStatement dropViewStatement = base.FragmentFactory.CreateFragment<DropViewStatement>();
			this.match(166);
			this.dropObjectList(dropViewStatement, true);
			return dropViewStatement;
		}

		// Token: 0x06001681 RID: 5761 RVA: 0x0009A214 File Offset: 0x00098414
		public DropDefaultStatement dropDefaultStatement()
		{
			DropDefaultStatement dropDefaultStatement = base.FragmentFactory.CreateFragment<DropDefaultStatement>();
			this.match(47);
			this.dropObjectList(dropDefaultStatement, true);
			return dropDefaultStatement;
		}

		// Token: 0x06001682 RID: 5762 RVA: 0x0009A240 File Offset: 0x00098440
		public DropRuleStatement dropRuleStatement()
		{
			DropRuleStatement dropRuleStatement = base.FragmentFactory.CreateFragment<DropRuleStatement>();
			this.match(137);
			this.dropObjectList(dropRuleStatement, true);
			return dropRuleStatement;
		}

		// Token: 0x06001683 RID: 5763 RVA: 0x0009A270 File Offset: 0x00098470
		public DropTriggerStatement dropTriggerStatement()
		{
			DropTriggerStatement dropTriggerStatement = base.FragmentFactory.CreateFragment<DropTriggerStatement>();
			this.match(155);
			this.dropObjectList(dropTriggerStatement, true);
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return dropTriggerStatement;
						}
						switch (num)
						{
						case 4:
						case 6:
							return dropTriggerStatement;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return dropTriggerStatement;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return dropTriggerStatement;
							default:
								if (num == 28)
								{
									return dropTriggerStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						return dropTriggerStatement;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return dropTriggerStatement;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								return dropTriggerStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return dropTriggerStatement;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 95)
					{
						return dropTriggerStatement;
					}
					switch (num)
					{
					case 105:
					{
						this.match(105);
						TriggerScope triggerScope = this.triggerScope(dropTriggerStatement);
						if (this.inputState.guessing == 0)
						{
							dropTriggerStatement.TriggerScope = triggerScope;
							return dropTriggerStatement;
						}
						return dropTriggerStatement;
					}
					case 106:
						return dropTriggerStatement;
					default:
						if (num == 119)
						{
							return dropTriggerStatement;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return dropTriggerStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return dropTriggerStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return dropTriggerStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return dropTriggerStatement;
				}
				switch (num)
				{
				case 180:
				case 181:
					return dropTriggerStatement;
				default:
					if (num == 191)
					{
						return dropTriggerStatement;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return dropTriggerStatement;
				}
				switch (num)
				{
				case 219:
				case 220:
					return dropTriggerStatement;
				default:
					if (num == 232)
					{
						return dropTriggerStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001684 RID: 5764 RVA: 0x0009A534 File Offset: 0x00098734
		public DropSchemaStatement dropSchemaStatement()
		{
			DropSchemaStatement dropSchemaStatement = base.FragmentFactory.CreateFragment<DropSchemaStatement>();
			this.match(139);
			SchemaObjectName schema = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				dropSchemaStatement.Schema = schema;
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_336;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_336;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
						case 22:
						case 23:
							goto IL_336;
						case 14:
						case 16:
						case 18:
						case 20:
						case 21:
							break;
						case 19:
						{
							IToken token = this.LT(1);
							this.match(19);
							if (this.inputState.guessing == 0)
							{
								dropSchemaStatement.DropBehavior = DropSchemaBehavior.Cascade;
								TSql80ParserBaseInternal.UpdateTokenInfo(dropSchemaStatement, token);
								goto IL_336;
							}
							goto IL_336;
						}
						default:
							if (num == 28)
							{
								goto IL_336;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_336;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_336;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_336;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_336;
				}
			}
			else if (num <= 172)
			{
				if (num <= 106)
				{
					if (num == 95 || num == 106)
					{
						goto IL_336;
					}
				}
				else
				{
					switch (num)
					{
					case 119:
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_336;
					case 120:
					case 121:
					case 122:
					case 124:
					case 127:
					case 128:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					case 130:
					{
						IToken token2 = this.LT(1);
						this.match(130);
						if (this.inputState.guessing == 0)
						{
							dropSchemaStatement.DropBehavior = DropSchemaBehavior.Restrict;
							TSql80ParserBaseInternal.UpdateTokenInfo(dropSchemaStatement, token2);
							goto IL_336;
						}
						goto IL_336;
					}
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_336;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_336;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_336;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_336;
				default:
					if (num == 191)
					{
						goto IL_336;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_336;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_336;
				default:
					if (num == 232)
					{
						goto IL_336;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_336:
			if (this.inputState.guessing == 0 && dropSchemaStatement.Schema.SchemaIdentifier != null && dropSchemaStatement.DropBehavior == DropSchemaBehavior.None)
			{
				throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(dropSchemaStatement.Schema.SchemaIdentifier);
			}
			return dropSchemaStatement;
		}

		// Token: 0x06001685 RID: 5765 RVA: 0x0009A8AC File Offset: 0x00098AAC
		public DropAggregateStatement dropAggregateStatement()
		{
			DropAggregateStatement dropAggregateStatement = base.FragmentFactory.CreateFragment<DropAggregateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.dropObjectList(dropAggregateStatement, true);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AGGREGATE");
			}
			return dropAggregateStatement;
		}

		// Token: 0x06001686 RID: 5766 RVA: 0x0009A8FC File Offset: 0x00098AFC
		public DropAssemblyStatement dropAssemblyStatement()
		{
			DropAssemblyStatement dropAssemblyStatement = base.FragmentFactory.CreateFragment<DropAssemblyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.dropObjectList(dropAssemblyStatement, true);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "NO");
					TSql80ParserBaseInternal.Match(token3, "DEPENDENTS");
					dropAssemblyStatement.WithNoDependents = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(dropAssemblyStatement, token3);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return dropAssemblyStatement;
		}

		// Token: 0x06001687 RID: 5767 RVA: 0x0009AA08 File Offset: 0x00098C08
		public TSqlStatement dropPartitionStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PARTITION");
			}
			int num = this.LA(1);
			TSqlStatement result;
			if (num != 73)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.dropPartitionSchemeStatement();
			}
			else
			{
				result = this.dropPartitionFunctionStatement();
			}
			return result;
		}

		// Token: 0x06001688 RID: 5768 RVA: 0x0009AA80 File Offset: 0x00098C80
		public DropSynonymStatement dropSynonymStatement()
		{
			DropSynonymStatement dropSynonymStatement = base.FragmentFactory.CreateFragment<DropSynonymStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.dropObjectList(dropSynonymStatement, true);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYNONYM");
			}
			return dropSynonymStatement;
		}

		// Token: 0x06001689 RID: 5769 RVA: 0x0009AAD0 File Offset: 0x00098CD0
		public DropApplicationRoleStatement dropApplicationRoleStatement()
		{
			DropApplicationRoleStatement dropApplicationRoleStatement = base.FragmentFactory.CreateFragment<DropApplicationRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "APPLICATION");
				TSql80ParserBaseInternal.Match(token2, "ROLE");
				dropApplicationRoleStatement.Name = name;
			}
			return dropApplicationRoleStatement;
		}

		// Token: 0x0600168A RID: 5770 RVA: 0x0009AB48 File Offset: 0x00098D48
		public TSqlStatement dropFulltextStatements()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "FULLTEXT");
			}
			int num = this.LA(1);
			TSqlStatement result;
			if (num != 84)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.dropFulltextCatalogStatement();
			}
			else
			{
				result = this.dropFulltextIndexStatement();
			}
			return result;
		}

		// Token: 0x0600168B RID: 5771 RVA: 0x0009ABC0 File Offset: 0x00098DC0
		public DropLoginStatement dropLoginStatement()
		{
			DropLoginStatement dropLoginStatement = base.FragmentFactory.CreateFragment<DropLoginStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LOGIN");
				dropLoginStatement.Name = name;
			}
			return dropLoginStatement;
		}

		// Token: 0x0600168C RID: 5772 RVA: 0x0009AC18 File Offset: 0x00098E18
		public DropRoleStatement dropRoleStatement()
		{
			DropRoleStatement dropRoleStatement = base.FragmentFactory.CreateFragment<DropRoleStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROLE");
				dropRoleStatement.Name = name;
			}
			return dropRoleStatement;
		}

		// Token: 0x0600168D RID: 5773 RVA: 0x0009AC70 File Offset: 0x00098E70
		public DropMasterKeyStatement dropMasterKeyStatement()
		{
			DropMasterKeyStatement dropMasterKeyStatement = base.FragmentFactory.CreateFragment<DropMasterKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MASTER");
				TSql80ParserBaseInternal.UpdateTokenInfo(dropMasterKeyStatement, token2);
			}
			return dropMasterKeyStatement;
		}

		// Token: 0x0600168E RID: 5774 RVA: 0x0009ACD0 File Offset: 0x00098ED0
		public DropSymmetricKeyStatement dropSymmetricKeyStatement()
		{
			DropSymmetricKeyStatement dropSymmetricKeyStatement = base.FragmentFactory.CreateFragment<DropSymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SYMMETRIC");
				dropSymmetricKeyStatement.Name = name;
			}
			return dropSymmetricKeyStatement;
		}

		// Token: 0x0600168F RID: 5775 RVA: 0x0009AD30 File Offset: 0x00098F30
		public DropAsymmetricKeyStatement dropAsymmetricKeyStatement()
		{
			DropAsymmetricKeyStatement dropAsymmetricKeyStatement = base.FragmentFactory.CreateFragment<DropAsymmetricKeyStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(91);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ASYMMETRIC");
				dropAsymmetricKeyStatement.Name = name;
			}
			return dropAsymmetricKeyStatement;
		}

		// Token: 0x06001690 RID: 5776 RVA: 0x0009AD90 File Offset: 0x00098F90
		public DropCertificateStatement dropCertificateStatement()
		{
			DropCertificateStatement dropCertificateStatement = base.FragmentFactory.CreateFragment<DropCertificateStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CERTIFICATE");
				dropCertificateStatement.Name = name;
			}
			return dropCertificateStatement;
		}

		// Token: 0x06001691 RID: 5777 RVA: 0x0009ADE8 File Offset: 0x00098FE8
		public DropCredentialStatement dropCredentialStatement()
		{
			DropCredentialStatement dropCredentialStatement = base.FragmentFactory.CreateFragment<DropCredentialStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CREDENTIAL");
				dropCredentialStatement.Name = name;
			}
			return dropCredentialStatement;
		}

		// Token: 0x06001692 RID: 5778 RVA: 0x0009AE40 File Offset: 0x00099040
		public DropTypeStatement dropTypeStatement()
		{
			DropTypeStatement dropTypeStatement = base.FragmentFactory.CreateFragment<DropTypeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName name = this.dropObject(false);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "TYPE");
				dropTypeStatement.Name = name;
			}
			return dropTypeStatement;
		}

		// Token: 0x06001693 RID: 5779 RVA: 0x0009AE98 File Offset: 0x00099098
		public DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement()
		{
			DropXmlSchemaCollectionStatement dropXmlSchemaCollectionStatement = base.FragmentFactory.CreateFragment<DropXmlSchemaCollectionStatement>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(139);
			IToken token2 = this.LT(1);
			this.match(232);
			SchemaObjectName name = this.schemaObjectNonEmptyTwoPartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
				TSql80ParserBaseInternal.Match(token2, "COLLECTION");
				dropXmlSchemaCollectionStatement.Name = name;
			}
			return dropXmlSchemaCollectionStatement;
		}

		// Token: 0x06001694 RID: 5780 RVA: 0x0009AF18 File Offset: 0x00099118
		public DropContractStatement dropContractStatement()
		{
			DropContractStatement dropContractStatement = base.FragmentFactory.CreateFragment<DropContractStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CONTRACT");
				dropContractStatement.Name = name;
			}
			return dropContractStatement;
		}

		// Token: 0x06001695 RID: 5781 RVA: 0x0009AF70 File Offset: 0x00099170
		public DropQueueStatement dropQueueStatement()
		{
			DropQueueStatement dropQueueStatement = base.FragmentFactory.CreateFragment<DropQueueStatement>();
			IToken token = this.LT(1);
			this.match(232);
			SchemaObjectName name = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "QUEUE");
				dropQueueStatement.Name = name;
			}
			return dropQueueStatement;
		}

		// Token: 0x06001696 RID: 5782 RVA: 0x0009AFC8 File Offset: 0x000991C8
		public DropServiceStatement dropServiceStatement()
		{
			DropServiceStatement dropServiceStatement = base.FragmentFactory.CreateFragment<DropServiceStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SERVICE");
				dropServiceStatement.Name = name;
			}
			return dropServiceStatement;
		}

		// Token: 0x06001697 RID: 5783 RVA: 0x0009B020 File Offset: 0x00099220
		public DropRouteStatement dropRouteStatement()
		{
			DropRouteStatement dropRouteStatement = base.FragmentFactory.CreateFragment<DropRouteStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ROUTE");
				dropRouteStatement.Name = name;
			}
			return dropRouteStatement;
		}

		// Token: 0x06001698 RID: 5784 RVA: 0x0009B078 File Offset: 0x00099278
		public DropMessageTypeStatement dropMessageTypeStatement()
		{
			DropMessageTypeStatement dropMessageTypeStatement = base.FragmentFactory.CreateFragment<DropMessageTypeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MESSAGE");
				TSql80ParserBaseInternal.Match(token2, "TYPE");
				dropMessageTypeStatement.Name = name;
			}
			return dropMessageTypeStatement;
		}

		// Token: 0x06001699 RID: 5785 RVA: 0x0009B0F0 File Offset: 0x000992F0
		public DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement()
		{
			DropRemoteServiceBindingStatement dropRemoteServiceBindingStatement = base.FragmentFactory.CreateFragment<DropRemoteServiceBindingStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "REMOTE");
				TSql80ParserBaseInternal.Match(token2, "SERVICE");
				TSql80ParserBaseInternal.Match(token3, "BINDING");
				dropRemoteServiceBindingStatement.Name = name;
			}
			return dropRemoteServiceBindingStatement;
		}

		// Token: 0x0600169A RID: 5786 RVA: 0x0009B188 File Offset: 0x00099388
		public DropEndpointStatement dropEndpointStatement()
		{
			DropEndpointStatement dropEndpointStatement = base.FragmentFactory.CreateFragment<DropEndpointStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ENDPOINT");
				dropEndpointStatement.Name = name;
			}
			return dropEndpointStatement;
		}

		// Token: 0x0600169B RID: 5787 RVA: 0x0009B1E0 File Offset: 0x000993E0
		public DropSignatureStatement dropSignatureStatement()
		{
			DropSignatureStatement dropSignatureStatement = base.FragmentFactory.CreateFragment<DropSignatureStatement>();
			this.signatureType(dropSignatureStatement);
			this.match(71);
			this.signableElement(dropSignatureStatement);
			this.match(18);
			this.cryptoListWithOptionalPasswordSignature(dropSignatureStatement);
			return dropSignatureStatement;
		}

		// Token: 0x0600169C RID: 5788 RVA: 0x0009B220 File Offset: 0x00099420
		public DropEventNotificationStatement dropEventNotificationStatement()
		{
			DropEventNotificationStatement dropEventNotificationStatement = base.FragmentFactory.CreateFragment<DropEventNotificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			Identifier item = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "EVENT");
				TSql80ParserBaseInternal.Match(token2, "NOTIFICATION");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropEventNotificationStatement, dropEventNotificationStatement.Notifications, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.identifier();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(dropEventNotificationStatement, dropEventNotificationStatement.Notifications, item);
				}
			}
			EventNotificationObjectScope scope = this.eventNotificationObjectScope();
			if (this.inputState.guessing == 0)
			{
				dropEventNotificationStatement.Scope = scope;
			}
			return dropEventNotificationStatement;
		}

		// Token: 0x0600169D RID: 5789 RVA: 0x0009B2F4 File Offset: 0x000994F4
		public DropUserStatement dropUserStatement()
		{
			DropUserStatement dropUserStatement = base.FragmentFactory.CreateFragment<DropUserStatement>();
			this.match(163);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				dropUserStatement.Name = name;
			}
			return dropUserStatement;
		}

		// Token: 0x0600169E RID: 5790 RVA: 0x0009B334 File Offset: 0x00099534
		public DropIndexClauseBase dropIndexClause()
		{
			DropIndexClauseBase result;
			if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_69_.member(this.LA(2)))
			{
				result = this.indexDropObject();
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || this.LA(2) != 105)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.indexDropObjectNewNameFormat();
			}
			return result;
		}

		// Token: 0x0600169F RID: 5791 RVA: 0x0009B3CC File Offset: 0x000995CC
		public BackwardsCompatibleDropIndexClause indexDropObject()
		{
			BackwardsCompatibleDropIndexClause backwardsCompatibleDropIndexClause = base.FragmentFactory.CreateFragment<BackwardsCompatibleDropIndexClause>();
			ChildObjectName childObjectName = this.childObjectNameWithThreePrefixes();
			if (this.inputState.guessing == 0)
			{
				if (childObjectName.BaseIdentifier == null)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46027", childObjectName, TSqlParserResource.SQL46027Message, new string[0]);
				}
				backwardsCompatibleDropIndexClause.Index = childObjectName;
			}
			return backwardsCompatibleDropIndexClause;
		}

		// Token: 0x060016A0 RID: 5792 RVA: 0x0009B420 File Offset: 0x00099620
		public DropIndexClause indexDropObjectNewNameFormat()
		{
			DropIndexClause dropIndexClause = base.FragmentFactory.CreateFragment<DropIndexClause>();
			Identifier index = this.identifier();
			this.match(105);
			SchemaObjectName @object = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				dropIndexClause.Index = index;
				dropIndexClause.Object = @object;
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.dropClusteredIndexOptions(dropIndexClause);
			}
			else if (!TSql90ParserInternal.tokenSet_42_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return dropIndexClause;
		}

		// Token: 0x060016A1 RID: 5793 RVA: 0x0009B4CC File Offset: 0x000996CC
		public void dropClusteredIndexOptions(DropIndexClause vParent)
		{
			int num = 0;
			this.match(171);
			this.match(191);
			this.dropClusteredIndexOption(vParent, ref num);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.dropClusteredIndexOption(vParent, ref num);
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x060016A2 RID: 5794 RVA: 0x0009B548 File Offset: 0x00099748
		public void dropClusteredIndexOption(DropIndexClause vParent, ref int encounteredOptions)
		{
			IndexOption indexOption;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXDOP"))
			{
				indexOption = this.maxDopOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ONLINE"))
			{
				indexOption = this.onlineIndexOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 151)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				indexOption = this.dropIndexMoveToOption();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)indexOption.OptionKind, indexOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.Options, indexOption);
			}
		}

		// Token: 0x060016A3 RID: 5795 RVA: 0x0009B618 File Offset: 0x00099818
		public IndexExpressionOption maxDopOption()
		{
			IndexExpressionOption indexExpressionOption = base.FragmentFactory.CreateFragment<IndexExpressionOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql90ParserBaseInternal.ThrowIfMaxdopValueOutOfRange(literal);
				TSql80ParserBaseInternal.Match(token, "MAXDOP");
				TSql80ParserBaseInternal.UpdateTokenInfo(indexExpressionOption, token);
				indexExpressionOption.OptionKind = IndexOptionKind.MaxDop;
				indexExpressionOption.Expression = literal;
			}
			return indexExpressionOption;
		}

		// Token: 0x060016A4 RID: 5796 RVA: 0x0009B690 File Offset: 0x00099890
		public IndexStateOption onlineIndexOption()
		{
			IndexStateOption indexStateOption = base.FragmentFactory.CreateFragment<IndexStateOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ONLINE");
				indexStateOption.OptionKind = IndexOptionKind.Online;
				TSql80ParserBaseInternal.UpdateTokenInfo(indexStateOption, token);
			}
			this.match(206);
			OptionState optionState = this.optionOnOff(indexStateOption);
			if (this.inputState.guessing == 0)
			{
				indexStateOption.OptionState = optionState;
			}
			return indexStateOption;
		}

		// Token: 0x060016A5 RID: 5797 RVA: 0x0009B70C File Offset: 0x0009990C
		public MoveToDropIndexOption dropIndexMoveToOption()
		{
			MoveToDropIndexOption moveToDropIndexOption = base.FragmentFactory.CreateFragment<MoveToDropIndexOption>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(151);
			FileGroupOrPartitionScheme moveTo = this.filegroupOrPartitionScheme();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MOVE");
				TSql80ParserBaseInternal.UpdateTokenInfo(moveToDropIndexOption, token);
				moveToDropIndexOption.OptionKind = IndexOptionKind.MoveTo;
				moveToDropIndexOption.MoveTo = moveTo;
			}
			return moveToDropIndexOption;
		}

		// Token: 0x060016A6 RID: 5798 RVA: 0x0009B77C File Offset: 0x0009997C
		public FileGroupOrPartitionScheme filegroupOrPartitionScheme()
		{
			FileGroupOrPartitionScheme fileGroupOrPartitionScheme = base.FragmentFactory.CreateFragment<FileGroupOrPartitionScheme>();
			IdentifierOrValueExpression name = this.stringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				fileGroupOrPartitionScheme.Name = name;
			}
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.columnNameList(fileGroupOrPartitionScheme, fileGroupOrPartitionScheme.PartitionSchemeColumns);
			}
			else if (!TSql90ParserInternal.tokenSet_70_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return fileGroupOrPartitionScheme;
		}

		// Token: 0x060016A7 RID: 5799 RVA: 0x0009B824 File Offset: 0x00099A24
		public ChildObjectName statisticsDropObject()
		{
			ChildObjectName childObjectName = this.childObjectNameWithThreePrefixes();
			if (this.inputState.guessing == 0 && childObjectName.BaseIdentifier == null)
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46038", childObjectName, TSqlParserResource.SQL46038Message, new string[0]);
			}
			return childObjectName;
		}

		// Token: 0x060016A8 RID: 5800 RVA: 0x0009B864 File Offset: 0x00099A64
		public List<Identifier> identifierList(int vMaxNumber)
		{
			List<Identifier> list = new List<Identifier>();
			int num = this.LA(1);
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier item = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddIdentifierToListWithCheck(list, item, vMaxNumber);
					}
					while (this.LA(1) == 200 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
					{
						this.identifierListElement(list, vMaxNumber, false);
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.identifierListElement(list, vMaxNumber, true);
				while (this.LA(1) == 200 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
				{
					this.identifierListElement(list, vMaxNumber, false);
				}
			}
			return list;
		}

		// Token: 0x060016A9 RID: 5801 RVA: 0x0009B964 File Offset: 0x00099B64
		public void dropObjectList(DropObjectsStatement vParent, bool onlyTwoPartNames)
		{
			SchemaObjectName item = this.dropObject(onlyTwoPartNames);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaObjectName>(vParent, vParent.Objects, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.dropObject(onlyTwoPartNames);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaObjectName>(vParent, vParent.Objects, item);
				}
			}
		}

		// Token: 0x060016AA RID: 5802 RVA: 0x0009B9D0 File Offset: 0x00099BD0
		public TriggerScope triggerScope(TSqlFragment vParent)
		{
			TriggerScope result = TriggerScope.Normal;
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 43)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(43);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					result = TriggerScope.Database;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(5);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "SERVER");
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
					result = TriggerScope.AllServer;
				}
			}
			return result;
		}

		// Token: 0x060016AB RID: 5803 RVA: 0x0009BA84 File Offset: 0x00099C84
		public SchemaObjectName dropObject(bool onlyTwoPartNames)
		{
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0 && onlyTwoPartNames)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(schemaObjectName, "DROP");
			}
			return schemaObjectName;
		}

		// Token: 0x060016AC RID: 5804 RVA: 0x0009BAB4 File Offset: 0x00099CB4
		public DropPartitionFunctionStatement dropPartitionFunctionStatement()
		{
			DropPartitionFunctionStatement dropPartitionFunctionStatement = base.FragmentFactory.CreateFragment<DropPartitionFunctionStatement>();
			this.match(73);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				dropPartitionFunctionStatement.Name = name;
			}
			return dropPartitionFunctionStatement;
		}

		// Token: 0x060016AD RID: 5805 RVA: 0x0009BAF4 File Offset: 0x00099CF4
		public DropPartitionSchemeStatement dropPartitionSchemeStatement()
		{
			DropPartitionSchemeStatement dropPartitionSchemeStatement = base.FragmentFactory.CreateFragment<DropPartitionSchemeStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SCHEME");
				dropPartitionSchemeStatement.Name = name;
			}
			return dropPartitionSchemeStatement;
		}

		// Token: 0x060016AE RID: 5806 RVA: 0x0009BB4C File Offset: 0x00099D4C
		public DropFullTextCatalogStatement dropFulltextCatalogStatement()
		{
			DropFullTextCatalogStatement dropFullTextCatalogStatement = base.FragmentFactory.CreateFragment<DropFullTextCatalogStatement>();
			IToken token = this.LT(1);
			this.match(232);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CATALOG");
				dropFullTextCatalogStatement.Name = name;
			}
			return dropFullTextCatalogStatement;
		}

		// Token: 0x060016AF RID: 5807 RVA: 0x0009BBA4 File Offset: 0x00099DA4
		public DropFullTextIndexStatement dropFulltextIndexStatement()
		{
			DropFullTextIndexStatement dropFullTextIndexStatement = base.FragmentFactory.CreateFragment<DropFullTextIndexStatement>();
			this.match(84);
			this.match(105);
			SchemaObjectName tableName = this.dropObject(false);
			if (this.inputState.guessing == 0)
			{
				dropFullTextIndexStatement.TableName = tableName;
			}
			return dropFullTextIndexStatement;
		}

		// Token: 0x060016B0 RID: 5808 RVA: 0x0009BBEC File Offset: 0x00099DEC
		public void signatureType(SignatureStatementBase vParent)
		{
			if (this.LA(1) == 232 && this.LA(2) == 232)
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "COUNTER");
					vParent.IsCounter = true;
				}
			}
			else if (this.LA(1) != 232 || (this.LA(2) != 71 && this.LA(2) != 151))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "SIGNATURE");
			}
		}

		// Token: 0x060016B1 RID: 5809 RVA: 0x0009BCB4 File Offset: 0x00099EB4
		public void signableElement(SignatureStatementBase vParent)
		{
			if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_72_.member(this.LA(2)))
			{
				SchemaObjectName element = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					vParent.Element = element;
					return;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 203)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(203);
				SchemaObjectName element = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token, "OBJECT"))
					{
						vParent.ElementKind = SignableElementKind.Object;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "ASSEMBLY");
						vParent.ElementKind = SignableElementKind.Assembly;
					}
					vParent.Element = element;
					return;
				}
			}
			else
			{
				if (this.LA(1) != 43)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(43);
				this.match(203);
				SchemaObjectName element = this.schemaObjectThreePartName();
				if (this.inputState.guessing == 0)
				{
					vParent.ElementKind = SignableElementKind.Database;
					vParent.Element = element;
					return;
				}
			}
		}

		// Token: 0x060016B2 RID: 5810 RVA: 0x0009BDF4 File Offset: 0x00099FF4
		public void cryptoListWithOptionalPasswordSignature(SignatureStatementBase vParent)
		{
			CryptoMechanism item = this.cryptoWithOptionalPasswordSignature();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CryptoMechanism>(vParent, vParent.Cryptos, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.cryptoWithOptionalPasswordSignature();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CryptoMechanism>(vParent, vParent.Cryptos, item);
				}
			}
		}

		// Token: 0x060016B3 RID: 5811 RVA: 0x0009BE60 File Offset: 0x0009A060
		public CryptoMechanism cryptoWithOptionalPasswordSignature()
		{
			CryptoMechanism cryptoMechanism;
			if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				cryptoMechanism = this.certificateCrypto();
				Literal literal = this.withSignatureOrPasswordOpt();
				if (this.inputState.guessing == 0 && literal != null)
				{
					cryptoMechanism.PasswordOrSignature = literal;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 91)
			{
				cryptoMechanism = this.keyCrypto();
				Literal literal = this.withSignatureOrPasswordOpt();
				if (this.inputState.guessing == 0 && literal != null)
				{
					cryptoMechanism.PasswordOrSignature = literal;
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				cryptoMechanism = this.passwordCrypto();
			}
			return cryptoMechanism;
		}

		// Token: 0x060016B4 RID: 5812 RVA: 0x0009BF40 File Offset: 0x0009A140
		public Literal withSignatureOrPasswordOpt()
		{
			Literal result = null;
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				this.LT(1);
				this.match(232);
				this.match(206);
				int num = this.LA(1);
				if (num != 224)
				{
					switch (num)
					{
					case 230:
					case 231:
						result = this.stringLiteral();
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					result = this.binary();
				}
			}
			else if (!TSql90ParserInternal.tokenSet_42_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return result;
		}

		// Token: 0x060016B5 RID: 5813 RVA: 0x0009C01C File Offset: 0x0009A21C
		public Identifier nonQuotedIdentifier()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
				identifier.SetUnquotedIdentifier(token.getText());
			}
			return identifier;
		}

		// Token: 0x060016B6 RID: 5814 RVA: 0x0009C06C File Offset: 0x0009A26C
		public BeginTransactionStatement beginTransactionStatement()
		{
			BeginTransactionStatement beginTransactionStatement = base.FragmentFactory.CreateFragment<BeginTransactionStatement>();
			IToken token = this.LT(1);
			this.match(13);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token);
			}
			int num = this.LA(1);
			if (num != 52)
			{
				switch (num)
				{
				case 153:
				case 154:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(52);
				if (this.inputState.guessing == 0)
				{
					beginTransactionStatement.Distributed = true;
				}
			}
			switch (this.LA(1))
			{
			case 153:
			{
				IToken token2 = this.LT(1);
				this.match(153);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token2);
				}
				break;
			}
			case 154:
			{
				IToken token3 = this.LT(1);
				this.match(154);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token3);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (TSql90ParserInternal.tokenSet_27_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_28_.member(this.LA(2)))
			{
				this.transactionName(beginTransactionStatement);
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token4 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "MARK");
					TSql80ParserBaseInternal.UpdateTokenInfo(beginTransactionStatement, token4);
					beginTransactionStatement.MarkDefined = true;
				}
				int num2 = this.LA(1);
				if (num2 <= 92)
				{
					if (num2 <= 28)
					{
						if (num2 <= 6)
						{
							if (num2 == 1)
							{
								return beginTransactionStatement;
							}
							switch (num2)
							{
							case 4:
							case 6:
								return beginTransactionStatement;
							}
						}
						else
						{
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return beginTransactionStatement;
							case 14:
							case 16:
								break;
							default:
								switch (num2)
								{
								case 22:
								case 23:
									return beginTransactionStatement;
								default:
									if (num2 == 28)
									{
										return beginTransactionStatement;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num2 <= 75)
					{
						switch (num2)
						{
						case 33:
						case 35:
							return beginTransactionStatement;
						case 34:
							break;
						default:
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								return beginTransactionStatement;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
								break;
							default:
								switch (num2)
								{
								case 74:
								case 75:
									return beginTransactionStatement;
								}
								break;
							}
							break;
						}
					}
					else if (num2 == 82 || num2 == 86 || num2 == 92)
					{
						return beginTransactionStatement;
					}
				}
				else if (num2 <= 172)
				{
					if (num2 <= 119)
					{
						if (num2 == 95 || num2 == 106 || num2 == 119)
						{
							return beginTransactionStatement;
						}
					}
					else
					{
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return beginTransactionStatement;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num2)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								return beginTransactionStatement;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num2)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									return beginTransactionStatement;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 191)
				{
					if (num2 == 176)
					{
						return beginTransactionStatement;
					}
					switch (num2)
					{
					case 180:
					case 181:
						return beginTransactionStatement;
					default:
						if (num2 == 191)
						{
							return beginTransactionStatement;
						}
						break;
					}
				}
				else
				{
					if (num2 == 204)
					{
						return beginTransactionStatement;
					}
					switch (num2)
					{
					case 219:
					case 220:
						return beginTransactionStatement;
					default:
						switch (num2)
						{
						case 230:
						case 231:
						case 234:
						{
							ValueExpression markDescription = this.stringOrVariable();
							if (this.inputState.guessing == 0)
							{
								beginTransactionStatement.MarkDescription = markDescription;
								return beginTransactionStatement;
							}
							return beginTransactionStatement;
						}
						case 232:
							return beginTransactionStatement;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return beginTransactionStatement;
		}

		// Token: 0x060016B7 RID: 5815 RVA: 0x0009C564 File Offset: 0x0009A764
		public TryCatchStatement tryCatchStatement()
		{
			TryCatchStatement tryCatchStatement = base.FragmentFactory.CreateFragment<TryCatchStatement>();
			bool flag = false;
			IToken token = this.LT(1);
			this.match(13);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tryCatchStatement, token);
				TSql80ParserBaseInternal.Match(token2, "TRY");
			}
			StatementList statementList = this.tryStatementList(ref flag);
			if (this.inputState.guessing == 0)
			{
				tryCatchStatement.TryStatements = statementList;
			}
			this.match(56);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token3, "TRY");
			}
			this.LT(1);
			this.match(13);
			IToken token4 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token4, "CATCH");
			}
			statementList = this.catchStatementList(ref flag);
			if (this.inputState.guessing == 0)
			{
				tryCatchStatement.CatchStatements = statementList;
			}
			this.match(56);
			IToken token5 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token5, "CATCH");
				TSql80ParserBaseInternal.UpdateTokenInfo(tryCatchStatement, token5);
				if (flag)
				{
					tryCatchStatement = null;
				}
			}
			return tryCatchStatement;
		}

		// Token: 0x060016B8 RID: 5816 RVA: 0x0009C6C0 File Offset: 0x0009A8C0
		public BeginConversationTimerStatement beginConversationTimerStatement()
		{
			BeginConversationTimerStatement beginConversationTimerStatement = base.FragmentFactory.CreateFragment<BeginConversationTimerStatement>();
			IToken token = this.LT(1);
			this.match(13);
			IToken token2 = this.LT(1);
			this.match(232);
			IToken token3 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "CONVERSATION");
				TSql80ParserBaseInternal.Match(token3, "TIMER");
				TSql80ParserBaseInternal.UpdateTokenInfo(beginConversationTimerStatement, token);
			}
			this.match(191);
			ScalarExpression handle = this.expression();
			this.match(192);
			IToken token4 = this.LT(1);
			this.match(232);
			this.match(206);
			ScalarExpression timeout = this.expression();
			if (this.inputState.guessing == 0)
			{
				beginConversationTimerStatement.Handle = handle;
				TSql80ParserBaseInternal.Match(token4, "TIMEOUT");
				beginConversationTimerStatement.Timeout = timeout;
			}
			return beginConversationTimerStatement;
		}

		// Token: 0x060016B9 RID: 5817 RVA: 0x0009C7B4 File Offset: 0x0009A9B4
		public BeginDialogStatement beginDialogStatement()
		{
			BeginDialogStatement beginDialogStatement = base.FragmentFactory.CreateFragment<BeginDialogStatement>();
			int num = 0;
			IToken token = this.LT(1);
			this.match(13);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "DIALOG");
				TSql80ParserBaseInternal.UpdateTokenInfo(beginDialogStatement, token);
			}
			switch (this.LA(1))
			{
			case 232:
			{
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "CONVERSATION");
					beginDialogStatement.IsConversation = true;
					goto IL_CB;
				}
				goto IL_CB;
			}
			case 234:
				goto IL_CB;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_CB:
			VariableReference handle = this.variable();
			this.match(71);
			IToken token4 = this.LT(1);
			this.match(232);
			IdentifierOrValueExpression initiatorServiceName = this.identifierOrVariable();
			this.match(151);
			IToken token5 = this.LT(1);
			this.match(232);
			ValueExpression targetServiceName = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token4, "SERVICE");
				TSql80ParserBaseInternal.Match(token5, "SERVICE");
				beginDialogStatement.Handle = handle;
				beginDialogStatement.InitiatorServiceName = initiatorServiceName;
				beginDialogStatement.TargetServiceName = targetServiceName;
			}
			int num2 = this.LA(1);
			if (num2 <= 95)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						if (num2 == 1)
						{
							goto IL_42B;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_42B;
						case 5:
							break;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_42B;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							goto IL_42B;
						default:
							if (num2 == 28)
							{
								goto IL_42B;
							}
							switch (num2)
							{
							case 33:
							case 35:
								goto IL_42B;
							}
							break;
						}
					}
				}
				else if (num2 <= 82)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_42B;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num2)
						{
						case 74:
						case 75:
							goto IL_42B;
						default:
							if (num2 == 82)
							{
								goto IL_42B;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 86 || num2 == 92 || num2 == 95)
				{
					goto IL_42B;
				}
			}
			else if (num2 <= 176)
			{
				if (num2 <= 144)
				{
					switch (num2)
					{
					case 105:
					case 106:
						goto IL_42B;
					default:
						if (num2 == 119)
						{
							goto IL_42B;
						}
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_42B;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						goto IL_42B;
					case 157:
					case 158:
					case 159:
						break;
					default:
						switch (num2)
						{
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_42B;
						case 168:
						case 169:
							break;
						default:
							if (num2 == 176)
							{
								goto IL_42B;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num2 <= 198)
			{
				switch (num2)
				{
				case 180:
				case 181:
					goto IL_42B;
				default:
					if (num2 == 191)
					{
						goto IL_42B;
					}
					if (num2 == 198)
					{
						this.match(198);
						ValueExpression instanceSpec = this.stringOrVariable();
						if (this.inputState.guessing == 0)
						{
							beginDialogStatement.InstanceSpec = instanceSpec;
							goto IL_42B;
						}
						goto IL_42B;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_42B;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_42B;
				default:
					if (num2 == 232)
					{
						goto IL_42B;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_42B:
			int num3 = this.LA(1);
			if (num3 <= 92)
			{
				if (num3 <= 28)
				{
					if (num3 <= 6)
					{
						if (num3 == 1)
						{
							goto IL_70B;
						}
						switch (num3)
						{
						case 4:
						case 6:
							goto IL_70B;
						}
					}
					else
					{
						switch (num3)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_70B;
						case 14:
						case 16:
							break;
						default:
							switch (num3)
							{
							case 22:
							case 23:
								goto IL_70B;
							default:
								if (num3 == 28)
								{
									goto IL_70B;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num3 <= 75)
				{
					switch (num3)
					{
					case 33:
					case 35:
						goto IL_70B;
					case 34:
						break;
					default:
						switch (num3)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_70B;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num3)
							{
							case 74:
							case 75:
								goto IL_70B;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 82 || num3 == 86 || num3 == 92)
				{
					goto IL_70B;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 119)
				{
					if (num3 == 95)
					{
						goto IL_70B;
					}
					switch (num3)
					{
					case 105:
					{
						this.match(105);
						IToken token6 = this.LT(1);
						this.match(232);
						IdentifierOrValueExpression contractName = this.identifierOrVariable();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token6, "CONTRACT");
							beginDialogStatement.ContractName = contractName;
							goto IL_70B;
						}
						goto IL_70B;
					}
					case 106:
						goto IL_70B;
					default:
						if (num3 == 119)
						{
							goto IL_70B;
						}
						break;
					}
				}
				else
				{
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_70B;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_70B;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num3)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_70B;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 191)
			{
				if (num3 == 176)
				{
					goto IL_70B;
				}
				switch (num3)
				{
				case 180:
				case 181:
					goto IL_70B;
				default:
					if (num3 == 191)
					{
						goto IL_70B;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_70B;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_70B;
				default:
					if (num3 == 232)
					{
						goto IL_70B;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_70B:
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				DialogOption item = this.beginConversationArgument(ref num);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DialogOption>(beginDialogStatement, beginDialogStatement.Options, item);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					item = this.beginConversationArgument(ref num);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DialogOption>(beginDialogStatement, beginDialogStatement.Options, item);
					}
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return beginDialogStatement;
		}

		// Token: 0x060016BA RID: 5818 RVA: 0x0009CF94 File Offset: 0x0009B194
		public void transactionName(TransactionStatement vParent)
		{
			int num = this.LA(1);
			if (num != 199 && num != 221)
			{
				switch (num)
				{
				case 232:
				case 233:
				case 234:
				{
					IdentifierOrValueExpression name = this.identifierOrVariable();
					if (this.inputState.guessing == 0)
					{
						vParent.Name = name;
						return;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				Identifier identifier = this.weirdTransactionName();
				if (this.inputState.guessing == 0)
				{
					vParent.Name = base.IdentifierOrValueExpression(identifier);
					return;
				}
			}
		}

		// Token: 0x060016BB RID: 5819 RVA: 0x0009D024 File Offset: 0x0009B224
		public Identifier weirdTransactionName()
		{
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			StringBuilder stringBuilder = new StringBuilder();
			int num = this.LA(1);
			if (num != 199)
			{
				if (num != 221)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(199);
				if (this.inputState.guessing == 0)
				{
					stringBuilder.Append(token.getText());
					TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token);
				}
			}
			IToken token2 = this.LT(1);
			this.match(221);
			IToken token3 = this.LT(1);
			this.match(202);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identifier, token2);
				stringBuilder.Append(token2.getText());
				stringBuilder.Append(token3.getText());
			}
			this.tranIdentifier(stringBuilder, identifier);
			IToken token4 = this.LT(1);
			this.match(200);
			if (this.inputState.guessing == 0)
			{
				stringBuilder.Append(token4.getText());
			}
			this.tranIdentifier(stringBuilder, identifier);
			if (this.inputState.guessing == 0)
			{
				identifier.Value = stringBuilder.ToString();
			}
			return identifier;
		}

		// Token: 0x060016BC RID: 5820 RVA: 0x0009D168 File Offset: 0x0009B368
		public void tranIdentifier(StringBuilder vStringBuilder, TSqlFragment vParent)
		{
			switch (this.LA(1))
			{
			case 232:
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					vStringBuilder.Append(token.getText());
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				break;
			}
			case 233:
			{
				IToken token2 = this.LT(1);
				this.match(233);
				if (this.inputState.guessing == 0)
				{
					vStringBuilder.Append(token2.getText());
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					return;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x060016BD RID: 5821 RVA: 0x0009D214 File Offset: 0x0009B414
		public StatementList tryStatementList(ref bool vParseErrorOccurred)
		{
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			while (this.LA(1) == 204)
			{
				this.match(204);
			}
			int num = 0;
			while (TSql90ParserInternal.tokenSet_3_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_62_.member(this.LA(2)) && base.IsStatementIsNext())
			{
				TSqlStatement tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement != null)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(statementList, statementList.Statements, tsqlStatement);
					}
					else
					{
						vParseErrorOccurred = true;
						base.ThrowIfEndOfFileOrBatch();
					}
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return statementList;
		}

		// Token: 0x060016BE RID: 5822 RVA: 0x0009D2C8 File Offset: 0x0009B4C8
		public StatementList catchStatementList(ref bool vParseErrorOccurred)
		{
			StatementList statementList = base.FragmentFactory.CreateFragment<StatementList>();
			while (this.LA(1) == 204)
			{
				this.match(204);
			}
			while (TSql90ParserInternal.tokenSet_3_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_62_.member(this.LA(2)) && base.IsStatementIsNext())
			{
				TSqlStatement tsqlStatement = this.statementOptSemi();
				if (this.inputState.guessing == 0)
				{
					if (tsqlStatement != null)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TSqlStatement>(statementList, statementList.Statements, tsqlStatement);
					}
					else
					{
						vParseErrorOccurred = true;
						base.ThrowIfEndOfFileOrBatch();
					}
				}
			}
			return statementList;
		}

		// Token: 0x060016BF RID: 5823 RVA: 0x0009D35C File Offset: 0x0009B55C
		public DeclareVariableElement declareVariableElement()
		{
			DeclareVariableElement declareVariableElement = base.FragmentFactory.CreateFragment<DeclareVariableElement>();
			Identifier variableName = this.identifierVariable();
			int num = this.LA(1);
			if (num <= 42)
			{
				if (num == 9)
				{
					this.match(9);
					goto IL_69;
				}
				if (num == 42)
				{
					goto IL_69;
				}
			}
			else
			{
				if (num == 53 || num == 96)
				{
					goto IL_69;
				}
				switch (num)
				{
				case 232:
				case 233:
					goto IL_69;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_69:
			int num2 = this.LA(1);
			DataTypeReference dataType;
			if (num2 <= 53)
			{
				if (num2 == 42)
				{
					dataType = this.cursorDataType();
					goto IL_C8;
				}
				if (num2 != 53)
				{
					goto IL_B5;
				}
			}
			else if (num2 != 96)
			{
				switch (num2)
				{
				case 232:
				case 233:
					break;
				default:
					goto IL_B5;
				}
			}
			dataType = this.scalarDataType();
			goto IL_C8;
			IL_B5:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_C8:
			if (this.inputState.guessing == 0)
			{
				declareVariableElement.VariableName = variableName;
				declareVariableElement.DataType = dataType;
			}
			return declareVariableElement;
		}

		// Token: 0x060016C0 RID: 5824 RVA: 0x0009D450 File Offset: 0x0009B650
		public SqlDataTypeReference cursorDataType()
		{
			SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
			IToken token = this.LT(1);
			this.match(42);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token);
				sqlDataTypeReference.SqlDataTypeOption = SqlDataTypeOption.Cursor;
			}
			return sqlDataTypeReference;
		}

		// Token: 0x060016C1 RID: 5825 RVA: 0x0009D498 File Offset: 0x0009B698
		public DeclareVariableStatement declareVariableStatement()
		{
			DeclareVariableStatement declareVariableStatement = base.FragmentFactory.CreateFragment<DeclareVariableStatement>();
			DeclareVariableElement item = this.declareVariableElement();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DeclareVariableElement>(declareVariableStatement, declareVariableStatement.Declarations, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.declareVariableElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DeclareVariableElement>(declareVariableStatement, declareVariableStatement.Declarations, item);
				}
			}
			return declareVariableStatement;
		}

		// Token: 0x060016C2 RID: 5826 RVA: 0x0009D510 File Offset: 0x0009B710
		public DeclareCursorStatement declareCursorStatement()
		{
			DeclareCursorStatement declareCursorStatement = base.FragmentFactory.CreateFragment<DeclareCursorStatement>();
			List<CursorOption> vOptions = new List<CursorOption>();
			Identifier name = this.identifier();
			this.cursorOpts(true, vOptions);
			CursorDefinition cursorDefinition = this.cursorDefinitionOptions(vOptions);
			if (this.inputState.guessing == 0)
			{
				declareCursorStatement.Name = name;
				declareCursorStatement.CursorDefinition = cursorDefinition;
			}
			return declareCursorStatement;
		}

		// Token: 0x060016C3 RID: 5827 RVA: 0x0009D564 File Offset: 0x0009B764
		public PredicateSetStatement predicateSetStatement()
		{
			PredicateSetStatement predicateSetStatement = base.FragmentFactory.CreateFragment<PredicateSetStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				predicateSetStatement.Options = PredicateSetOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					predicateSetStatement.Options |= PredicateSetOptionsHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql90);
				}
			}
			this.setOnOff(predicateSetStatement);
			if (this.inputState.guessing == 0 && (predicateSetStatement.Options & SetOptions.QuotedIdentifier) == SetOptions.QuotedIdentifier)
			{
				this._tokenSource.QuotedIdentifier = predicateSetStatement.IsOn;
			}
			return predicateSetStatement;
		}

		// Token: 0x060016C4 RID: 5828 RVA: 0x0009D638 File Offset: 0x0009B838
		public SetVariableStatement setVariableStatement()
		{
			SetVariableStatement setVariableStatement = base.FragmentFactory.CreateFragment<SetVariableStatement>();
			VariableReference variable = this.variable();
			if (this.inputState.guessing == 0)
			{
				setVariableStatement.Variable = variable;
			}
			int num = this.LA(1);
			if (num != 200 && num != 203)
			{
				if (num != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(206);
				int num2 = this.LA(1);
				if (num2 <= 101)
				{
					if (num2 <= 34)
					{
						if (num2 != 20 && num2 != 25 && num2 != 34)
						{
							goto IL_33C;
						}
					}
					else if (num2 <= 81)
					{
						switch (num2)
						{
						case 40:
						case 41:
							break;
						case 42:
						{
							CursorDefinition cursorDefinition = this.cursorDefinition();
							if (this.inputState.guessing == 0)
							{
								setVariableStatement.CursorDefinition = cursorDefinition;
								return setVariableStatement;
							}
							return setVariableStatement;
						}
						default:
							if (num2 != 81)
							{
								goto IL_33C;
							}
							break;
						}
					}
					else if (num2 != 93)
					{
						switch (num2)
						{
						case 100:
						case 101:
							break;
						default:
							goto IL_33C;
						}
					}
				}
				else if (num2 <= 147)
				{
					if (num2 <= 136)
					{
						if (num2 != 133 && num2 != 136)
						{
							goto IL_33C;
						}
					}
					else if (num2 != 141 && num2 != 147)
					{
						goto IL_33C;
					}
				}
				else if (num2 <= 193)
				{
					if (num2 != 163)
					{
						switch (num2)
						{
						case 191:
						case 193:
							break;
						case 192:
							goto IL_33C;
						default:
							goto IL_33C;
						}
					}
				}
				else
				{
					switch (num2)
					{
					case 197:
					case 199:
					case 200:
						break;
					case 198:
						goto IL_33C;
					default:
						switch (num2)
						{
						case 211:
						case 221:
						case 222:
						case 223:
						case 224:
						case 225:
						case 227:
						case 228:
						case 230:
						case 231:
						case 232:
						case 233:
						case 234:
						case 235:
							break;
						case 212:
						case 213:
						case 214:
						case 215:
						case 216:
						case 217:
						case 218:
						case 219:
						case 220:
						case 226:
						case 229:
							goto IL_33C;
						default:
							goto IL_33C;
						}
						break;
					}
				}
				ScalarExpression expression = this.expression();
				if (this.inputState.guessing == 0)
				{
					setVariableStatement.Expression = expression;
					return setVariableStatement;
				}
				return setVariableStatement;
				IL_33C:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			else
			{
				int num3 = this.LA(1);
				if (num3 != 200)
				{
					if (num3 != 203)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(203);
					if (this.inputState.guessing == 0)
					{
						setVariableStatement.SeparatorType = SeparatorType.DoubleColon;
					}
				}
				else
				{
					this.match(200);
					if (this.inputState.guessing == 0)
					{
						setVariableStatement.SeparatorType = SeparatorType.Dot;
					}
				}
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					setVariableStatement.Identifier = identifier;
				}
				int num4 = this.LA(1);
				if (num4 != 191)
				{
					if (num4 != 206)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(206);
					ScalarExpression expression = this.expression();
					if (this.inputState.guessing == 0)
					{
						setVariableStatement.Expression = expression;
					}
				}
				else
				{
					this.parenthesizedOptExpressionWithDefaultList(setVariableStatement, setVariableStatement.Parameters);
					if (this.inputState.guessing == 0)
					{
						setVariableStatement.FunctionCallExists = true;
					}
				}
			}
			return setVariableStatement;
		}

		// Token: 0x060016C5 RID: 5829 RVA: 0x0009D9A8 File Offset: 0x0009BBA8
		public SetStatisticsStatement setStatisticsStatement()
		{
			SetStatisticsStatement setStatisticsStatement = base.FragmentFactory.CreateFragment<SetStatisticsStatement>();
			this.match(146);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				setStatisticsStatement.Options = SetStatisticsOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					setStatisticsStatement.Options |= SetStatisticsOptionsHelper.Instance.ParseOption(token2, SqlVersionFlags.TSql90);
				}
			}
			this.setOnOff(setStatisticsStatement);
			return setStatisticsStatement;
		}

		// Token: 0x060016C6 RID: 5830 RVA: 0x0009DA60 File Offset: 0x0009BC60
		public SetRowCountStatement setRowcountStatement()
		{
			SetRowCountStatement setRowCountStatement = base.FragmentFactory.CreateFragment<SetRowCountStatement>();
			this.match(135);
			ValueExpression numberRows = this.integerOrVariable();
			if (this.inputState.guessing == 0)
			{
				setRowCountStatement.NumberRows = numberRows;
			}
			return setRowCountStatement;
		}

		// Token: 0x060016C7 RID: 5831 RVA: 0x0009DAA0 File Offset: 0x0009BCA0
		public SetOffsetsStatement setOffsetsStatement()
		{
			SetOffsetsStatement setOffsetsStatement = base.FragmentFactory.CreateFragment<SetOffsetsStatement>();
			this.match(104);
			SetOffsets setOffsets = this.offsetItem();
			if (this.inputState.guessing == 0)
			{
				setOffsetsStatement.Options = setOffsets;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				setOffsets = this.offsetItem();
				if (this.inputState.guessing == 0)
				{
					setOffsetsStatement.Options |= setOffsets;
				}
			}
			this.setOnOff(setOffsetsStatement);
			return setOffsetsStatement;
		}

		// Token: 0x060016C8 RID: 5832 RVA: 0x0009DB24 File Offset: 0x0009BD24
		public SetCommandStatement setCommandStatement()
		{
			SetCommandStatement setCommandStatement = base.FragmentFactory.CreateFragment<SetCommandStatement>();
			SetCommand item = this.setCommand();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SetCommand>(setCommandStatement, setCommandStatement.Commands, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.setCommand();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SetCommand>(setCommandStatement, setCommandStatement.Commands, item);
				}
			}
			return setCommandStatement;
		}

		// Token: 0x060016C9 RID: 5833 RVA: 0x0009DB9C File Offset: 0x0009BD9C
		public SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement()
		{
			SetTransactionIsolationLevelStatement setTransactionIsolationLevelStatement = base.FragmentFactory.CreateFragment<SetTransactionIsolationLevelStatement>();
			switch (this.LA(1))
			{
			case 153:
				this.match(153);
				break;
			case 154:
				this.match(154);
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token = this.LT(1);
			this.match(232);
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "ISOLATION");
				TSql80ParserBaseInternal.Match(token2, "LEVEL");
			}
			if (this.LA(1) == 124)
			{
				this.match(124);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token3, "COMMITTED"))
					{
						setTransactionIsolationLevelStatement.Level = IsolationLevel.ReadCommitted;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token3, "UNCOMMITTED");
						setTransactionIsolationLevelStatement.Level = IsolationLevel.ReadUncommitted;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(setTransactionIsolationLevelStatement, token3);
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 124)
			{
				IToken token4 = this.LT(1);
				this.match(232);
				IToken token5 = this.LT(1);
				this.match(124);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "REPEATABLE");
					setTransactionIsolationLevelStatement.Level = IsolationLevel.RepeatableRead;
					TSql80ParserBaseInternal.UpdateTokenInfo(setTransactionIsolationLevelStatement, token5);
				}
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_17_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token6 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token6, "SNAPSHOT"))
					{
						setTransactionIsolationLevelStatement.Level = IsolationLevel.Snapshot;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token6, "SERIALIZABLE");
						setTransactionIsolationLevelStatement.Level = IsolationLevel.Serializable;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(setTransactionIsolationLevelStatement, token6);
				}
			}
			return setTransactionIsolationLevelStatement;
		}

		// Token: 0x060016CA RID: 5834 RVA: 0x0009DDBC File Offset: 0x0009BFBC
		public SetTextSizeStatement setTextSizeStatement()
		{
			SetTextSizeStatement setTextSizeStatement = base.FragmentFactory.CreateFragment<SetTextSizeStatement>();
			this.match(149);
			ScalarExpression textSize = this.signedInteger();
			if (this.inputState.guessing == 0)
			{
				setTextSizeStatement.TextSize = textSize;
			}
			return setTextSizeStatement;
		}

		// Token: 0x060016CB RID: 5835 RVA: 0x0009DDFC File Offset: 0x0009BFFC
		public SetIdentityInsertStatement setIdentityInsertStatement()
		{
			SetIdentityInsertStatement setIdentityInsertStatement = base.FragmentFactory.CreateFragment<SetIdentityInsertStatement>();
			this.match(80);
			SchemaObjectName table = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				setIdentityInsertStatement.Table = table;
			}
			this.setOnOff(setIdentityInsertStatement);
			return setIdentityInsertStatement;
		}

		// Token: 0x060016CC RID: 5836 RVA: 0x0009DE40 File Offset: 0x0009C040
		public SetErrorLevelStatement setErrorLevelStatement()
		{
			SetErrorLevelStatement setErrorLevelStatement = base.FragmentFactory.CreateFragment<SetErrorLevelStatement>();
			this.match(57);
			ScalarExpression level = this.signedInteger();
			if (this.inputState.guessing == 0)
			{
				setErrorLevelStatement.Level = level;
			}
			return setErrorLevelStatement;
		}

		// Token: 0x060016CD RID: 5837 RVA: 0x0009DE80 File Offset: 0x0009C080
		public void parenthesizedOptExpressionWithDefaultList(TSqlFragment vParent, IList<ScalarExpression> expressions)
		{
			this.match(191);
			int num = this.LA(1);
			if (num <= 93)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_193;
					}
				}
				else if (num <= 47)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 47)
						{
							goto IL_193;
						}
						break;
					}
				}
				else if (num != 81 && num != 93)
				{
					goto IL_193;
				}
			}
			else if (num <= 141)
			{
				if (num <= 133)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						if (num != 133)
						{
							goto IL_193;
						}
						break;
					}
				}
				else if (num != 136 && num != 141)
				{
					goto IL_193;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_193;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 192:
					goto IL_1A6;
				case 194:
				case 195:
				case 196:
				case 198:
					goto IL_193;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_193;
					default:
						goto IL_193;
					}
					break;
				}
			}
			this.expressionWithDefaultList(vParent, expressions);
			goto IL_1A6;
			IL_193:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_1A6:
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x060016CE RID: 5838 RVA: 0x0009E05C File Offset: 0x0009C25C
		public CursorDefinition cursorDefinition()
		{
			List<CursorOption> vOptions = new List<CursorOption>();
			return this.cursorDefinitionOptions(vOptions);
		}

		// Token: 0x060016CF RID: 5839 RVA: 0x0009E078 File Offset: 0x0009C278
		public void setOnOff(SetOnOffStatement vParent)
		{
			switch (this.LA(1))
			{
			case 103:
			{
				IToken token = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.IsOn = false;
					return;
				}
				return;
			}
			case 105:
			{
				IToken token2 = this.LT(1);
				this.match(105);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					vParent.IsOn = true;
					return;
				}
				return;
			}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060016D0 RID: 5840 RVA: 0x0009E114 File Offset: 0x0009C314
		public SetOffsets offsetItem()
		{
			SetOffsets result = SetOffsets.None;
			int num = this.LA(1);
			if (num <= 113)
			{
				if (num <= 61)
				{
					if (num != 29)
					{
						switch (num)
						{
						case 60:
						case 61:
							switch (this.LA(1))
							{
							case 60:
								this.match(60);
								break;
							case 61:
								this.match(61);
								break;
							default:
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							if (this.inputState.guessing == 0)
							{
								return SetOffsets.Execute;
							}
							return result;
						}
					}
					else
					{
						this.match(29);
						if (this.inputState.guessing == 0)
						{
							return SetOffsets.Compute;
						}
						return result;
					}
				}
				else if (num != 71)
				{
					if (num == 113)
					{
						this.match(113);
						if (this.inputState.guessing == 0)
						{
							return SetOffsets.Order;
						}
						return result;
					}
				}
				else
				{
					this.match(71);
					if (this.inputState.guessing == 0)
					{
						return SetOffsets.From;
					}
					return result;
				}
			}
			else if (num <= 140)
			{
				switch (num)
				{
				case 120:
				case 121:
					switch (this.LA(1))
					{
					case 120:
						this.match(120);
						break;
					case 121:
						this.match(121);
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (this.inputState.guessing == 0)
					{
						return SetOffsets.Procedure;
					}
					return result;
				default:
					if (num == 140)
					{
						this.match(140);
						if (this.inputState.guessing == 0)
						{
							return SetOffsets.Select;
						}
						return result;
					}
					break;
				}
			}
			else if (num != 148)
			{
				if (num == 232)
				{
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing != 0)
					{
						return result;
					}
					if (TSql80ParserBaseInternal.TryMatch(token, "STATEMENT"))
					{
						return SetOffsets.Statement;
					}
					TSql80ParserBaseInternal.Match(token, "PARAM");
					return SetOffsets.Param;
				}
			}
			else
			{
				this.match(148);
				if (this.inputState.guessing == 0)
				{
					return SetOffsets.Table;
				}
				return result;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060016D1 RID: 5841 RVA: 0x0009E358 File Offset: 0x0009C558
		public SetCommand setCommand()
		{
			SetCommand result = null;
			if (this.LA(1) == 232 && (this.LA(2) == 103 || this.LA(2) == 230 || this.LA(2) == 231) && base.NextTokenMatches("FIPS_FLAGGER"))
			{
				this.LT(1);
				this.match(232);
				result = this.fipsFlaggerLevel();
			}
			else
			{
				if (this.LA(1) != 232 || !TSql90ParserInternal.tokenSet_52_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				ScalarExpression parameter = this.possibleNegativeConstantOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					GeneralSetCommand generalSetCommand = base.FragmentFactory.CreateFragment<GeneralSetCommand>();
					generalSetCommand.CommandType = GeneralSetCommandTypeHelper.Instance.ParseOption(token);
					generalSetCommand.Parameter = parameter;
					result = generalSetCommand;
				}
			}
			return result;
		}

		// Token: 0x060016D2 RID: 5842 RVA: 0x0009E450 File Offset: 0x0009C650
		public SetFipsFlaggerCommand fipsFlaggerLevel()
		{
			SetFipsFlaggerCommand setFipsFlaggerCommand = base.FragmentFactory.CreateFragment<SetFipsFlaggerCommand>();
			int num = this.LA(1);
			if (num != 103)
			{
				switch (num)
				{
				case 230:
				case 231:
				{
					StringLiteral fragment = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						setFipsFlaggerCommand.ComplianceLevel = FipsComplianceLevelHelper.Instance.ParseOption(TSql80ParserBaseInternal.GetFirstToken(fragment));
						setFipsFlaggerCommand.UpdateTokenInfo(fragment);
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(103);
				if (this.inputState.guessing == 0)
				{
					setFipsFlaggerCommand.ComplianceLevel = FipsComplianceLevel.Off;
					TSql80ParserBaseInternal.UpdateTokenInfo(setFipsFlaggerCommand, token);
				}
			}
			return setFipsFlaggerCommand;
		}

		// Token: 0x060016D3 RID: 5843 RVA: 0x0009E504 File Offset: 0x0009C704
		public TableDefinition tableDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement)
		{
			TableDefinition tableDefinition = base.FragmentFactory.CreateFragment<TableDefinition>();
			if (base.PhaseOne && vStatement != null)
			{
				vStatement.Definition = tableDefinition;
			}
			this.tableElement(statementType, tableDefinition, vStatement);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.tableElement(statementType, tableDefinition, vStatement);
			}
			return tableDefinition;
		}

		// Token: 0x060016D4 RID: 5844 RVA: 0x0009E560 File Offset: 0x0009C760
		public void tableElement(IndexAffectingStatement statementType, TableDefinition vParent, AlterTableAddTableElementStatement vStatement)
		{
			int num = this.LA(1);
			if (num <= 47)
			{
				if (num != 21 && num != 30 && num != 47)
				{
					goto IL_95;
				}
			}
			else if (num <= 118)
			{
				if (num != 68 && num != 118)
				{
					goto IL_95;
				}
			}
			else if (num != 159)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					ColumnDefinition item = this.columnDefinition(statementType, vStatement);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnDefinition>(vParent, vParent.ColumnDefinitions, item);
						return;
					}
					return;
				}
				default:
					goto IL_95;
				}
			}
			ConstraintDefinition item2 = this.tableConstraint(statementType, vStatement);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ConstraintDefinition>(vParent, vParent.TableConstraints, item2);
				return;
			}
			return;
			IL_95:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060016D5 RID: 5845 RVA: 0x0009E618 File Offset: 0x0009C818
		public void cursorOpts(bool oldSyntax, IList<CursorOption> vOptions)
		{
			while (this.LA(1) == 232)
			{
				CursorOption cursorOption = this.cursorOption();
				if (this.inputState.guessing == 0)
				{
					if (oldSyntax)
					{
						if (cursorOption.OptionKind != CursorOptionKind.Insensitive && cursorOption.OptionKind != CursorOptionKind.Scroll)
						{
							TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(cursorOption);
						}
					}
					else if (cursorOption.OptionKind == CursorOptionKind.Insensitive)
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(cursorOption);
					}
					vOptions.Add(cursorOption);
				}
			}
		}

		// Token: 0x060016D6 RID: 5846 RVA: 0x0009E67C File Offset: 0x0009C87C
		public CursorDefinition cursorDefinitionOptions(IList<CursorOption> vOptions)
		{
			CursorDefinition cursorDefinition = base.FragmentFactory.CreateFragment<CursorDefinition>();
			this.match(42);
			this.cursorOpts(false, vOptions);
			this.match(67);
			SelectStatement select = this.selectStatement();
			if (this.inputState.guessing == 0)
			{
				cursorDefinition.Select = select;
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<CursorOption>(cursorDefinition, cursorDefinition.Options, vOptions);
			}
			return cursorDefinition;
		}

		// Token: 0x060016D7 RID: 5847 RVA: 0x0009E6D8 File Offset: 0x0009C8D8
		public SelectStatement selectStatement()
		{
			WithCtesAndXmlNamespaces withCtesAndXmlNamespaces = null;
			int num = this.LA(1);
			if (num != 140)
			{
				if (num != 171)
				{
					if (num != 191)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					withCtesAndXmlNamespaces = this.withCommonTableExpressionsAndXmlNamespaces();
				}
			}
			SelectStatement selectStatement = this.select();
			if (this.inputState.guessing == 0)
			{
				selectStatement.WithCtesAndXmlNamespaces = withCtesAndXmlNamespaces;
			}
			return selectStatement;
		}

		// Token: 0x060016D8 RID: 5848 RVA: 0x0009E744 File Offset: 0x0009C944
		public CursorOption cursorOption()
		{
			CursorOption cursorOption = base.FragmentFactory.CreateFragment<CursorOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				cursorOption.OptionKind = CursorOptionsHelper.Instance.ParseOption(token);
			}
			return cursorOption;
		}

		// Token: 0x060016D9 RID: 5849 RVA: 0x0009E794 File Offset: 0x0009C994
		public void indexLegacyOptionList(CreateIndexStatement vParent)
		{
			IndexOption indexOption = this.indexLegacyOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.VerifyAllowedIndexOption(IndexAffectingStatement.CreateIndex, indexOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.IndexOptions, indexOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				indexOption = this.indexLegacyOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.VerifyAllowedIndexOption(IndexAffectingStatement.CreateIndex, indexOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.IndexOptions, indexOption);
				}
			}
		}

		// Token: 0x060016DA RID: 5850 RVA: 0x0009E80C File Offset: 0x0009CA0C
		public IndexOption indexLegacyOption()
		{
			IndexOption result = null;
			int num = this.LA(1);
			if (num != 66)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					IndexStateOption indexStateOption = base.FragmentFactory.CreateFragment<IndexStateOption>();
					result = indexStateOption;
					indexStateOption.OptionKind = TSql80ParserBaseInternal.ParseIndexLegacyWithOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(indexStateOption, token);
					indexStateOption.OptionState = OptionState.On;
				}
			}
			else
			{
				result = this.fillFactorOption();
			}
			return result;
		}

		// Token: 0x060016DB RID: 5851 RVA: 0x0009E89C File Offset: 0x0009CA9C
		public IndexExpressionOption fillFactorOption()
		{
			IndexExpressionOption indexExpressionOption = base.FragmentFactory.CreateFragment<IndexExpressionOption>();
			IToken token = this.LT(1);
			this.match(66);
			this.match(206);
			Literal literal = this.integer();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckFillFactorRange(literal);
				indexExpressionOption.OptionKind = IndexOptionKind.FillFactor;
				indexExpressionOption.Expression = literal;
				TSql80ParserBaseInternal.UpdateTokenInfo(indexExpressionOption, token);
			}
			return indexExpressionOption;
		}

		// Token: 0x060016DC RID: 5852 RVA: 0x0009E904 File Offset: 0x0009CB04
		public IndexOption indexOption()
		{
			IndexOption result;
			if (this.LA(1) == 66)
			{
				result = this.fillFactorOption();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXDOP"))
			{
				result = this.maxDopOption();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.indexStateOption();
			}
			return result;
		}

		// Token: 0x060016DD RID: 5853 RVA: 0x0009E994 File Offset: 0x0009CB94
		public IndexStateOption indexStateOption()
		{
			IndexStateOption indexStateOption = base.FragmentFactory.CreateFragment<IndexStateOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				indexStateOption.OptionKind = IndexOptionHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
				TSql80ParserBaseInternal.UpdateTokenInfo(indexStateOption, token);
			}
			this.match(206);
			OptionState optionState = this.optionOnOff(indexStateOption);
			if (this.inputState.guessing == 0)
			{
				indexStateOption.OptionState = optionState;
			}
			return indexStateOption;
		}

		// Token: 0x060016DE RID: 5854 RVA: 0x0009EA10 File Offset: 0x0009CC10
		public XmlNamespaces xmlNamespaces()
		{
			XmlNamespaces xmlNamespaces = base.FragmentFactory.CreateFragment<XmlNamespaces>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XMLNAMESPACES");
			}
			this.match(191);
			XmlNamespacesElement item = this.xmlNamespacesElement();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<XmlNamespacesElement>(xmlNamespaces, xmlNamespaces.XmlNamespacesElements, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.xmlNamespacesElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<XmlNamespacesElement>(xmlNamespaces, xmlNamespaces.XmlNamespacesElements, item);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(xmlNamespaces, token2);
			}
			return xmlNamespaces;
		}

		// Token: 0x060016DF RID: 5855 RVA: 0x0009EAE8 File Offset: 0x0009CCE8
		public CommonTableExpression commonTableExpression()
		{
			CommonTableExpression commonTableExpression = base.FragmentFactory.CreateFragment<CommonTableExpression>();
			Identifier expressionName = this.identifier();
			if (this.inputState.guessing == 0)
			{
				commonTableExpression.ExpressionName = expressionName;
			}
			int num = this.LA(1);
			if (num != 9)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.columnNameList(commonTableExpression, commonTableExpression.Columns);
			}
			this.match(9);
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.subqueryExpression();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				commonTableExpression.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(commonTableExpression, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(commonTableExpression, token2);
			}
			return commonTableExpression;
		}

		// Token: 0x060016E0 RID: 5856 RVA: 0x0009EBB4 File Offset: 0x0009CDB4
		public XmlNamespacesElement xmlNamespacesElement()
		{
			int num = this.LA(1);
			XmlNamespacesElement result;
			if (num != 47)
			{
				switch (num)
				{
				case 230:
				case 231:
					result = this.xmlNamespacesAliasElement();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				result = this.xmlNamespacesDefaultElement();
			}
			return result;
		}

		// Token: 0x060016E1 RID: 5857 RVA: 0x0009EC0C File Offset: 0x0009CE0C
		public XmlNamespacesDefaultElement xmlNamespacesDefaultElement()
		{
			XmlNamespacesDefaultElement xmlNamespacesDefaultElement = base.FragmentFactory.CreateFragment<XmlNamespacesDefaultElement>();
			IToken token = this.LT(1);
			this.match(47);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(xmlNamespacesDefaultElement, token);
			}
			StringLiteral @string = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				xmlNamespacesDefaultElement.String = @string;
			}
			return xmlNamespacesDefaultElement;
		}

		// Token: 0x060016E2 RID: 5858 RVA: 0x0009EC68 File Offset: 0x0009CE68
		public XmlNamespacesAliasElement xmlNamespacesAliasElement()
		{
			XmlNamespacesAliasElement xmlNamespacesAliasElement = base.FragmentFactory.CreateFragment<XmlNamespacesAliasElement>();
			StringLiteral @string = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				xmlNamespacesAliasElement.String = @string;
			}
			this.match(9);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				xmlNamespacesAliasElement.Identifier = identifier;
			}
			return xmlNamespacesAliasElement;
		}

		// Token: 0x060016E3 RID: 5859 RVA: 0x0009ECC0 File Offset: 0x0009CEC0
		public QueryExpression queryExpression(SelectStatement vSelectStatement)
		{
			BinaryQueryExpression binaryQueryExpression = null;
			QueryExpression queryExpression = this.queryExpressionUnit(vSelectStatement);
			while (this.LA(1) == 59 || this.LA(1) == 87 || this.LA(1) == 158)
			{
				if (this.inputState.guessing == 0)
				{
					binaryQueryExpression = base.FragmentFactory.CreateFragment<BinaryQueryExpression>();
					binaryQueryExpression.FirstQueryExpression = queryExpression;
				}
				int num = this.LA(1);
				if (num != 59)
				{
					if (num != 87)
					{
						if (num != 158)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(158);
						if (this.inputState.guessing == 0)
						{
							binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Union;
						}
					}
					else
					{
						this.match(87);
						if (this.inputState.guessing == 0)
						{
							binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Intersect;
						}
					}
				}
				else
				{
					this.match(59);
					if (this.inputState.guessing == 0)
					{
						binaryQueryExpression.BinaryQueryExpressionType = BinaryQueryExpressionType.Except;
					}
				}
				int num2 = this.LA(1);
				if (num2 != 5)
				{
					if (num2 != 140 && num2 != 191)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(5);
					if (this.inputState.guessing == 0)
					{
						binaryQueryExpression.All = true;
					}
				}
				queryExpression = this.queryExpressionUnit(null);
				if (this.inputState.guessing == 0)
				{
					binaryQueryExpression.SecondQueryExpression = queryExpression;
					queryExpression = binaryQueryExpression;
				}
			}
			return queryExpression;
		}

		// Token: 0x060016E4 RID: 5860 RVA: 0x0009EE20 File Offset: 0x0009D020
		public OrderByClause orderByClause()
		{
			OrderByClause orderByClause = base.FragmentFactory.CreateFragment<OrderByClause>();
			IToken token = this.LT(1);
			this.match(113);
			this.match(18);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(orderByClause, token);
			}
			ExpressionWithSortOrder item = this.expressionWithSortOrder();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExpressionWithSortOrder>(orderByClause, orderByClause.OrderByElements, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.expressionWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExpressionWithSortOrder>(orderByClause, orderByClause.OrderByElements, item);
				}
			}
			return orderByClause;
		}

		// Token: 0x060016E5 RID: 5861 RVA: 0x0009EEC8 File Offset: 0x0009D0C8
		public ComputeClause computeClause()
		{
			ComputeClause computeClause = base.FragmentFactory.CreateFragment<ComputeClause>();
			IToken token = this.LT(1);
			this.match(29);
			ComputeFunction item = this.computeFunction();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(computeClause, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ComputeFunction>(computeClause, computeClause.ComputeFunctions, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.computeFunction();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ComputeFunction>(computeClause, computeClause.ComputeFunctions, item);
				}
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 64)
				{
					if (num <= 23)
					{
						if (num == 1)
						{
							return computeClause;
						}
						switch (num)
						{
						case 4:
						case 6:
							return computeClause;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
							case 22:
							case 23:
								return computeClause;
							case 18:
								this.match(18);
								this.expressionList(computeClause, computeClause.ByExpressions);
								return computeClause;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 28:
						case 29:
							return computeClause;
						default:
							switch (num)
							{
							case 33:
							case 35:
								return computeClause;
							case 34:
								break;
							default:
								switch (num)
								{
								case 44:
								case 45:
								case 46:
								case 48:
								case 49:
								case 54:
								case 55:
								case 56:
								case 60:
								case 61:
								case 64:
									return computeClause;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					if (num == 67)
					{
						return computeClause;
					}
					switch (num)
					{
					case 74:
					case 75:
						return computeClause;
					default:
						if (num == 82)
						{
							return computeClause;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return computeClause;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 111 || num == 119)
					{
						return computeClause;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return computeClause;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return computeClause;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return computeClause;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return computeClause;
				}
				switch (num)
				{
				case 180:
				case 181:
					return computeClause;
				default:
					if (num == 191)
					{
						return computeClause;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return computeClause;
				}
				switch (num)
				{
				case 219:
				case 220:
					return computeClause;
				default:
					if (num == 232)
					{
						return computeClause;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060016E6 RID: 5862 RVA: 0x0009F1F8 File Offset: 0x0009D3F8
		public ForClause forClause()
		{
			ForClause forClause = null;
			IToken token = this.LT(1);
			this.match(67);
			int num = this.LA(1);
			if (num <= 124)
			{
				if (num != 16)
				{
					if (num == 124)
					{
						this.match(124);
						IToken token2 = this.LT(1);
						this.match(232);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "ONLY");
							forClause = base.FragmentFactory.CreateFragment<ReadOnlyForClause>();
							TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token2);
							return forClause;
						}
						return forClause;
					}
				}
				else
				{
					forClause = this.browseForClause();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token);
						return forClause;
					}
					return forClause;
				}
			}
			else if (num != 160)
			{
				if (num == 232)
				{
					forClause = this.xmlForClause();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token);
						return forClause;
					}
					return forClause;
				}
			}
			else
			{
				forClause = this.updateForClause();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(forClause, token);
					return forClause;
				}
				return forClause;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060016E7 RID: 5863 RVA: 0x0009F308 File Offset: 0x0009D508
		public void optimizerHints(TSqlFragment vParent, IList<OptimizerHint> hintsCollection)
		{
			IToken token = this.LT(1);
			this.match(111);
			this.match(191);
			OptimizerHint item = this.hint();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<OptimizerHint>(vParent, hintsCollection, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.hint();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<OptimizerHint>(vParent, hintsCollection, item);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x060016E8 RID: 5864 RVA: 0x0009F3B8 File Offset: 0x0009D5B8
		public QueryDerivedTable derivedTable()
		{
			QueryDerivedTable queryDerivedTable = base.FragmentFactory.CreateFragment<QueryDerivedTable>();
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.subqueryExpression();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				queryDerivedTable.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(queryDerivedTable, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(queryDerivedTable, token2);
			}
			this.simpleTableReferenceAlias(queryDerivedTable);
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.columnNameList(queryDerivedTable, queryDerivedTable.Columns);
			}
			else if (!TSql90ParserInternal.tokenSet_73_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return queryDerivedTable;
		}

		// Token: 0x060016E9 RID: 5865 RVA: 0x0009F4A0 File Offset: 0x0009D6A0
		public void simpleTableReferenceAlias(TableReferenceWithAlias vParent)
		{
			int num = this.LA(1);
			if (num != 9)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(9);
			}
			Identifier alias = this.identifier();
			if (this.inputState.guessing == 0)
			{
				vParent.Alias = alias;
			}
		}

		// Token: 0x060016EA RID: 5866 RVA: 0x0009F508 File Offset: 0x0009D708
		public ScalarSubquery subquery(ExpressionFlags expressionFlags)
		{
			ScalarSubquery scalarSubquery = base.FragmentFactory.CreateFragment<ScalarSubquery>();
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.subqueryExpression();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				if (ExpressionFlags.ScalarSubqueriesDisallowed == (expressionFlags & ExpressionFlags.ScalarSubqueriesDisallowed))
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46098", queryExpression, TSqlParserResource.SQL46098Message, new string[0]);
				}
				scalarSubquery.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(scalarSubquery, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(scalarSubquery, token2);
			}
			return scalarSubquery;
		}

		// Token: 0x060016EB RID: 5867 RVA: 0x0009F594 File Offset: 0x0009D794
		public QueryExpression subqueryExpressionUnit()
		{
			int num = this.LA(1);
			QueryExpression result;
			if (num != 140)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.subqueryParenthesis();
			}
			else
			{
				result = this.subquerySpecification();
			}
			return result;
		}

		// Token: 0x060016EC RID: 5868 RVA: 0x0009F5E4 File Offset: 0x0009D7E4
		public QuerySpecification subquerySpecification()
		{
			QuerySpecification querySpecification = base.FragmentFactory.CreateFragment<QuerySpecification>();
			IToken token = this.LT(1);
			this.match(140);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(querySpecification, token);
			}
			this.uniqueRowFilterOpt(querySpecification);
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num == 20 || num == 25 || num == 34)
					{
						goto IL_210;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_210;
					default:
						switch (num)
						{
						case 79:
						case 81:
							goto IL_210;
						}
						break;
					}
				}
				else
				{
					if (num == 93)
					{
						goto IL_210;
					}
					switch (num)
					{
					case 100:
					case 101:
						goto IL_210;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num == 133 || num == 136)
					{
						goto IL_210;
					}
				}
				else if (num == 141 || num == 147)
				{
					goto IL_210;
				}
			}
			else if (num <= 163)
			{
				if (num != 152)
				{
					if (num == 163)
					{
						goto IL_210;
					}
				}
				else
				{
					TopRowFilter topRowFilter = this.topRowFilter();
					if (this.inputState.guessing == 0)
					{
						querySpecification.TopRowFilter = topRowFilter;
						goto IL_210;
					}
					goto IL_210;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					goto IL_210;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_210;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_210:
			SelectElement item = this.selectColumnOrStarExpression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(querySpecification, querySpecification.SelectElements, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.selectColumnOrStarExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(querySpecification, querySpecification.SelectElements, item);
				}
			}
			FromClause fromClause = this.fromClauseOpt();
			if (this.inputState.guessing == 0)
			{
				querySpecification.FromClause = fromClause;
			}
			int num2 = this.LA(1);
			if (num2 <= 87)
			{
				if (num2 <= 49)
				{
					if (num2 == 1 || num2 == 35 || num2 == 49)
					{
						goto IL_39C;
					}
				}
				else if (num2 <= 67)
				{
					if (num2 == 59 || num2 == 67)
					{
						goto IL_39C;
					}
				}
				else
				{
					switch (num2)
					{
					case 75:
					case 76:
					case 77:
						goto IL_39C;
					default:
						if (num2 == 87)
						{
							goto IL_39C;
						}
						break;
					}
				}
			}
			else if (num2 <= 158)
			{
				if (num2 == 113 || num2 == 132 || num2 == 158)
				{
					goto IL_39C;
				}
			}
			else if (num2 <= 192)
			{
				switch (num2)
				{
				case 169:
				{
					WhereClause whereClause = this.whereClause();
					if (this.inputState.guessing == 0)
					{
						querySpecification.WhereClause = whereClause;
						goto IL_39C;
					}
					goto IL_39C;
				}
				case 170:
					break;
				case 171:
					goto IL_39C;
				default:
					if (num2 == 192)
					{
						goto IL_39C;
					}
					break;
				}
			}
			else if (num2 == 204 || num2 == 219)
			{
				goto IL_39C;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_39C:
			int num3 = this.LA(1);
			if (num3 <= 87)
			{
				if (num3 <= 49)
				{
					if (num3 == 1 || num3 == 35 || num3 == 49)
					{
						goto IL_494;
					}
				}
				else if (num3 <= 67)
				{
					if (num3 == 59 || num3 == 67)
					{
						goto IL_494;
					}
				}
				else
				{
					switch (num3)
					{
					case 75:
					case 77:
						goto IL_494;
					case 76:
					{
						GroupByClause groupByClause = this.groupByClause();
						if (this.inputState.guessing == 0)
						{
							querySpecification.GroupByClause = groupByClause;
							goto IL_494;
						}
						goto IL_494;
					}
					default:
						if (num3 == 87)
						{
							goto IL_494;
						}
						break;
					}
				}
			}
			else if (num3 <= 158)
			{
				if (num3 == 113 || num3 == 132 || num3 == 158)
				{
					goto IL_494;
				}
			}
			else if (num3 <= 192)
			{
				if (num3 == 171 || num3 == 192)
				{
					goto IL_494;
				}
			}
			else if (num3 == 204 || num3 == 219)
			{
				goto IL_494;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_494:
			int num4 = this.LA(1);
			if (num4 <= 87)
			{
				if (num4 <= 49)
				{
					if (num4 == 1 || num4 == 35 || num4 == 49)
					{
						goto IL_58C;
					}
				}
				else if (num4 <= 67)
				{
					if (num4 == 59 || num4 == 67)
					{
						goto IL_58C;
					}
				}
				else
				{
					switch (num4)
					{
					case 75:
						goto IL_58C;
					case 76:
						break;
					case 77:
					{
						HavingClause havingClause = this.havingClause();
						if (this.inputState.guessing == 0)
						{
							querySpecification.HavingClause = havingClause;
							goto IL_58C;
						}
						goto IL_58C;
					}
					default:
						if (num4 == 87)
						{
							goto IL_58C;
						}
						break;
					}
				}
			}
			else if (num4 <= 158)
			{
				if (num4 == 113 || num4 == 132 || num4 == 158)
				{
					goto IL_58C;
				}
			}
			else if (num4 <= 192)
			{
				if (num4 == 171 || num4 == 192)
				{
					goto IL_58C;
				}
			}
			else if (num4 == 204 || num4 == 219)
			{
				goto IL_58C;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_58C:
			int num5 = this.LA(1);
			if (num5 <= 87)
			{
				if (num5 <= 49)
				{
					if (num5 == 1 || num5 == 35 || num5 == 49)
					{
						goto IL_677;
					}
				}
				else if (num5 <= 67)
				{
					if (num5 == 59 || num5 == 67)
					{
						goto IL_677;
					}
				}
				else if (num5 == 75 || num5 == 87)
				{
					goto IL_677;
				}
			}
			else if (num5 <= 158)
			{
				if (num5 != 113)
				{
					if (num5 == 132 || num5 == 158)
					{
						goto IL_677;
					}
				}
				else
				{
					OrderByClause orderByClause = this.orderByClause();
					if (this.inputState.guessing == 0)
					{
						querySpecification.OrderByClause = orderByClause;
						goto IL_677;
					}
					goto IL_677;
				}
			}
			else if (num5 <= 192)
			{
				if (num5 == 171 || num5 == 192)
				{
					goto IL_677;
				}
			}
			else if (num5 == 204 || num5 == 219)
			{
				goto IL_677;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_677:
			if (this.LA(1) == 67 && this.LA(2) == 16 && this.LA(1) == 67 && this.LA(2) == 16)
			{
				this.match(67);
				BrowseForClause forClause = this.browseForClause();
				if (this.inputState.guessing == 0)
				{
					querySpecification.ForClause = forClause;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_75_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num6 = this.LA(1);
			if (num6 <= 75)
			{
				if (num6 <= 49)
				{
					if (num6 == 1 || num6 == 35 || num6 == 49)
					{
						goto IL_801;
					}
				}
				else
				{
					if (num6 == 59)
					{
						goto IL_801;
					}
					if (num6 != 67)
					{
						if (num6 == 75)
						{
							goto IL_801;
						}
					}
					else
					{
						IToken token2 = this.LT(1);
						this.match(67);
						XmlForClause forClause2 = this.xmlForClause();
						if (this.inputState.guessing == 0)
						{
							if (querySpecification.ForClause != null)
							{
								TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
							}
							querySpecification.ForClause = forClause2;
							goto IL_801;
						}
						goto IL_801;
					}
				}
			}
			else if (num6 <= 158)
			{
				if (num6 == 87 || num6 == 132 || num6 == 158)
				{
					goto IL_801;
				}
			}
			else if (num6 <= 192)
			{
				if (num6 == 171 || num6 == 192)
				{
					goto IL_801;
				}
			}
			else if (num6 == 204 || num6 == 219)
			{
				goto IL_801;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_801:
			if (this.inputState.guessing == 0)
			{
				if (querySpecification.OrderByClause != null && querySpecification.TopRowFilter == null && querySpecification.ForClause == null)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46047", querySpecification, TSqlParserResource.SQL46047Message, new string[0]);
				}
				if (querySpecification.TopRowFilter != null && querySpecification.TopRowFilter.WithTies && querySpecification.OrderByClause == null)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46048", querySpecification, TSqlParserResource.SQL46048Message, new string[0]);
				}
			}
			return querySpecification;
		}

		// Token: 0x060016ED RID: 5869 RVA: 0x0009FE64 File Offset: 0x0009E064
		public QueryParenthesisExpression subqueryParenthesis()
		{
			QueryParenthesisExpression queryParenthesisExpression = base.FragmentFactory.CreateFragment<QueryParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.subqueryExpression();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token);
				queryParenthesisExpression.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token2);
			}
			return queryParenthesisExpression;
		}

		// Token: 0x060016EE RID: 5870 RVA: 0x0009FED4 File Offset: 0x0009E0D4
		public QueryExpression queryExpressionUnit(SelectStatement vSelectStatement)
		{
			int num = this.LA(1);
			QueryExpression result;
			if (num != 140)
			{
				if (num != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.queryParenthesis(vSelectStatement);
			}
			else
			{
				result = this.querySpecification(vSelectStatement);
			}
			return result;
		}

		// Token: 0x060016EF RID: 5871 RVA: 0x0009FF28 File Offset: 0x0009E128
		public QuerySpecification querySpecification(SelectStatement vSelectStatement)
		{
			QuerySpecification querySpecification = base.FragmentFactory.CreateFragment<QuerySpecification>();
			IToken token = this.LT(1);
			this.match(140);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(querySpecification, token);
			}
			this.uniqueRowFilterOpt(querySpecification);
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num == 20 || num == 25 || num == 34)
					{
						goto IL_210;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_210;
					default:
						switch (num)
						{
						case 79:
						case 81:
							goto IL_210;
						}
						break;
					}
				}
				else
				{
					if (num == 93)
					{
						goto IL_210;
					}
					switch (num)
					{
					case 100:
					case 101:
						goto IL_210;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num == 133 || num == 136)
					{
						goto IL_210;
					}
				}
				else if (num == 141 || num == 147)
				{
					goto IL_210;
				}
			}
			else if (num <= 163)
			{
				if (num != 152)
				{
					if (num == 163)
					{
						goto IL_210;
					}
				}
				else
				{
					TopRowFilter topRowFilter = this.topRowFilter();
					if (this.inputState.guessing == 0)
					{
						querySpecification.TopRowFilter = topRowFilter;
						goto IL_210;
					}
					goto IL_210;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					goto IL_210;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_210;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_210:
			this.selectExpression(querySpecification);
			while (this.LA(1) == 198)
			{
				this.match(198);
				this.selectExpression(querySpecification);
			}
			int num2 = this.LA(1);
			if (num2 <= 95)
			{
				if (num2 <= 29)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							goto IL_566;
						}
						switch (num2)
						{
						case 4:
						case 6:
							goto IL_566;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_566;
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_566;
							default:
								switch (num2)
								{
								case 28:
								case 29:
									goto IL_566;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 77)
				{
					switch (num2)
					{
					case 33:
					case 35:
						goto IL_566;
					case 34:
						break;
					default:
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
						case 71:
						case 74:
						case 75:
						case 76:
						case 77:
							goto IL_566;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 82:
					case 86:
					case 87:
						goto IL_566;
					case 83:
					case 84:
					case 85:
						break;
					case 88:
					{
						IToken token2 = this.LT(1);
						this.match(88);
						SchemaObjectName into = this.schemaObjectThreePartName();
						if (this.inputState.guessing == 0)
						{
							if (vSelectStatement == null)
							{
								TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
							}
							vSelectStatement.Into = into;
							goto IL_566;
						}
						goto IL_566;
					}
					default:
						if (num2 == 92 || num2 == 95)
						{
							goto IL_566;
						}
						break;
					}
				}
			}
			else if (num2 <= 176)
			{
				if (num2 <= 113)
				{
					if (num2 == 106)
					{
						goto IL_566;
					}
					switch (num2)
					{
					case 111:
					case 113:
						goto IL_566;
					}
				}
				else
				{
					if (num2 == 119)
					{
						goto IL_566;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_566;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 169:
						case 170:
						case 171:
						case 172:
						case 176:
							goto IL_566;
						}
						break;
					}
				}
			}
			else if (num2 <= 192)
			{
				switch (num2)
				{
				case 180:
				case 181:
					goto IL_566;
				default:
					switch (num2)
					{
					case 191:
					case 192:
						goto IL_566;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					goto IL_566;
				}
				switch (num2)
				{
				case 219:
				case 220:
					goto IL_566;
				default:
					if (num2 == 232)
					{
						goto IL_566;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_566:
			FromClause fromClause = this.fromClauseOpt();
			if (this.inputState.guessing == 0)
			{
				querySpecification.FromClause = fromClause;
			}
			int num3 = this.LA(1);
			if (num3 <= 92)
			{
				if (num3 <= 29)
				{
					if (num3 <= 6)
					{
						if (num3 == 1)
						{
							goto IL_88C;
						}
						switch (num3)
						{
						case 4:
						case 6:
							goto IL_88C;
						}
					}
					else
					{
						switch (num3)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_88C;
						case 14:
						case 16:
							break;
						default:
							switch (num3)
							{
							case 22:
							case 23:
								goto IL_88C;
							default:
								switch (num3)
								{
								case 28:
								case 29:
									goto IL_88C;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num3 <= 67)
				{
					switch (num3)
					{
					case 33:
					case 35:
						goto IL_88C;
					case 34:
						break;
					default:
						switch (num3)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
							goto IL_88C;
						}
						break;
					}
				}
				else
				{
					switch (num3)
					{
					case 74:
					case 75:
					case 76:
					case 77:
					case 82:
						goto IL_88C;
					case 78:
					case 79:
					case 80:
					case 81:
						break;
					default:
						switch (num3)
						{
						case 86:
						case 87:
							goto IL_88C;
						default:
							if (num3 == 92)
							{
								goto IL_88C;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num3 <= 144)
			{
				if (num3 <= 106)
				{
					if (num3 == 95 || num3 == 106)
					{
						goto IL_88C;
					}
				}
				else
				{
					switch (num3)
					{
					case 111:
					case 113:
						goto IL_88C;
					case 112:
						break;
					default:
						if (num3 == 119)
						{
							goto IL_88C;
						}
						switch (num3)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_88C;
						}
						break;
					}
				}
			}
			else if (num3 <= 192)
			{
				switch (num3)
				{
				case 156:
				case 158:
				case 160:
				case 161:
				case 162:
				case 167:
				case 170:
				case 171:
				case 172:
				case 176:
					goto IL_88C;
				case 157:
				case 159:
				case 163:
				case 164:
				case 165:
				case 166:
				case 168:
				case 173:
				case 174:
				case 175:
					break;
				case 169:
				{
					WhereClause whereClause = this.whereClause();
					if (this.inputState.guessing == 0)
					{
						querySpecification.WhereClause = whereClause;
						goto IL_88C;
					}
					goto IL_88C;
				}
				default:
					switch (num3)
					{
					case 180:
					case 181:
						goto IL_88C;
					default:
						switch (num3)
						{
						case 191:
						case 192:
							goto IL_88C;
						}
						break;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					goto IL_88C;
				}
				switch (num3)
				{
				case 219:
				case 220:
					goto IL_88C;
				default:
					if (num3 == 232)
					{
						goto IL_88C;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_88C:
			int num4 = this.LA(1);
			if (num4 <= 95)
			{
				if (num4 <= 29)
				{
					if (num4 <= 6)
					{
						if (num4 == 1)
						{
							goto IL_B8E;
						}
						switch (num4)
						{
						case 4:
						case 6:
							goto IL_B8E;
						}
					}
					else
					{
						switch (num4)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							goto IL_B8E;
						case 14:
						case 16:
							break;
						default:
							switch (num4)
							{
							case 22:
							case 23:
								goto IL_B8E;
							default:
								switch (num4)
								{
								case 28:
								case 29:
									goto IL_B8E;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num4 <= 82)
				{
					switch (num4)
					{
					case 33:
					case 35:
						goto IL_B8E;
					case 34:
						break;
					default:
						switch (num4)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
							goto IL_B8E;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 62:
						case 63:
						case 65:
						case 66:
							break;
						default:
							switch (num4)
							{
							case 74:
							case 75:
							case 77:
							case 82:
								goto IL_B8E;
							case 76:
							{
								GroupByClause groupByClause = this.groupByClause();
								if (this.inputState.guessing == 0)
								{
									querySpecification.GroupByClause = groupByClause;
									goto IL_B8E;
								}
								goto IL_B8E;
							}
							}
							break;
						}
						break;
					}
				}
				else
				{
					switch (num4)
					{
					case 86:
					case 87:
						goto IL_B8E;
					default:
						if (num4 == 92 || num4 == 95)
						{
							goto IL_B8E;
						}
						break;
					}
				}
			}
			else if (num4 <= 172)
			{
				if (num4 <= 113)
				{
					if (num4 == 106)
					{
						goto IL_B8E;
					}
					switch (num4)
					{
					case 111:
					case 113:
						goto IL_B8E;
					}
				}
				else
				{
					if (num4 == 119)
					{
						goto IL_B8E;
					}
					switch (num4)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_B8E;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num4)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_B8E;
						}
						break;
					}
				}
			}
			else if (num4 <= 192)
			{
				if (num4 == 176)
				{
					goto IL_B8E;
				}
				switch (num4)
				{
				case 180:
				case 181:
					goto IL_B8E;
				default:
					switch (num4)
					{
					case 191:
					case 192:
						goto IL_B8E;
					}
					break;
				}
			}
			else
			{
				if (num4 == 204)
				{
					goto IL_B8E;
				}
				switch (num4)
				{
				case 219:
				case 220:
					goto IL_B8E;
				default:
					if (num4 == 232)
					{
						goto IL_B8E;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_B8E:
			int num5 = this.LA(1);
			if (num5 <= 92)
			{
				if (num5 <= 29)
				{
					if (num5 <= 6)
					{
						if (num5 == 1)
						{
							return querySpecification;
						}
						switch (num5)
						{
						case 4:
						case 6:
							return querySpecification;
						}
					}
					else
					{
						switch (num5)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return querySpecification;
						case 14:
						case 16:
							break;
						default:
							switch (num5)
							{
							case 22:
							case 23:
								return querySpecification;
							default:
								switch (num5)
								{
								case 28:
								case 29:
									return querySpecification;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num5 <= 77)
				{
					switch (num5)
					{
					case 33:
					case 35:
						return querySpecification;
					case 34:
						break;
					default:
						switch (num5)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
							return querySpecification;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 62:
						case 63:
						case 65:
						case 66:
							break;
						default:
							switch (num5)
							{
							case 74:
							case 75:
								return querySpecification;
							case 77:
							{
								HavingClause havingClause = this.havingClause();
								if (this.inputState.guessing == 0)
								{
									querySpecification.HavingClause = havingClause;
									return querySpecification;
								}
								return querySpecification;
							}
							}
							break;
						}
						break;
					}
				}
				else
				{
					if (num5 == 82)
					{
						return querySpecification;
					}
					switch (num5)
					{
					case 86:
					case 87:
						return querySpecification;
					default:
						if (num5 == 92)
						{
							return querySpecification;
						}
						break;
					}
				}
			}
			else if (num5 <= 172)
			{
				if (num5 <= 113)
				{
					if (num5 == 95 || num5 == 106)
					{
						return querySpecification;
					}
					switch (num5)
					{
					case 111:
					case 113:
						return querySpecification;
					}
				}
				else
				{
					if (num5 == 119)
					{
						return querySpecification;
					}
					switch (num5)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return querySpecification;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num5)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return querySpecification;
						}
						break;
					}
				}
			}
			else if (num5 <= 192)
			{
				if (num5 == 176)
				{
					return querySpecification;
				}
				switch (num5)
				{
				case 180:
				case 181:
					return querySpecification;
				default:
					switch (num5)
					{
					case 191:
					case 192:
						return querySpecification;
					}
					break;
				}
			}
			else
			{
				if (num5 == 204)
				{
					return querySpecification;
				}
				switch (num5)
				{
				case 219:
				case 220:
					return querySpecification;
				default:
					if (num5 == 232)
					{
						return querySpecification;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060016F0 RID: 5872 RVA: 0x000A0DBC File Offset: 0x0009EFBC
		public QueryParenthesisExpression queryParenthesis(SelectStatement vSelectStatement)
		{
			QueryParenthesisExpression queryParenthesisExpression = base.FragmentFactory.CreateFragment<QueryParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			QueryExpression queryExpression = this.queryExpression(vSelectStatement);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token);
				queryParenthesisExpression.QueryExpression = queryExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(queryParenthesisExpression, token2);
			}
			return queryParenthesisExpression;
		}

		// Token: 0x060016F1 RID: 5873 RVA: 0x000A0E2C File Offset: 0x0009F02C
		public void uniqueRowFilterOpt(QuerySpecification vParent)
		{
			int num = this.LA(1);
			if (num <= 93)
			{
				if (num <= 34)
				{
					if (num <= 20)
					{
						if (num != 5)
						{
							if (num != 20)
							{
								goto IL_1C3;
							}
							return;
						}
					}
					else
					{
						if (num != 25 && num != 34)
						{
							goto IL_1C3;
						}
						return;
					}
				}
				else if (num <= 51)
				{
					switch (num)
					{
					case 40:
					case 41:
						return;
					default:
						if (num != 51)
						{
							goto IL_1C3;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 79:
					case 81:
						return;
					case 80:
						goto IL_1C3;
					default:
						if (num != 93)
						{
							goto IL_1C3;
						}
						return;
					}
				}
				IToken token;
				UniqueRowFilter uniqueRowFilter = this.uniqueRowFilter(out token);
				if (this.inputState.guessing == 0)
				{
					vParent.UniqueRowFilter = uniqueRowFilter;
					return;
				}
				return;
			}
			else if (num <= 141)
			{
				if (num <= 133)
				{
					switch (num)
					{
					case 100:
					case 101:
						return;
					default:
						if (num == 133)
						{
							return;
						}
						break;
					}
				}
				else if (num == 136 || num == 141)
				{
					return;
				}
			}
			else if (num <= 152)
			{
				if (num == 147 || num == 152)
				{
					return;
				}
			}
			else
			{
				if (num == 163)
				{
					return;
				}
				switch (num)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					return;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						return;
					}
					break;
				}
			}
			IL_1C3:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060016F2 RID: 5874 RVA: 0x000A1010 File Offset: 0x0009F210
		public TopRowFilter topRowFilter()
		{
			TopRowFilter topRowFilter = base.FragmentFactory.CreateFragment<TopRowFilter>();
			IToken token = this.LT(1);
			this.match(152);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token);
			}
			int num = this.LA(1);
			ScalarExpression scalarExpression;
			if (num != 191)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
					scalarExpression = this.integerOrRealOrNumeric();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				scalarExpression = this.paranthesisDisambiguatorForExpressions(ExpressionFlags.None);
			}
			if (this.inputState.guessing == 0)
			{
				topRowFilter.Expression = scalarExpression;
			}
			int num2 = this.LA(1);
			if (num2 <= 116)
			{
				if (num2 <= 41)
				{
					if (num2 <= 25)
					{
						if (num2 == 20 || num2 == 25)
						{
							goto IL_2A3;
						}
					}
					else
					{
						if (num2 == 34)
						{
							goto IL_2A3;
						}
						switch (num2)
						{
						case 40:
						case 41:
							goto IL_2A3;
						}
					}
				}
				else if (num2 <= 93)
				{
					switch (num2)
					{
					case 79:
					case 81:
						goto IL_2A3;
					case 80:
						break;
					default:
						if (num2 == 93)
						{
							goto IL_2A3;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 100:
					case 101:
						goto IL_2A3;
					default:
						if (num2 == 116)
						{
							IToken token2 = this.LT(1);
							this.match(116);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.ThrowIfPercentValueOutOfRange(scalarExpression);
								TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token2);
								topRowFilter.Percent = true;
								goto IL_2A3;
							}
							goto IL_2A3;
						}
						break;
					}
				}
			}
			else if (num2 <= 147)
			{
				if (num2 <= 136)
				{
					if (num2 == 133 || num2 == 136)
					{
						goto IL_2A3;
					}
				}
				else if (num2 == 141 || num2 == 147)
				{
					goto IL_2A3;
				}
			}
			else if (num2 <= 171)
			{
				if (num2 == 163 || num2 == 171)
				{
					goto IL_2A3;
				}
			}
			else
			{
				switch (num2)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					goto IL_2A3;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num2)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_2A3;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_2A3:
			int num3 = this.LA(1);
			if (num3 <= 101)
			{
				if (num3 <= 34)
				{
					if (num3 == 20 || num3 == 25 || num3 == 34)
					{
						return topRowFilter;
					}
				}
				else if (num3 <= 81)
				{
					switch (num3)
					{
					case 40:
					case 41:
						return topRowFilter;
					default:
						switch (num3)
						{
						case 79:
						case 81:
							return topRowFilter;
						}
						break;
					}
				}
				else
				{
					if (num3 == 93)
					{
						return topRowFilter;
					}
					switch (num3)
					{
					case 100:
					case 101:
						return topRowFilter;
					}
				}
			}
			else if (num3 <= 147)
			{
				if (num3 <= 136)
				{
					if (num3 == 133 || num3 == 136)
					{
						return topRowFilter;
					}
				}
				else if (num3 == 141 || num3 == 147)
				{
					return topRowFilter;
				}
			}
			else if (num3 <= 171)
			{
				if (num3 == 163)
				{
					return topRowFilter;
				}
				if (num3 == 171)
				{
					this.match(171);
					IToken token3 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "TIES");
						TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token3);
						topRowFilter.WithTies = true;
						return topRowFilter;
					}
					return topRowFilter;
				}
			}
			else
			{
				switch (num3)
				{
				case 191:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					return topRowFilter;
				case 192:
				case 194:
				case 196:
				case 198:
					break;
				default:
					switch (num3)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						return topRowFilter;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060016F3 RID: 5875 RVA: 0x000A14BC File Offset: 0x0009F6BC
		public SelectElement selectColumnOrStarExpression()
		{
			bool flag = false;
			if (TSql90ParserInternal.tokenSet_76_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_77_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.selectStarExpression();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			SelectElement result;
			if (flag)
			{
				result = this.selectStarExpression();
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_78_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_79_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.selectColumn();
			}
			return result;
		}

		// Token: 0x060016F4 RID: 5876 RVA: 0x000A1594 File Offset: 0x0009F794
		public FromClause fromClauseOpt()
		{
			FromClause result = null;
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 29)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return result;
						}
						switch (num)
						{
						case 4:
						case 6:
							return result;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return result;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return result;
							default:
								switch (num)
								{
								case 28:
								case 29:
									return result;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 77)
				{
					switch (num)
					{
					case 33:
					case 35:
						return result;
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
						case 74:
						case 75:
						case 76:
						case 77:
							return result;
						case 71:
							return this.fromClause();
						}
						break;
					}
				}
				else
				{
					if (num == 82)
					{
						return result;
					}
					switch (num)
					{
					case 86:
					case 87:
						return result;
					default:
						if (num == 92)
						{
							return result;
						}
						break;
					}
				}
			}
			else if (num <= 144)
			{
				if (num <= 106)
				{
					if (num == 95 || num == 106)
					{
						return result;
					}
				}
				else
				{
					switch (num)
					{
					case 111:
					case 113:
						return result;
					case 112:
						break;
					default:
						if (num == 119)
						{
							return result;
						}
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return result;
						}
						break;
					}
				}
			}
			else if (num <= 192)
			{
				switch (num)
				{
				case 156:
				case 158:
				case 160:
				case 161:
				case 162:
				case 167:
				case 169:
				case 170:
				case 171:
				case 172:
				case 176:
					return result;
				case 157:
				case 159:
				case 163:
				case 164:
				case 165:
				case 166:
				case 168:
				case 173:
				case 174:
				case 175:
					break;
				default:
					switch (num)
					{
					case 180:
					case 181:
						return result;
					default:
						switch (num)
						{
						case 191:
						case 192:
							return result;
						}
						break;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return result;
				}
				switch (num)
				{
				case 219:
				case 220:
					return result;
				default:
					if (num == 232)
					{
						return result;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060016F5 RID: 5877 RVA: 0x000A1880 File Offset: 0x0009FA80
		public WhereClause whereClause()
		{
			WhereClause whereClause = base.FragmentFactory.CreateFragment<WhereClause>();
			IToken token = this.LT(1);
			this.match(169);
			BooleanExpression searchCondition = this.booleanExpression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(whereClause, token);
				whereClause.SearchCondition = searchCondition;
			}
			return whereClause;
		}

		// Token: 0x060016F6 RID: 5878 RVA: 0x000A18D4 File Offset: 0x0009FAD4
		public GroupByClause groupByClause()
		{
			GroupByClause groupByClause = base.FragmentFactory.CreateFragment<GroupByClause>();
			IToken token = this.LT(1);
			this.match(76);
			this.match(18);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(groupByClause, token);
			}
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num <= 20)
					{
						if (num != 5)
						{
							if (num == 20)
							{
								goto IL_209;
							}
						}
						else
						{
							this.match(5);
							if (this.inputState.guessing == 0)
							{
								groupByClause.All = true;
								goto IL_209;
							}
							goto IL_209;
						}
					}
					else if (num == 25 || num == 34)
					{
						goto IL_209;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_209;
					default:
						if (num == 81)
						{
							goto IL_209;
						}
						break;
					}
				}
				else
				{
					if (num == 93)
					{
						goto IL_209;
					}
					switch (num)
					{
					case 100:
					case 101:
						goto IL_209;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num == 133 || num == 136)
					{
						goto IL_209;
					}
				}
				else if (num == 141 || num == 147)
				{
					goto IL_209;
				}
			}
			else if (num <= 193)
			{
				if (num == 163)
				{
					goto IL_209;
				}
				switch (num)
				{
				case 191:
				case 193:
					goto IL_209;
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					goto IL_209;
				case 198:
					break;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_209;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_209:
			ExpressionGroupingSpecification item = this.simpleGroupByItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GroupingSpecification>(groupByClause, groupByClause.GroupingSpecifications, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.simpleGroupByItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<GroupingSpecification>(groupByClause, groupByClause.GroupingSpecifications, item);
				}
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (groupByClause.All)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46084", token2, TSqlParserResource.SQL46084Message, new string[0]);
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(groupByClause, token2);
					groupByClause.GroupByOption = GroupByOptionHelper.Instance.ParseOption(token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_80_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return groupByClause;
		}

		// Token: 0x060016F7 RID: 5879 RVA: 0x000A1C00 File Offset: 0x0009FE00
		public HavingClause havingClause()
		{
			HavingClause havingClause = base.FragmentFactory.CreateFragment<HavingClause>();
			IToken token = this.LT(1);
			this.match(77);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(havingClause, token);
			}
			BooleanExpression searchCondition = this.booleanExpression();
			if (this.inputState.guessing == 0)
			{
				havingClause.SearchCondition = searchCondition;
			}
			return havingClause;
		}

		// Token: 0x060016F8 RID: 5880 RVA: 0x000A1C5C File Offset: 0x0009FE5C
		public BrowseForClause browseForClause()
		{
			BrowseForClause browseForClause = base.FragmentFactory.CreateFragment<BrowseForClause>();
			IToken token = this.LT(1);
			this.match(16);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(browseForClause, token);
			}
			return browseForClause;
		}

		// Token: 0x060016F9 RID: 5881 RVA: 0x000A1C9C File Offset: 0x0009FE9C
		public XmlForClause xmlForClause()
		{
			XmlForClause xmlForClause = base.FragmentFactory.CreateFragment<XmlForClause>();
			XmlForClauseOptions xmlForClauseOptions = XmlForClauseOptions.None;
			IToken token = this.LT(1);
			this.match(232);
			XmlForClauseOption xmlForClauseOption = this.xmlForClauseMode();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "XML");
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<XmlForClauseOption>(xmlForClause, xmlForClause.Options, xmlForClauseOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				xmlForClauseOption = this.xmlParam(xmlForClauseOptions);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<XmlForClauseOption>(xmlForClause, xmlForClause.Options, xmlForClauseOption);
					xmlForClauseOptions |= xmlForClauseOption.OptionKind;
				}
			}
			return xmlForClause;
		}

		// Token: 0x060016FA RID: 5882 RVA: 0x000A1D40 File Offset: 0x0009FF40
		public void selectExpression(QuerySpecification vParent)
		{
			bool flag = false;
			if (this.LA(1) == 234 && this.LA(2) == 206)
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(234);
					this.match(206);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				SelectSetVariable item = this.selectSetVariable();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(vParent, vParent.SelectElements, item);
					return;
				}
			}
			else
			{
				bool flag2 = false;
				if (TSql90ParserInternal.tokenSet_76_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_81_.member(this.LA(2)))
				{
					int pos2 = this.mark();
					flag2 = true;
					this.inputState.guessing++;
					try
					{
						this.selectStarExpression();
					}
					catch (RecognitionException)
					{
						flag2 = false;
					}
					this.rewind(pos2);
					this.inputState.guessing--;
				}
				if (flag2)
				{
					SelectStarExpression item2 = this.selectStarExpression();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(vParent, vParent.SelectElements, item2);
						return;
					}
				}
				else
				{
					if (!TSql90ParserInternal.tokenSet_78_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_82_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					SelectScalarExpression item3 = this.selectColumn();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(vParent, vParent.SelectElements, item3);
						return;
					}
				}
			}
		}

		// Token: 0x060016FB RID: 5883 RVA: 0x000A1EF8 File Offset: 0x000A00F8
		public UniqueRowFilter uniqueRowFilter(out IToken token)
		{
			UniqueRowFilter result = UniqueRowFilter.NotSpecified;
			token = null;
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 51)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(51);
				if (this.inputState.guessing == 0)
				{
					result = UniqueRowFilter.Distinct;
					token = token2;
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					result = UniqueRowFilter.All;
					token = token3;
				}
			}
			return result;
		}

		// Token: 0x060016FC RID: 5884 RVA: 0x000A1F7C File Offset: 0x000A017C
		public Literal integerOrRealOrNumeric()
		{
			Literal result;
			switch (this.LA(1))
			{
			case 221:
				result = this.integer();
				break;
			case 222:
				result = this.numeric();
				break;
			case 223:
				result = this.real();
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return result;
		}

		// Token: 0x060016FD RID: 5885 RVA: 0x000A1FDC File Offset: 0x000A01DC
		public PrimaryExpression paranthesisDisambiguatorForExpressions(ExpressionFlags expressionFlags)
		{
			PrimaryExpression result;
			if (this.LA(1) == 191 && (this.LA(2) == 140 || this.LA(2) == 191) && base.IsNextRuleSelectParenthesis())
			{
				result = this.subquery(expressionFlags);
			}
			else
			{
				if (this.LA(1) != 191 || !TSql90ParserInternal.tokenSet_38_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.expressionParenthesis(expressionFlags);
			}
			return result;
		}

		// Token: 0x060016FE RID: 5886 RVA: 0x000A2068 File Offset: 0x000A0268
		public TopRowFilter topRowFilterForInsertUpdateDelete()
		{
			TopRowFilter topRowFilter = base.FragmentFactory.CreateFragment<TopRowFilter>();
			IToken token = this.LT(1);
			this.match(152);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token);
			}
			ScalarExpression expression = this.paranthesisDisambiguatorForExpressions(ExpressionFlags.None);
			if (this.inputState.guessing == 0)
			{
				topRowFilter.Expression = expression;
			}
			int num = this.LA(1);
			if (num <= 109)
			{
				if (num == 71 || num == 88)
				{
					return topRowFilter;
				}
				switch (num)
				{
				case 107:
				case 108:
				case 109:
					return topRowFilter;
				}
			}
			else
			{
				switch (num)
				{
				case 115:
					return topRowFilter;
				case 116:
				{
					IToken token2 = this.LT(1);
					this.match(116);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(topRowFilter, token2);
						topRowFilter.Percent = true;
						return topRowFilter;
					}
					return topRowFilter;
				}
				default:
					if (num == 200)
					{
						return topRowFilter;
					}
					switch (num)
					{
					case 232:
					case 233:
					case 234:
						return topRowFilter;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060016FF RID: 5887 RVA: 0x000A2178 File Offset: 0x000A0378
		public SelectSetVariable selectSetVariable()
		{
			SelectSetVariable selectSetVariable = base.FragmentFactory.CreateFragment<SelectSetVariable>();
			VariableReference variable = this.variable();
			this.match(206);
			ScalarExpression expression = this.expression();
			if (this.inputState.guessing == 0)
			{
				selectSetVariable.Variable = variable;
				selectSetVariable.Expression = expression;
			}
			return selectSetVariable;
		}

		// Token: 0x06001700 RID: 5888 RVA: 0x000A21C8 File Offset: 0x000A03C8
		public SelectStarExpression selectStarExpression()
		{
			SelectStarExpression selectStarExpression = base.FragmentFactory.CreateFragment<SelectStarExpression>();
			int num = this.LA(1);
			if (num != 195)
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				MultiPartIdentifier qualifier = this.multiPartIdentifier(-1);
				if (this.inputState.guessing == 0)
				{
					selectStarExpression.Qualifier = qualifier;
				}
				this.match(200);
				IToken token = this.LT(1);
				this.match(195);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(selectStarExpression, token);
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(195);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(selectStarExpression, token2);
				}
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckStarQualifier(selectStarExpression);
			}
			return selectStarExpression;
		}

		// Token: 0x06001701 RID: 5889 RVA: 0x000A22B8 File Offset: 0x000A04B8
		public SelectScalarExpression selectColumn()
		{
			SelectScalarExpression selectScalarExpression = base.FragmentFactory.CreateFragment<SelectScalarExpression>();
			if (TSql90ParserInternal.tokenSet_78_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_83_.member(this.LA(2)))
			{
				ScalarExpression expression = this.selectColumnExpression();
				if (this.inputState.guessing == 0)
				{
					selectScalarExpression.Expression = expression;
				}
				if (TSql90ParserInternal.tokenSet_84_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_85_.member(this.LA(2)))
				{
					int num = this.LA(1);
					if (num != 9)
					{
						switch (num)
						{
						case 230:
						case 231:
						case 232:
						case 233:
							break;
						default:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(9);
					}
					IdentifierOrValueExpression columnName = this.stringOrIdentifier();
					if (this.inputState.guessing == 0)
					{
						selectScalarExpression.ColumnName = columnName;
					}
				}
				else if (!TSql90ParserInternal.tokenSet_86_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (this.LA(1) < 230 || this.LA(1) > 233 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IdentifierOrValueExpression columnName = this.stringOrIdentifier();
				if (this.inputState.guessing == 0)
				{
					selectScalarExpression.ColumnName = columnName;
				}
				this.match(206);
				ScalarExpression expression = this.selectColumnExpression();
				if (this.inputState.guessing == 0)
				{
					selectScalarExpression.Expression = expression;
				}
			}
			return selectScalarExpression;
		}

		// Token: 0x06001702 RID: 5890 RVA: 0x000A2468 File Offset: 0x000A0668
		public SelectElement outputClauseSelectElement()
		{
			bool flag = false;
			if (TSql90ParserInternal.tokenSet_76_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_87_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.selectStarExpression();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			SelectElement result;
			if (flag)
			{
				result = this.selectStarExpression();
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_88_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_89_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.outputClauseSelectColumn();
			}
			return result;
		}

		// Token: 0x06001703 RID: 5891 RVA: 0x000A2540 File Offset: 0x000A0740
		public SelectScalarExpression outputClauseSelectColumn()
		{
			SelectScalarExpression selectScalarExpression = base.FragmentFactory.CreateFragment<SelectScalarExpression>();
			bool flag = false;
			if (TSql90ParserInternal.tokenSet_76_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_87_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.starColumn();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				ScalarExpression expression = this.starColumn();
				if (this.inputState.guessing == 0)
				{
					selectScalarExpression.Expression = expression;
				}
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_38_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_89_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				ScalarExpression expression = this.expression();
				if (this.inputState.guessing == 0)
				{
					selectScalarExpression.Expression = expression;
				}
				if (TSql90ParserInternal.tokenSet_84_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_90_.member(this.LA(2)))
				{
					int num = this.LA(1);
					if (num != 9)
					{
						switch (num)
						{
						case 230:
						case 231:
						case 232:
						case 233:
							break;
						default:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(9);
					}
					IdentifierOrValueExpression columnName = this.stringOrIdentifier();
					if (this.inputState.guessing == 0)
					{
						selectScalarExpression.ColumnName = columnName;
					}
				}
				else if (!TSql90ParserInternal.tokenSet_91_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_92_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return selectScalarExpression;
		}

		// Token: 0x06001704 RID: 5892 RVA: 0x000A2720 File Offset: 0x000A0920
		public ColumnReferenceExpression starColumn()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			columnReferenceExpression.ColumnType = ColumnType.Wildcard;
			int num = this.LA(1);
			if (num != 195)
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
				if (this.inputState.guessing == 0)
				{
					columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
				}
				this.match(200);
				IToken token = this.LT(1);
				this.match(195);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(columnReferenceExpression, token);
					columnReferenceExpression.ColumnType = ColumnType.Wildcard;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(195);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(columnReferenceExpression, token2);
					columnReferenceExpression.ColumnType = ColumnType.Wildcard;
				}
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckSpecialColumn(columnReferenceExpression);
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
			}
			return columnReferenceExpression;
		}

		// Token: 0x06001705 RID: 5893 RVA: 0x000A2830 File Offset: 0x000A0A30
		public ScalarExpression selectColumnExpression()
		{
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_195;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						switch (num)
						{
						case 79:
							return this.identityFunction();
						case 80:
							goto IL_195;
						case 81:
							break;
						default:
							goto IL_195;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_195;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_195;
					}
				}
				else if (num != 141 && num != 147)
				{
					goto IL_195;
				}
			}
			else if (num <= 193)
			{
				if (num != 163)
				{
					switch (num)
					{
					case 191:
					case 193:
						break;
					case 192:
						goto IL_195;
					default:
						goto IL_195;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_195;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_195;
					default:
						goto IL_195;
					}
					break;
				}
			}
			return this.expression();
			IL_195:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001706 RID: 5894 RVA: 0x000A29E8 File Offset: 0x000A0BE8
		public IdentityFunctionCall identityFunction()
		{
			IdentityFunctionCall identityFunctionCall = base.FragmentFactory.CreateFragment<IdentityFunctionCall>();
			IToken token = this.LT(1);
			this.match(79);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identityFunctionCall, token);
			}
			this.match(191);
			DataTypeReference dataType = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				identityFunctionCall.DataType = dataType;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				ScalarExpression scalarExpression = this.seedIncrement();
				if (this.inputState.guessing == 0)
				{
					identityFunctionCall.Seed = scalarExpression;
				}
				this.match(198);
				scalarExpression = this.seedIncrement();
				if (this.inputState.guessing == 0)
				{
					identityFunctionCall.Increment = scalarExpression;
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identityFunctionCall, token2);
			}
			return identityFunctionCall;
		}

		// Token: 0x06001707 RID: 5895 RVA: 0x000A2AF8 File Offset: 0x000A0CF8
		public ScalarExpression seedIncrement()
		{
			ScalarExpression result = null;
			UnaryExpression unaryExpression = null;
			int num = this.LA(1);
			switch (num)
			{
			case 197:
			{
				IToken token = this.LT(1);
				this.match(197);
				if (this.inputState.guessing == 0)
				{
					unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
					TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
					unaryExpression.UnaryExpressionType = UnaryExpressionType.Positive;
					goto IL_D3;
				}
				goto IL_D3;
			}
			case 198:
				break;
			case 199:
			{
				IToken token2 = this.LT(1);
				this.match(199);
				if (this.inputState.guessing == 0)
				{
					unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
					TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token2);
					unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
					goto IL_D3;
				}
				goto IL_D3;
			}
			default:
				switch (num)
				{
				case 221:
				case 222:
					goto IL_D3;
				}
				break;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_D3:
			Literal literal = this.integerOrNumeric();
			if (this.inputState.guessing == 0)
			{
				if (unaryExpression != null)
				{
					unaryExpression.Expression = literal;
					result = unaryExpression;
				}
				else
				{
					result = literal;
				}
			}
			return result;
		}

		// Token: 0x06001708 RID: 5896 RVA: 0x000A2C00 File Offset: 0x000A0E00
		public TableSampleClause tableSampleClause()
		{
			TableSampleClause tableSampleClause = base.FragmentFactory.CreateFragment<TableSampleClause>();
			IToken token = this.LT(1);
			this.match(179);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tableSampleClause, token);
			}
			int num = this.LA(1);
			if (num != 191)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "SYSTEM");
					tableSampleClause.System = true;
				}
			}
			this.match(191);
			ScalarExpression scalarExpression = this.expression();
			if (this.inputState.guessing == 0)
			{
				tableSampleClause.SampleNumber = scalarExpression;
			}
			int num2 = this.LA(1);
			if (num2 != 116)
			{
				if (num2 != 192)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token3 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "ROWS");
						tableSampleClause.TableSampleClauseOption = TableSampleClauseOption.Rows;
					}
				}
			}
			else
			{
				this.match(116);
				if (this.inputState.guessing == 0)
				{
					tableSampleClause.TableSampleClauseOption = TableSampleClauseOption.Percent;
				}
			}
			IToken token4 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tableSampleClause, token4);
			}
			if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("REPEATABLE"))
			{
				this.LT(1);
				this.match(232);
				this.match(191);
				scalarExpression = this.expression();
				if (this.inputState.guessing == 0)
				{
					tableSampleClause.RepeatSeed = scalarExpression;
				}
				IToken token5 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(tableSampleClause, token5);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_93_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return tableSampleClause;
		}

		// Token: 0x06001709 RID: 5897 RVA: 0x000A2E54 File Offset: 0x000A1054
		public FromClause fromClause()
		{
			FromClause fromClause = base.FragmentFactory.CreateFragment<FromClause>();
			IToken token = this.LT(1);
			this.match(71);
			TableReference item = this.selectTableReferenceWithOdbc();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fromClause, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableReference>(fromClause, fromClause.TableReferences, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.selectTableReferenceWithOdbc();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableReference>(fromClause, fromClause.TableReferences, item);
				}
			}
			return fromClause;
		}

		// Token: 0x0600170A RID: 5898 RVA: 0x000A2EE4 File Offset: 0x000A10E4
		public TableReference selectTableReferenceWithOdbc()
		{
			int num = this.LA(1);
			if (num > 110)
			{
				if (num <= 200)
				{
					switch (num)
					{
					case 191:
						goto IL_84;
					case 192:
						goto IL_96;
					case 193:
						break;
					default:
						if (num != 200)
						{
							goto IL_96;
						}
						goto IL_84;
					}
				}
				else
				{
					if (num == 203)
					{
						goto IL_84;
					}
					switch (num)
					{
					case 232:
					case 233:
					case 234:
						goto IL_84;
					case 235:
						break;
					default:
						goto IL_96;
					}
				}
				return this.odbcQualifiedJoin();
			}
			if (num != 32 && num != 70)
			{
				switch (num)
				{
				case 107:
				case 108:
				case 109:
				case 110:
					break;
				default:
					goto IL_96;
				}
			}
			IL_84:
			return this.selectTableReference();
			IL_96:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600170B RID: 5899 RVA: 0x000A2F9C File Offset: 0x000A119C
		public TableReference selectTableReference()
		{
			TableReference result = null;
			result = this.selectTableReferenceElement();
			while (TSql90ParserInternal.tokenSet_94_.member(this.LA(1)))
			{
				this.selectTableReferenceAdditionalElement(ref result);
			}
			return result;
		}

		// Token: 0x0600170C RID: 5900 RVA: 0x000A2FD0 File Offset: 0x000A11D0
		public OdbcQualifiedJoinTableReference odbcQualifiedJoin()
		{
			OdbcQualifiedJoinTableReference odbcQualifiedJoinTableReference = base.FragmentFactory.CreateFragment<OdbcQualifiedJoinTableReference>();
			IToken token = null;
			int num = this.LA(1);
			if (num != 193)
			{
				if (num != 235)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.odbcInitiator();
			}
			else
			{
				token = this.LT(1);
				this.match(193);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(odbcQualifiedJoinTableReference, token);
				}
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "OJ");
			}
			int num2 = this.LA(1);
			TableReference tableReference;
			if (num2 > 110)
			{
				if (num2 <= 200)
				{
					switch (num2)
					{
					case 191:
						goto IL_13A;
					case 192:
						goto IL_170;
					case 193:
						break;
					default:
						if (num2 != 200)
						{
							goto IL_170;
						}
						goto IL_13A;
					}
				}
				else
				{
					if (num2 == 203)
					{
						goto IL_13A;
					}
					switch (num2)
					{
					case 232:
					case 233:
					case 234:
						goto IL_13A;
					case 235:
						break;
					default:
						goto IL_170;
					}
				}
				tableReference = this.odbcQualifiedJoin();
				goto IL_183;
			}
			if (num2 != 32 && num2 != 70)
			{
				switch (num2)
				{
				case 107:
				case 108:
				case 109:
				case 110:
					break;
				default:
					goto IL_170;
				}
			}
			IL_13A:
			tableReference = this.selectTableReference();
			if (this.inputState.guessing == 0 && !(tableReference is QualifiedJoin))
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46035", token, TSqlParserResource.SQL46035Message, new string[0]);
				goto IL_183;
			}
			goto IL_183;
			IL_170:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_183:
			if (this.inputState.guessing == 0)
			{
				odbcQualifiedJoinTableReference.TableReference = tableReference;
			}
			IToken token3 = this.LT(1);
			this.match(194);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcQualifiedJoinTableReference, token3);
			}
			return odbcQualifiedJoinTableReference;
		}

		// Token: 0x0600170D RID: 5901 RVA: 0x000A31A0 File Offset: 0x000A13A0
		public TableReference selectTableReferenceElement()
		{
			bool flag = false;
			if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_95_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.joinParenthesis();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			TableReference result;
			if (flag)
			{
				result = this.joinParenthesis();
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_95_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_96_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.selectTableReferenceElementWithOutJoinParenthesis();
			}
			return result;
		}

		// Token: 0x0600170E RID: 5902 RVA: 0x000A3278 File Offset: 0x000A1478
		public void selectTableReferenceAdditionalElement(ref TableReference vResult)
		{
			int num = this.LA(1);
			if (num <= 90)
			{
				if (num <= 72)
				{
					if (num != 36 && num != 72)
					{
						goto IL_71;
					}
				}
				else if (num != 85 && num != 90)
				{
					goto IL_71;
				}
			}
			else if (num <= 114)
			{
				if (num != 93 && num != 114)
				{
					goto IL_71;
				}
			}
			else if (num != 133)
			{
				switch (num)
				{
				case 177:
					this.pivotedTableReference(ref vResult);
					return;
				case 178:
					this.unpivotedTableReference(ref vResult);
					return;
				default:
					goto IL_71;
				}
			}
			this.joinElement(ref vResult);
			return;
			IL_71:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600170F RID: 5903 RVA: 0x000A3308 File Offset: 0x000A1508
		public void odbcInitiator()
		{
			IToken token = this.LT(1);
			this.match(235);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ThrowParseErrorException("SQL46036", token, TSqlParserResource.SQL46036Message, new string[0]);
			}
		}

		// Token: 0x06001710 RID: 5904 RVA: 0x000A3350 File Offset: 0x000A1550
		public OdbcConvertSpecification odbcConvertSpecification()
		{
			OdbcConvertSpecification odbcConvertSpecification = base.FragmentFactory.CreateFragment<OdbcConvertSpecification>();
			Identifier identifier = this.nonQuotedIdentifier();
			if (this.inputState.guessing == 0)
			{
				odbcConvertSpecification.Identifier = identifier;
			}
			return odbcConvertSpecification;
		}

		// Token: 0x06001711 RID: 5905 RVA: 0x000A3388 File Offset: 0x000A1588
		public ExtractFromExpression extractFromExpression()
		{
			ExtractFromExpression extractFromExpression = base.FragmentFactory.CreateFragment<ExtractFromExpression>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			Identifier extractedElement = this.identifier();
			this.match(71);
			ScalarExpression expression = this.expression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "EXTRACT");
				extractFromExpression.Expression = expression;
				extractFromExpression.ExtractedElement = extractedElement;
			}
			this.match(192);
			return extractFromExpression;
		}

		// Token: 0x06001712 RID: 5906 RVA: 0x000A340C File Offset: 0x000A160C
		public OdbcFunctionCall odbcFunctionCall()
		{
			OdbcFunctionCall odbcFunctionCall = base.FragmentFactory.CreateFragment<OdbcFunctionCall>();
			Identifier identifier = base.FragmentFactory.CreateFragment<Identifier>();
			odbcFunctionCall.ParametersUsed = true;
			IToken token = this.LT(1);
			this.match(193);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcFunctionCall, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "FN");
			}
			if (this.inputState.guessing == 0 && this.LA(1) != 1)
			{
				identifier.SetUnquotedIdentifier(this.LT(1).getText());
				odbcFunctionCall.Name = identifier;
			}
			int num = this.LA(1);
			if (num <= 86)
			{
				switch (num)
				{
				case 34:
				{
					this.match(34);
					this.match(191);
					ScalarExpression item = this.expression();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, item);
					}
					this.match(198);
					item = this.odbcConvertSpecification();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, item);
					}
					this.match(192);
					goto IL_7A3;
				}
				case 35:
				case 36:
				case 37:
					goto IL_55A;
				case 38:
					break;
				case 39:
				case 40:
				{
					switch (this.LA(1))
					{
					case 39:
						this.match(39);
						break;
					case 40:
						this.match(40);
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					int num2 = this.LA(1);
					if (num2 == 191)
					{
						this.match(191);
						int num3 = this.LA(1);
						if (num3 <= 101)
						{
							if (num3 <= 34)
							{
								if (num3 != 20 && num3 != 25 && num3 != 34)
								{
									goto IL_508;
								}
							}
							else if (num3 <= 81)
							{
								switch (num3)
								{
								case 40:
								case 41:
									break;
								default:
									if (num3 != 81)
									{
										goto IL_508;
									}
									break;
								}
							}
							else if (num3 != 93)
							{
								switch (num3)
								{
								case 100:
								case 101:
									break;
								default:
									goto IL_508;
								}
							}
						}
						else if (num3 <= 141)
						{
							if (num3 != 133 && num3 != 136 && num3 != 141)
							{
								goto IL_508;
							}
						}
						else if (num3 <= 163)
						{
							if (num3 != 147 && num3 != 163)
							{
								goto IL_508;
							}
						}
						else
						{
							switch (num3)
							{
							case 191:
							case 193:
							case 197:
							case 199:
							case 200:
								break;
							case 192:
								goto IL_51B;
							case 194:
							case 195:
							case 196:
							case 198:
								goto IL_508;
							default:
								switch (num3)
								{
								case 211:
								case 221:
								case 222:
								case 223:
								case 224:
								case 225:
								case 227:
								case 228:
								case 230:
								case 231:
								case 232:
								case 233:
								case 234:
								case 235:
									break;
								case 212:
								case 213:
								case 214:
								case 215:
								case 216:
								case 217:
								case 218:
								case 219:
								case 220:
								case 226:
								case 229:
									goto IL_508;
								default:
									goto IL_508;
								}
								break;
							}
						}
						this.expressionList(odbcFunctionCall, odbcFunctionCall.Parameters);
						goto IL_51B;
						IL_508:
						throw new NoViableAltException(this.LT(1), this.getFilename());
						IL_51B:
						this.match(192);
						goto IL_7A3;
					}
					if (num2 != 194)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (this.inputState.guessing == 0)
					{
						odbcFunctionCall.ParametersUsed = false;
						goto IL_7A3;
					}
					goto IL_7A3;
				}
				default:
					if (num != 43)
					{
						if (num != 86)
						{
							goto IL_55A;
						}
						goto IL_290;
					}
					break;
				}
			}
			else if (num <= 133)
			{
				if (num != 93 && num != 133)
				{
					goto IL_55A;
				}
				goto IL_290;
			}
			else
			{
				if (num == 156)
				{
					this.match(156);
					this.match(191);
					ScalarExpression item = this.expression();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, item);
					}
					this.match(198);
					item = this.expression();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, item);
					}
					this.match(192);
					goto IL_7A3;
				}
				if (num != 163)
				{
					goto IL_55A;
				}
			}
			int num4 = this.LA(1);
			if (num4 != 38)
			{
				if (num4 != 43)
				{
					if (num4 != 163)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(163);
				}
				else
				{
					this.match(43);
				}
			}
			else
			{
				this.match(38);
			}
			this.match(191);
			this.match(192);
			goto IL_7A3;
			IL_290:
			int num5 = this.LA(1);
			if (num5 != 86)
			{
				if (num5 != 93)
				{
					if (num5 != 133)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(133);
				}
				else
				{
					this.match(93);
				}
			}
			else
			{
				this.match(86);
			}
			this.match(191);
			this.expressionList(odbcFunctionCall, odbcFunctionCall.Parameters);
			this.match(192);
			goto IL_7A3;
			IL_55A:
			if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("EXTRACT"))
			{
				ScalarExpression item = this.extractFromExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(odbcFunctionCall, odbcFunctionCall.Parameters, item);
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(232);
				this.match(191);
				int num6 = this.LA(1);
				if (num6 <= 101)
				{
					if (num6 <= 34)
					{
						if (num6 != 20 && num6 != 25 && num6 != 34)
						{
							goto IL_770;
						}
					}
					else if (num6 <= 81)
					{
						switch (num6)
						{
						case 40:
						case 41:
							break;
						default:
							if (num6 != 81)
							{
								goto IL_770;
							}
							break;
						}
					}
					else if (num6 != 93)
					{
						switch (num6)
						{
						case 100:
						case 101:
							break;
						default:
							goto IL_770;
						}
					}
				}
				else if (num6 <= 141)
				{
					if (num6 != 133 && num6 != 136 && num6 != 141)
					{
						goto IL_770;
					}
				}
				else if (num6 <= 163)
				{
					if (num6 != 147 && num6 != 163)
					{
						goto IL_770;
					}
				}
				else
				{
					switch (num6)
					{
					case 191:
					case 193:
					case 197:
					case 199:
					case 200:
						break;
					case 192:
						goto IL_783;
					case 194:
					case 195:
					case 196:
					case 198:
						goto IL_770;
					default:
						switch (num6)
						{
						case 211:
						case 221:
						case 222:
						case 223:
						case 224:
						case 225:
						case 227:
						case 228:
						case 230:
						case 231:
						case 232:
						case 233:
						case 234:
						case 235:
							break;
						case 212:
						case 213:
						case 214:
						case 215:
						case 216:
						case 217:
						case 218:
						case 219:
						case 220:
						case 226:
						case 229:
							goto IL_770;
						default:
							goto IL_770;
						}
						break;
					}
				}
				this.expressionList(odbcFunctionCall, odbcFunctionCall.Parameters);
				goto IL_783;
				IL_770:
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_783:
				this.match(192);
			}
			IL_7A3:
			IToken token3 = this.LT(1);
			this.match(194);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcFunctionCall, token3);
			}
			return odbcFunctionCall;
		}

		// Token: 0x06001713 RID: 5907 RVA: 0x000A3BE4 File Offset: 0x000A1DE4
		public TableReference joinTableReference()
		{
			TableReference result = null;
			IToken marker = null;
			bool flag = false;
			if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_95_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					if (!base.SkipGuessing(marker))
					{
						result = this.joinParenthesis();
					}
					base.SaveGuessing(out marker);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				if (!base.SkipGuessing(marker))
				{
					result = this.joinParenthesis();
				}
				while (TSql90ParserInternal.tokenSet_97_.member(this.LA(1)))
				{
					this.joinElement(ref result);
				}
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_95_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_98_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.selectTableReferenceElementWithOutJoinParenthesis();
				int num = 0;
				while (TSql90ParserInternal.tokenSet_97_.member(this.LA(1)))
				{
					this.joinElement(ref result);
					num++;
				}
				if (num < 1)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return result;
		}

		// Token: 0x06001714 RID: 5908 RVA: 0x000A3D34 File Offset: 0x000A1F34
		public JoinParenthesisTableReference joinParenthesis()
		{
			JoinParenthesisTableReference joinParenthesisTableReference = base.FragmentFactory.CreateFragment<JoinParenthesisTableReference>();
			IToken token = this.LT(1);
			this.match(191);
			TableReference join = this.joinTableReference();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(joinParenthesisTableReference, token);
				joinParenthesisTableReference.Join = join;
				TSql80ParserBaseInternal.UpdateTokenInfo(joinParenthesisTableReference, token2);
			}
			return joinParenthesisTableReference;
		}

		// Token: 0x06001715 RID: 5909 RVA: 0x000A3DA4 File Offset: 0x000A1FA4
		public void joinElement(ref TableReference vResult)
		{
			int num = this.LA(1);
			if (num <= 85)
			{
				if (num != 36)
				{
					if (num != 72 && num != 85)
					{
						goto IL_4E;
					}
					goto IL_46;
				}
			}
			else if (num <= 93)
			{
				if (num != 90 && num != 93)
				{
					goto IL_4E;
				}
				goto IL_46;
			}
			else if (num != 114)
			{
				if (num != 133)
				{
					goto IL_4E;
				}
				goto IL_46;
			}
			this.unqualifiedJoin(ref vResult);
			return;
			IL_46:
			this.qualifiedJoin(ref vResult);
			return;
			IL_4E:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001716 RID: 5910 RVA: 0x000A3E14 File Offset: 0x000A2014
		public TableReference selectTableReferenceElementWithOutJoinParenthesis()
		{
			int num = this.LA(1);
			if (num > 110)
			{
				if (num <= 200)
				{
					if (num == 191)
					{
						return this.derivedTable();
					}
					if (num != 200)
					{
						goto IL_AB;
					}
				}
				else
				{
					if (num == 203)
					{
						return this.builtInFunctionTableReference();
					}
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_AB;
					}
				}
				return this.schemaObjectOrFunctionTableReference();
			}
			if (num == 32 || num == 70)
			{
				return this.fulltextTableReference();
			}
			switch (num)
			{
			case 107:
			case 108:
			case 109:
				return this.openRowset();
			case 110:
				return this.openXmlTableReference();
			}
			IL_AB:
			TableReference result;
			if (this.LA(1) == 234 && TSql90ParserInternal.tokenSet_99_.member(this.LA(2)))
			{
				result = this.variableTableReference();
			}
			else
			{
				if (this.LA(1) != 234 || this.LA(2) != 200)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.variableMethodCallTableReference();
			}
			return result;
		}

		// Token: 0x06001717 RID: 5911 RVA: 0x000A3F30 File Offset: 0x000A2130
		public void pivotedTableReference(ref TableReference vResult)
		{
			PivotedTableReference pivotedTableReference = base.FragmentFactory.CreateFragment<PivotedTableReference>();
			pivotedTableReference.TableReference = vResult;
			vResult = pivotedTableReference;
			this.match(177);
			this.match(191);
			MultiPartIdentifier aggregateFunctionIdentifier = this.multiPartIdentifier(4);
			if (this.inputState.guessing == 0)
			{
				pivotedTableReference.AggregateFunctionIdentifier = aggregateFunctionIdentifier;
			}
			this.match(191);
			ColumnReferenceExpression columnReferenceExpression = this.fixedColumn();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(pivotedTableReference, pivotedTableReference.ValueColumns, columnReferenceExpression);
			}
			this.match(192);
			this.match(67);
			columnReferenceExpression = this.fixedColumn();
			if (this.inputState.guessing == 0)
			{
				pivotedTableReference.PivotColumn = columnReferenceExpression;
			}
			this.match(83);
			this.columnNameList(pivotedTableReference, pivotedTableReference.InColumns);
			this.match(192);
			this.simpleTableReferenceAlias(pivotedTableReference);
		}

		// Token: 0x06001718 RID: 5912 RVA: 0x000A4008 File Offset: 0x000A2208
		public void unpivotedTableReference(ref TableReference vResult)
		{
			UnpivotedTableReference unpivotedTableReference = base.FragmentFactory.CreateFragment<UnpivotedTableReference>();
			unpivotedTableReference.TableReference = vResult;
			vResult = unpivotedTableReference;
			this.match(178);
			this.match(191);
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				unpivotedTableReference.ValueColumn = identifier;
			}
			this.match(67);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				unpivotedTableReference.PivotColumn = identifier;
			}
			this.match(83);
			this.columnListWithParenthesis(unpivotedTableReference, unpivotedTableReference.InColumns);
			this.match(192);
			this.simpleTableReferenceAlias(unpivotedTableReference);
		}

		// Token: 0x06001719 RID: 5913 RVA: 0x000A40A8 File Offset: 0x000A22A8
		public ColumnReferenceExpression fixedColumn()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			columnReferenceExpression.ColumnType = ColumnType.Regular;
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(4);
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
			}
			return columnReferenceExpression;
		}

		// Token: 0x0600171A RID: 5914 RVA: 0x000A40EC File Offset: 0x000A22EC
		public void columnListWithParenthesis(TSqlFragment vParent, IList<ColumnReferenceExpression> columns)
		{
			this.match(191);
			ColumnReferenceExpression item = this.fixedColumn();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, columns, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.fixedColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, columns, item);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x0600171B RID: 5915 RVA: 0x000A4180 File Offset: 0x000A2380
		public void unqualifiedJoin(ref TableReference vResult)
		{
			UnqualifiedJoin unqualifiedJoin = base.FragmentFactory.CreateFragment<UnqualifiedJoin>();
			int num = this.LA(1);
			if (num != 36)
			{
				if (num != 114)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(114);
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "APPLY");
					unqualifiedJoin.UnqualifiedJoinType = UnqualifiedJoinType.OuterApply;
				}
			}
			else
			{
				this.match(36);
				int num2 = this.LA(1);
				if (num2 != 90)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token2, "APPLY");
						unqualifiedJoin.UnqualifiedJoinType = UnqualifiedJoinType.CrossApply;
					}
				}
				else
				{
					this.match(90);
					if (this.inputState.guessing == 0)
					{
						unqualifiedJoin.UnqualifiedJoinType = UnqualifiedJoinType.CrossJoin;
					}
				}
			}
			TableReference secondTableReference = this.selectTableReferenceElement();
			if (this.inputState.guessing == 0)
			{
				unqualifiedJoin.FirstTableReference = vResult;
				unqualifiedJoin.SecondTableReference = secondTableReference;
				vResult = unqualifiedJoin;
			}
		}

		// Token: 0x0600171C RID: 5916 RVA: 0x000A42BC File Offset: 0x000A24BC
		public void qualifiedJoin(ref TableReference vResult)
		{
			QualifiedJoin qualifiedJoin = base.FragmentFactory.CreateFragment<QualifiedJoin>();
			int num = this.LA(1);
			if (num <= 85)
			{
				if (num != 72 && num != 85)
				{
					goto IL_22C;
				}
			}
			else if (num != 90)
			{
				if (num != 93 && num != 133)
				{
					goto IL_22C;
				}
			}
			else
			{
				this.match(90);
				if (this.inputState.guessing == 0)
				{
					qualifiedJoin.QualifiedJoinType = QualifiedJoinType.Inner;
					goto IL_23F;
				}
				goto IL_23F;
			}
			int num2 = this.LA(1);
			if (num2 <= 85)
			{
				if (num2 != 72)
				{
					if (num2 == 85)
					{
						this.match(85);
						if (this.inputState.guessing == 0)
						{
							qualifiedJoin.QualifiedJoinType = QualifiedJoinType.Inner;
							goto IL_1EE;
						}
						goto IL_1EE;
					}
				}
				else
				{
					this.match(72);
					int num3 = this.LA(1);
					if (num3 != 90)
					{
						if (num3 != 114)
						{
							if (num3 != 232)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(114);
						}
					}
					if (this.inputState.guessing == 0)
					{
						qualifiedJoin.QualifiedJoinType = QualifiedJoinType.FullOuter;
						goto IL_1EE;
					}
					goto IL_1EE;
				}
			}
			else if (num2 != 93)
			{
				if (num2 == 133)
				{
					this.match(133);
					int num4 = this.LA(1);
					if (num4 != 90)
					{
						if (num4 != 114)
						{
							if (num4 != 232)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
						}
						else
						{
							this.match(114);
						}
					}
					if (this.inputState.guessing == 0)
					{
						qualifiedJoin.QualifiedJoinType = QualifiedJoinType.RightOuter;
						goto IL_1EE;
					}
					goto IL_1EE;
				}
			}
			else
			{
				this.match(93);
				int num5 = this.LA(1);
				if (num5 != 90)
				{
					if (num5 != 114)
					{
						if (num5 != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(114);
					}
				}
				if (this.inputState.guessing == 0)
				{
					qualifiedJoin.QualifiedJoinType = QualifiedJoinType.LeftOuter;
					goto IL_1EE;
				}
				goto IL_1EE;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_1EE:
			int num6 = this.LA(1);
			if (num6 != 90)
			{
				if (num6 != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.joinHint(qualifiedJoin);
			}
			this.match(90);
			goto IL_23F;
			IL_22C:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_23F:
			TableReference secondTableReference = this.selectTableReferenceWithOdbc();
			if (this.inputState.guessing == 0)
			{
				qualifiedJoin.FirstTableReference = vResult;
				qualifiedJoin.SecondTableReference = secondTableReference;
			}
			this.match(105);
			BooleanExpression searchCondition = this.booleanExpression();
			if (this.inputState.guessing == 0)
			{
				qualifiedJoin.SearchCondition = searchCondition;
				vResult = qualifiedJoin;
			}
		}

		// Token: 0x0600171D RID: 5917 RVA: 0x000A4554 File Offset: 0x000A2754
		public TableReference schemaObjectOrFunctionTableReference()
		{
			SchemaObjectName vSchemaObjectName = this.schemaObjectFourPartName();
			TableReference result;
			if (TSql90ParserInternal.tokenSet_100_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_74_.member(this.LA(2)) && base.IsTableReference(false))
			{
				result = this.schemaObjectTableReference(vSchemaObjectName);
			}
			else
			{
				if (this.LA(1) != 191 || !TSql90ParserInternal.tokenSet_101_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.schemaObjectFunctionTableReference(vSchemaObjectName);
			}
			return result;
		}

		// Token: 0x0600171E RID: 5918 RVA: 0x000A45E0 File Offset: 0x000A27E0
		public BuiltInFunctionTableReference builtInFunctionTableReference()
		{
			BuiltInFunctionTableReference builtInFunctionTableReference = base.FragmentFactory.CreateFragment<BuiltInFunctionTableReference>();
			IToken token = this.LT(1);
			this.match(203);
			Identifier name = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(builtInFunctionTableReference, token);
				builtInFunctionTableReference.Name = name;
			}
			this.match(191);
			int num = this.LA(1);
			if (num <= 93)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_243;
					}
				}
				else if (num <= 47)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 47)
						{
							goto IL_243;
						}
						break;
					}
				}
				else if (num != 81 && num != 93)
				{
					goto IL_243;
				}
			}
			else if (num <= 141)
			{
				if (num <= 133)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						if (num != 133)
						{
							goto IL_243;
						}
						break;
					}
				}
				else if (num != 136 && num != 141)
				{
					goto IL_243;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_243;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 192:
					goto IL_256;
				case 194:
				case 195:
				case 196:
				case 198:
					goto IL_243;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_243;
					default:
						goto IL_243;
					}
					break;
				}
			}
			ScalarExpression item = this.expressionWithDefault();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(builtInFunctionTableReference, builtInFunctionTableReference.Parameters, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.expressionWithDefault();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(builtInFunctionTableReference, builtInFunctionTableReference.Parameters, item);
				}
			}
			goto IL_256;
			IL_243:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_256:
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(builtInFunctionTableReference, token2);
			}
			this.simpleTableReferenceAliasOpt(builtInFunctionTableReference);
			return builtInFunctionTableReference;
		}

		// Token: 0x0600171F RID: 5919 RVA: 0x000A4874 File Offset: 0x000A2A74
		public VariableTableReference variableTableReference()
		{
			VariableTableReference variableTableReference = base.FragmentFactory.CreateFragment<VariableTableReference>();
			VariableReference variable = this.variable();
			if (this.inputState.guessing == 0)
			{
				variableTableReference.Variable = variable;
			}
			this.simpleTableReferenceAliasOpt(variableTableReference);
			return variableTableReference;
		}

		// Token: 0x06001720 RID: 5920 RVA: 0x000A48B0 File Offset: 0x000A2AB0
		public VariableMethodCallTableReference variableMethodCallTableReference()
		{
			VariableMethodCallTableReference variableMethodCallTableReference = base.FragmentFactory.CreateFragment<VariableMethodCallTableReference>();
			VariableReference variable = this.variable();
			if (this.inputState.guessing == 0)
			{
				variableMethodCallTableReference.Variable = variable;
			}
			this.match(200);
			Identifier methodName = this.identifier();
			if (this.inputState.guessing == 0)
			{
				variableMethodCallTableReference.MethodName = methodName;
			}
			this.parenthesizedOptExpressionWithDefaultList(variableMethodCallTableReference, variableMethodCallTableReference.Parameters);
			this.simpleTableReferenceAlias(variableMethodCallTableReference);
			this.columnNameList(variableMethodCallTableReference, variableMethodCallTableReference.Columns);
			return variableMethodCallTableReference;
		}

		// Token: 0x06001721 RID: 5921 RVA: 0x000A492C File Offset: 0x000A2B2C
		public TableReferenceWithAlias openRowset()
		{
			TableReferenceWithAlias tableReferenceWithAlias;
			switch (this.LA(1))
			{
			case 107:
				tableReferenceWithAlias = this.adhocRowset();
				this.simpleTableReferenceAliasOpt(tableReferenceWithAlias);
				break;
			case 108:
				tableReferenceWithAlias = this.openQueryRowset();
				this.simpleTableReferenceAliasOpt(tableReferenceWithAlias);
				break;
			case 109:
				tableReferenceWithAlias = this.openRowsetRowset();
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return tableReferenceWithAlias;
		}

		// Token: 0x06001722 RID: 5922 RVA: 0x000A4998 File Offset: 0x000A2B98
		public FullTextTableReference fulltextTableReference()
		{
			FullTextTableReference fullTextTableReference = base.FragmentFactory.CreateFragment<FullTextTableReference>();
			this.fullTextTable(fullTextTableReference);
			this.match(191);
			SchemaObjectName tableName = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				fullTextTableReference.TableName = tableName;
			}
			this.match(198);
			this.fulltextTableColumnList(fullTextTableReference);
			this.match(198);
			ValueExpression searchCondition = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				fullTextTableReference.SearchCondition = searchCondition;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.fulltextTableOptions(fullTextTableReference);
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fullTextTableReference, token);
			}
			this.simpleTableReferenceAliasOpt(fullTextTableReference);
			return fullTextTableReference;
		}

		// Token: 0x06001723 RID: 5923 RVA: 0x000A4A80 File Offset: 0x000A2C80
		public OpenXmlTableReference openXmlTableReference()
		{
			IToken token = this.LT(1);
			this.match(110);
			this.match(191);
			OpenXmlTableReference openXmlTableReference = this.openXmlParams();
			IToken token2 = this.LT(1);
			this.match(192);
			this.openXmlWithClauseOpt(openXmlTableReference);
			this.simpleTableReferenceAliasOpt(openXmlTableReference);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(openXmlTableReference, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(openXmlTableReference, token2);
			}
			return openXmlTableReference;
		}

		// Token: 0x06001724 RID: 5924 RVA: 0x000A4AF0 File Offset: 0x000A2CF0
		public void joinHint(QualifiedJoin vParent)
		{
			IToken token = this.LT(1);
			this.match(232);
			int num = this.LA(1);
			if (num != 90)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOCAL");
					vParent.JoinHint = JoinHintHelper.Instance.ParseOption(token2);
					if (vParent.JoinHint == JoinHint.Remote)
					{
						TSql80ParserBaseInternal.ThrowIncorrectSyntaxErrorException(token2);
						return;
					}
				}
			}
			else if (this.inputState.guessing == 0)
			{
				vParent.JoinHint = JoinHintHelper.Instance.ParseOption(token);
				return;
			}
		}

		// Token: 0x06001725 RID: 5925 RVA: 0x000A4BA8 File Offset: 0x000A2DA8
		public ScalarExpression expressionWithDefault()
		{
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num != 20 && num != 25)
						{
							goto IL_198;
						}
					}
					else if (num != 34)
					{
						switch (num)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_198;
						}
					}
				}
				else if (num <= 81)
				{
					if (num == 47)
					{
						return this.defaultLiteral();
					}
					if (num != 81)
					{
						goto IL_198;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_198;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_198;
					}
				}
				else if (num != 141 && num != 147)
				{
					goto IL_198;
				}
			}
			else if (num <= 193)
			{
				if (num != 163)
				{
					switch (num)
					{
					case 191:
					case 193:
						break;
					case 192:
						goto IL_198;
					default:
						goto IL_198;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_198;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_198;
					default:
						goto IL_198;
					}
					break;
				}
			}
			return this.expression();
			IL_198:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001726 RID: 5926 RVA: 0x000A4D64 File Offset: 0x000A2F64
		public void simpleTableReferenceAliasOpt(TableReferenceWithAlias vParent)
		{
			if ((this.LA(1) == 9 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_102_.member(this.LA(2)))
			{
				this.simpleTableReferenceAlias(vParent);
				return;
			}
			if (TSql90ParserInternal.tokenSet_103_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001727 RID: 5927 RVA: 0x000A4DEC File Offset: 0x000A2FEC
		public RaiseErrorStatement raiseErrorStatement()
		{
			RaiseErrorStatement raiseErrorStatement = base.FragmentFactory.CreateFragment<RaiseErrorStatement>();
			IToken token = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token);
			}
			ScalarExpression scalarExpression = this.signedIntegerOrStringOrVariable();
			if (this.inputState.guessing == 0)
			{
				raiseErrorStatement.FirstParameter = scalarExpression;
			}
			this.match(198);
			scalarExpression = this.signedIntegerOrVariable();
			if (this.inputState.guessing == 0)
			{
				raiseErrorStatement.SecondParameter = scalarExpression;
			}
			this.match(198);
			scalarExpression = this.signedIntegerOrVariable();
			if (this.inputState.guessing == 0)
			{
				raiseErrorStatement.ThirdParameter = scalarExpression;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				scalarExpression = this.possibleNegativeConstant();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(raiseErrorStatement, raiseErrorStatement.OptionalParameters, scalarExpression);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token2);
			}
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token3 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token3);
					raiseErrorStatement.RaiseErrorOptions |= RaiseErrorOptionsHelper.Instance.ParseOption(token3);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					IToken token4 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(raiseErrorStatement, token4);
						raiseErrorStatement.RaiseErrorOptions |= RaiseErrorOptionsHelper.Instance.ParseOption(token4);
					}
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return raiseErrorStatement;
		}

		// Token: 0x06001728 RID: 5928 RVA: 0x000A5010 File Offset: 0x000A3210
		public RaiseErrorLegacyStatement raiseErrorLegacyStatement()
		{
			RaiseErrorLegacyStatement raiseErrorLegacyStatement = base.FragmentFactory.CreateFragment<RaiseErrorLegacyStatement>();
			ScalarExpression firstParameter = this.signedIntegerOrVariable();
			if (this.inputState.guessing == 0)
			{
				raiseErrorLegacyStatement.FirstParameter = firstParameter;
			}
			ValueExpression secondParameter = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				raiseErrorLegacyStatement.SecondParameter = secondParameter;
			}
			return raiseErrorLegacyStatement;
		}

		// Token: 0x06001729 RID: 5929 RVA: 0x000A5060 File Offset: 0x000A3260
		public ScalarExpression signedIntegerOrStringOrVariable()
		{
			int num = this.LA(1);
			if (num != 199 && num != 221)
			{
				switch (num)
				{
				case 230:
				case 231:
				case 234:
					return this.stringOrVariable();
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return this.signedInteger();
		}

		// Token: 0x0600172A RID: 5930 RVA: 0x000A50D0 File Offset: 0x000A32D0
		public ScalarExpression possibleNegativeConstant()
		{
			int num = this.LA(1);
			if (num <= 193)
			{
				if (num != 100 && num != 193)
				{
					goto IL_7F;
				}
			}
			else
			{
				if (num == 199)
				{
					return this.negativeConstant();
				}
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
				case 232:
				case 233:
					goto IL_7F;
				default:
					goto IL_7F;
				}
			}
			return this.literal();
			IL_7F:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600172B RID: 5931 RVA: 0x000A5170 File Offset: 0x000A3370
		public void outputIntoOutputClause(DataModificationSpecification vParent)
		{
			List<SelectElement> list = new List<SelectElement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "OUTPUT");
			}
			SelectElement item = this.outputClauseSelectElement();
			if (this.inputState.guessing == 0)
			{
				list.Add(item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.outputClauseSelectElement();
				if (this.inputState.guessing == 0)
				{
					list.Add(item);
				}
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 28)
				{
					if (num <= 6)
					{
						if (num != 1)
						{
							switch (num)
							{
							case 4:
							case 6:
								break;
							case 5:
								goto IL_419;
							default:
								goto IL_419;
							}
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							break;
						case 14:
						case 16:
							goto IL_419;
						default:
							switch (num)
							{
							case 22:
							case 23:
								break;
							default:
								if (num != 28)
								{
									goto IL_419;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 33:
					case 35:
						break;
					case 34:
						goto IL_419;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 47:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							break;
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							goto IL_419;
						default:
							switch (num)
							{
							case 71:
							case 74:
							case 75:
								break;
							case 72:
							case 73:
								goto IL_419;
							default:
								goto IL_419;
							}
							break;
						}
						break;
					}
				}
				else if (num != 82)
				{
					switch (num)
					{
					case 86:
						break;
					case 87:
						goto IL_419;
					case 88:
					{
						OutputIntoClause outputIntoClause = this.outputIntoClause(token, list);
						if (this.inputState.guessing == 0)
						{
							vParent.OutputIntoClause = outputIntoClause;
						}
						if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_88_.member(this.LA(2)) && base.NextTokenMatches("OUTPUT"))
						{
							OutputClause outputClause = this.outputClause();
							if (this.inputState.guessing == 0)
							{
								vParent.OutputClause = outputClause;
								return;
							}
							return;
						}
						else
						{
							if (TSql90ParserInternal.tokenSet_104_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_92_.member(this.LA(2)))
							{
								return;
							}
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						break;
					}
					default:
						if (num != 92)
						{
							goto IL_419;
						}
						break;
					}
				}
			}
			else if (num <= 144)
			{
				if (num <= 106)
				{
					if (num != 95 && num != 106)
					{
						goto IL_419;
					}
				}
				else if (num != 111 && num != 119)
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						break;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						goto IL_419;
					default:
						goto IL_419;
					}
				}
			}
			else if (num <= 191)
			{
				switch (num)
				{
				case 156:
				case 160:
				case 161:
				case 162:
				case 164:
				case 167:
				case 169:
				case 170:
				case 171:
				case 172:
				case 176:
					break;
				case 157:
				case 158:
				case 159:
				case 163:
				case 165:
				case 166:
				case 168:
				case 173:
				case 174:
				case 175:
					goto IL_419;
				default:
					switch (num)
					{
					case 180:
					case 181:
						break;
					default:
						if (num != 191)
						{
							goto IL_419;
						}
						break;
					}
					break;
				}
			}
			else if (num != 204)
			{
				switch (num)
				{
				case 219:
				case 220:
					break;
				default:
					if (num != 232)
					{
						goto IL_419;
					}
					break;
				}
			}
			if (this.inputState.guessing == 0)
			{
				OutputClause outputClause = base.FragmentFactory.CreateFragment<OutputClause>();
				TSql80ParserBaseInternal.UpdateTokenInfo(outputClause, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(outputClause, outputClause.SelectColumns, list);
				vParent.OutputClause = outputClause;
				return;
			}
			return;
			IL_419:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600172C RID: 5932 RVA: 0x000A55AC File Offset: 0x000A37AC
		public OutputIntoClause outputIntoClause(IToken tOutput, IList<SelectElement> vSelectElements)
		{
			OutputIntoClause outputIntoClause = base.FragmentFactory.CreateFragment<OutputIntoClause>();
			TSql80ParserBaseInternal.UpdateTokenInfo(outputIntoClause, tOutput);
			TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(outputIntoClause, outputIntoClause.SelectColumns, vSelectElements);
			this.match(88);
			int num = this.LA(1);
			TableReference intoTable;
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
					intoTable = this.variableDmlTarget();
					goto IL_77;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			intoTable = this.intoSchemaObjectTable();
			IL_77:
			if (this.inputState.guessing == 0)
			{
				outputIntoClause.IntoTable = intoTable;
			}
			if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.identifierColumnList(outputIntoClause, outputIntoClause.IntoTableColumns);
			}
			else if (!TSql90ParserInternal.tokenSet_104_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_92_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return outputIntoClause;
		}

		// Token: 0x0600172D RID: 5933 RVA: 0x000A56C8 File Offset: 0x000A38C8
		public OutputClause outputClause()
		{
			OutputClause outputClause = base.FragmentFactory.CreateFragment<OutputClause>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "OUTPUT");
				TSql80ParserBaseInternal.UpdateTokenInfo(outputClause, token);
			}
			SelectElement item = this.outputClauseSelectElement();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(outputClause, outputClause.SelectColumns, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.outputClauseSelectElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SelectElement>(outputClause, outputClause.SelectColumns, item);
				}
			}
			return outputClause;
		}

		// Token: 0x0600172E RID: 5934 RVA: 0x000A5774 File Offset: 0x000A3974
		public VariableTableReference variableDmlTarget()
		{
			VariableTableReference variableTableReference = base.FragmentFactory.CreateFragment<VariableTableReference>();
			VariableReference variable = this.variable();
			if (this.inputState.guessing == 0)
			{
				variableTableReference.Variable = variable;
			}
			return variableTableReference;
		}

		// Token: 0x0600172F RID: 5935 RVA: 0x000A57AC File Offset: 0x000A39AC
		public NamedTableReference intoSchemaObjectTable()
		{
			NamedTableReference namedTableReference = base.FragmentFactory.CreateFragment<NamedTableReference>();
			SchemaObjectName schemaObject = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				namedTableReference.SchemaObject = schemaObject;
			}
			return namedTableReference;
		}

		// Token: 0x06001730 RID: 5936 RVA: 0x000A57E4 File Offset: 0x000A39E4
		public DeleteSpecification deleteSpecification()
		{
			DeleteSpecification deleteSpecification = base.FragmentFactory.CreateFragment<DeleteSpecification>();
			IToken token = this.LT(1);
			this.match(48);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(deleteSpecification, token);
			}
			int num = this.LA(1);
			if (num <= 109)
			{
				if (num == 71)
				{
					goto IL_BE;
				}
				switch (num)
				{
				case 107:
				case 108:
				case 109:
					goto IL_BE;
				}
			}
			else if (num != 152)
			{
				if (num == 200)
				{
					goto IL_BE;
				}
				switch (num)
				{
				case 232:
				case 233:
				case 234:
					goto IL_BE;
				}
			}
			else
			{
				TopRowFilter topRowFilter = this.topRowFilterForInsertUpdateDelete();
				if (this.inputState.guessing == 0)
				{
					deleteSpecification.TopRowFilter = topRowFilter;
					goto IL_BE;
				}
				goto IL_BE;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_BE:
			int num2 = this.LA(1);
			if (num2 <= 109)
			{
				if (num2 == 71)
				{
					this.match(71);
					goto IL_12C;
				}
				switch (num2)
				{
				case 107:
				case 108:
				case 109:
					goto IL_12C;
				}
			}
			else
			{
				if (num2 == 200)
				{
					goto IL_12C;
				}
				switch (num2)
				{
				case 232:
				case 233:
				case 234:
					goto IL_12C;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_12C:
			TableReference target = this.dmlTarget();
			if (this.inputState.guessing == 0)
			{
				deleteSpecification.Target = target;
			}
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_88_.member(this.LA(2)) && base.NextTokenMatches("OUTPUT"))
			{
				this.outputIntoOutputClause(deleteSpecification);
			}
			else if (!TSql90ParserInternal.tokenSet_105_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_92_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			FromClause fromClause = this.fromClauseOpt();
			if (this.inputState.guessing == 0)
			{
				deleteSpecification.FromClause = fromClause;
			}
			int num3 = this.LA(1);
			if (num3 <= 92)
			{
				if (num3 <= 28)
				{
					if (num3 <= 6)
					{
						if (num3 == 1)
						{
							return deleteSpecification;
						}
						switch (num3)
						{
						case 4:
						case 6:
							return deleteSpecification;
						}
					}
					else
					{
						switch (num3)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return deleteSpecification;
						case 14:
						case 16:
							break;
						default:
							switch (num3)
							{
							case 22:
							case 23:
								return deleteSpecification;
							default:
								if (num3 == 28)
								{
									return deleteSpecification;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num3 <= 75)
				{
					switch (num3)
					{
					case 33:
					case 35:
						return deleteSpecification;
					case 34:
						break;
					default:
						switch (num3)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return deleteSpecification;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num3)
							{
							case 74:
							case 75:
								return deleteSpecification;
							}
							break;
						}
						break;
					}
				}
				else if (num3 == 82 || num3 == 86 || num3 == 92)
				{
					return deleteSpecification;
				}
			}
			else if (num3 <= 172)
			{
				if (num3 <= 111)
				{
					if (num3 == 95 || num3 == 106 || num3 == 111)
					{
						return deleteSpecification;
					}
				}
				else
				{
					if (num3 == 119)
					{
						return deleteSpecification;
					}
					switch (num3)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return deleteSpecification;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num3)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return deleteSpecification;
						case 169:
						{
							WhereClause whereClause = this.dmlWhereClause();
							if (this.inputState.guessing == 0)
							{
								deleteSpecification.WhereClause = whereClause;
								return deleteSpecification;
							}
							return deleteSpecification;
						}
						}
						break;
					}
				}
			}
			else if (num3 <= 191)
			{
				if (num3 == 176)
				{
					return deleteSpecification;
				}
				switch (num3)
				{
				case 180:
				case 181:
					return deleteSpecification;
				default:
					if (num3 == 191)
					{
						return deleteSpecification;
					}
					break;
				}
			}
			else
			{
				if (num3 == 204)
				{
					return deleteSpecification;
				}
				switch (num3)
				{
				case 219:
				case 220:
					return deleteSpecification;
				default:
					if (num3 == 232)
					{
						return deleteSpecification;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001731 RID: 5937 RVA: 0x000A5C78 File Offset: 0x000A3E78
		public TableReference dmlTarget()
		{
			int num = this.LA(1);
			TableReference result;
			switch (num)
			{
			case 107:
			case 108:
			case 109:
				result = this.openRowset();
				break;
			default:
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					case 234:
						return this.variableDmlTarget();
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				result = this.schemaObjectDmlTarget();
				break;
			}
			return result;
		}

		// Token: 0x06001732 RID: 5938 RVA: 0x000A5CF8 File Offset: 0x000A3EF8
		public WhereClause dmlWhereClause()
		{
			WhereClause result;
			if (this.LA(1) == 169 && TSql90ParserInternal.tokenSet_106_.member(this.LA(2)))
			{
				result = this.whereClause();
			}
			else
			{
				if (this.LA(1) != 169 || this.LA(2) != 37)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.whereCurrentOfCursorClause();
			}
			return result;
		}

		// Token: 0x06001733 RID: 5939 RVA: 0x000A5D68 File Offset: 0x000A3F68
		public InsertSpecification insertSpecification()
		{
			InsertSpecification insertSpecification = base.FragmentFactory.CreateFragment<InsertSpecification>();
			IToken token = this.LT(1);
			this.match(86);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(insertSpecification, token);
			}
			int num = this.LA(1);
			if (num <= 115)
			{
				if (num == 88)
				{
					goto IL_CB;
				}
				switch (num)
				{
				case 107:
				case 108:
				case 109:
					goto IL_CB;
				default:
					if (num == 115)
					{
						goto IL_CB;
					}
					break;
				}
			}
			else if (num != 152)
			{
				if (num == 200)
				{
					goto IL_CB;
				}
				switch (num)
				{
				case 232:
				case 233:
				case 234:
					goto IL_CB;
				}
			}
			else
			{
				TopRowFilter topRowFilter = this.topRowFilterForInsertUpdateDelete();
				if (this.inputState.guessing == 0)
				{
					insertSpecification.TopRowFilter = topRowFilter;
					goto IL_CB;
				}
				goto IL_CB;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_CB:
			int num2 = this.LA(1);
			if (num2 <= 109)
			{
				if (num2 != 88)
				{
					switch (num2)
					{
					case 107:
					case 108:
					case 109:
						goto IL_171;
					}
				}
				else
				{
					this.match(88);
					if (this.inputState.guessing == 0)
					{
						insertSpecification.InsertOption = InsertOption.Into;
						goto IL_171;
					}
					goto IL_171;
				}
			}
			else if (num2 != 115)
			{
				if (num2 == 200)
				{
					goto IL_171;
				}
				switch (num2)
				{
				case 232:
				case 233:
				case 234:
					goto IL_171;
				}
			}
			else
			{
				this.match(115);
				if (this.inputState.guessing == 0)
				{
					insertSpecification.InsertOption = InsertOption.Over;
					goto IL_171;
				}
				goto IL_171;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_171:
			TableReference target = this.dmlTarget();
			if (this.inputState.guessing == 0)
			{
				insertSpecification.Target = target;
			}
			bool flag = false;
			if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					int num3 = this.LA(1);
					if (num3 != 200)
					{
						switch (num3)
						{
						case 232:
							this.match(232);
							break;
						case 233:
							this.match(233);
							break;
						default:
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
					else
					{
						this.match(200);
					}
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				IToken token2 = this.LT(1);
				this.match(191);
				ColumnReferenceExpression item = this.insertColumn();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(insertSpecification, token2);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(insertSpecification, insertSpecification.Columns, item);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					item = this.insertColumn();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(insertSpecification, insertSpecification.Columns, item);
					}
				}
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(insertSpecification, token3);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_107_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_108_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.LA(1) == 232 && base.NextTokenMatches("OUTPUT"))
			{
				this.outputIntoOutputClause(insertSpecification);
			}
			else if (!TSql90ParserInternal.tokenSet_109_.member(this.LA(1)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num4 = this.LA(1);
			InsertSource insertSource;
			if (num4 > 61)
			{
				if (num4 != 140)
				{
					if (num4 == 164)
					{
						goto IL_3F2;
					}
					if (num4 != 191)
					{
						goto IL_410;
					}
				}
				insertSource = this.selectInsertSource();
				goto IL_423;
			}
			if (num4 != 47)
			{
				switch (num4)
				{
				case 60:
				case 61:
					insertSource = this.executeInsertSource();
					goto IL_423;
				default:
					goto IL_410;
				}
			}
			IL_3F2:
			insertSource = this.valuesInsertSource();
			goto IL_423;
			IL_410:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_423:
			if (this.inputState.guessing == 0)
			{
				insertSpecification.InsertSource = insertSource;
			}
			return insertSpecification;
		}

		// Token: 0x06001734 RID: 5940 RVA: 0x000A61C0 File Offset: 0x000A43C0
		public ColumnReferenceExpression insertColumn()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
			}
			return columnReferenceExpression;
		}

		// Token: 0x06001735 RID: 5941 RVA: 0x000A61F8 File Offset: 0x000A43F8
		public ValuesInsertSource valuesInsertSource()
		{
			ValuesInsertSource valuesInsertSource = base.FragmentFactory.CreateFragment<ValuesInsertSource>();
			int num = this.LA(1);
			if (num != 47)
			{
				if (num != 164)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(164);
				RowValue item = this.rowValueExpressionWithDefault();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(valuesInsertSource, token);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<RowValue>(valuesInsertSource, valuesInsertSource.RowValues, item);
				}
			}
			else
			{
				this.match(47);
				IToken token2 = this.LT(1);
				this.match(164);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(valuesInsertSource, token2);
					valuesInsertSource.IsDefaultValues = true;
				}
			}
			return valuesInsertSource;
		}

		// Token: 0x06001736 RID: 5942 RVA: 0x000A62B8 File Offset: 0x000A44B8
		public ExecuteInsertSource executeInsertSource()
		{
			ExecuteInsertSource executeInsertSource = base.FragmentFactory.CreateFragment<ExecuteInsertSource>();
			ExecuteSpecification execute = this.executeSpecification();
			if (this.inputState.guessing == 0)
			{
				executeInsertSource.Execute = execute;
			}
			return executeInsertSource;
		}

		// Token: 0x06001737 RID: 5943 RVA: 0x000A62F0 File Offset: 0x000A44F0
		public SelectInsertSource selectInsertSource()
		{
			SelectInsertSource selectInsertSource = base.FragmentFactory.CreateFragment<SelectInsertSource>();
			QueryExpression queryExpression = this.queryExpression(null);
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_2AC;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_2AC;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_2AC;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_2AC;
						default:
							if (num == 28)
							{
								goto IL_2AC;
							}
							switch (num)
							{
							case 33:
							case 35:
								goto IL_2AC;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						goto IL_2AC;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_2AC;
						default:
							if (num == 82)
							{
								goto IL_2AC;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					goto IL_2AC;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106)
					{
						goto IL_2AC;
					}
					switch (num)
					{
					case 111:
						goto IL_2AC;
					case 112:
						break;
					case 113:
					{
						OrderByClause orderByClause = this.orderByClause();
						if (this.inputState.guessing == 0)
						{
							queryExpression.OrderByClause = orderByClause;
							goto IL_2AC;
						}
						goto IL_2AC;
					}
					default:
						if (num == 119)
						{
							goto IL_2AC;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_2AC;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							goto IL_2AC;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								goto IL_2AC;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					goto IL_2AC;
				}
				switch (num)
				{
				case 180:
				case 181:
					goto IL_2AC;
				default:
					if (num == 191)
					{
						goto IL_2AC;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_2AC;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_2AC;
				default:
					if (num == 232)
					{
						goto IL_2AC;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_2AC:
			if (this.inputState.guessing == 0)
			{
				selectInsertSource.Select = queryExpression;
			}
			return selectInsertSource;
		}

		// Token: 0x06001738 RID: 5944 RVA: 0x000A65C0 File Offset: 0x000A47C0
		public UpdateSpecification updateSpecification()
		{
			UpdateSpecification updateSpecification = base.FragmentFactory.CreateFragment<UpdateSpecification>();
			IToken token = this.LT(1);
			this.match(160);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateSpecification, token);
			}
			int num = this.LA(1);
			if (num <= 152)
			{
				switch (num)
				{
				case 107:
				case 108:
				case 109:
					goto IL_BE;
				default:
					if (num == 152)
					{
						TopRowFilter topRowFilter = this.topRowFilterForInsertUpdateDelete();
						if (this.inputState.guessing == 0)
						{
							updateSpecification.TopRowFilter = topRowFilter;
							goto IL_BE;
						}
						goto IL_BE;
					}
					break;
				}
			}
			else
			{
				if (num == 200)
				{
					goto IL_BE;
				}
				switch (num)
				{
				case 232:
				case 233:
				case 234:
					goto IL_BE;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_BE:
			TableReference target = this.dmlTarget();
			if (this.inputState.guessing == 0)
			{
				updateSpecification.Target = target;
			}
			this.setClausesList(updateSpecification, updateSpecification.SetClauses);
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_88_.member(this.LA(2)) && base.NextTokenMatches("OUTPUT"))
			{
				this.outputIntoOutputClause(updateSpecification);
			}
			else if (!TSql90ParserInternal.tokenSet_105_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_92_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			FromClause fromClause = this.fromClauseOpt();
			if (this.inputState.guessing == 0)
			{
				updateSpecification.FromClause = fromClause;
			}
			int num2 = this.LA(1);
			if (num2 <= 92)
			{
				if (num2 <= 28)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							return updateSpecification;
						}
						switch (num2)
						{
						case 4:
						case 6:
							return updateSpecification;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return updateSpecification;
						case 14:
						case 16:
							break;
						default:
							switch (num2)
							{
							case 22:
							case 23:
								return updateSpecification;
							default:
								if (num2 == 28)
								{
									return updateSpecification;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 75)
				{
					switch (num2)
					{
					case 33:
					case 35:
						return updateSpecification;
					case 34:
						break;
					default:
						switch (num2)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							return updateSpecification;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num2)
							{
							case 74:
							case 75:
								return updateSpecification;
							}
							break;
						}
						break;
					}
				}
				else if (num2 == 82 || num2 == 86 || num2 == 92)
				{
					return updateSpecification;
				}
			}
			else if (num2 <= 172)
			{
				if (num2 <= 111)
				{
					if (num2 == 95 || num2 == 106 || num2 == 111)
					{
						return updateSpecification;
					}
				}
				else
				{
					if (num2 == 119)
					{
						return updateSpecification;
					}
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return updateSpecification;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num2)
						{
						case 156:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return updateSpecification;
						case 169:
						{
							WhereClause whereClause = this.dmlWhereClause();
							if (this.inputState.guessing == 0)
							{
								updateSpecification.WhereClause = whereClause;
								return updateSpecification;
							}
							return updateSpecification;
						}
						}
						break;
					}
				}
			}
			else if (num2 <= 191)
			{
				if (num2 == 176)
				{
					return updateSpecification;
				}
				switch (num2)
				{
				case 180:
				case 181:
					return updateSpecification;
				default:
					if (num2 == 191)
					{
						return updateSpecification;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					return updateSpecification;
				}
				switch (num2)
				{
				case 219:
				case 220:
					return updateSpecification;
				default:
					if (num2 == 232)
					{
						return updateSpecification;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001739 RID: 5945 RVA: 0x000A69F4 File Offset: 0x000A4BF4
		public void setClausesList(TSqlFragment vParent, IList<SetClause> setClauses)
		{
			IToken token = this.LT(1);
			this.match(142);
			SetClause item = this.setClause();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SetClause>(vParent, setClauses, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.setClause();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SetClause>(vParent, setClauses, item);
				}
			}
		}

		// Token: 0x0600173A RID: 5946 RVA: 0x000A6A70 File Offset: 0x000A4C70
		public SetClause setClause()
		{
			int num = this.LA(1);
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
					return this.setClauseStartingWithVariable();
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
			int num2 = this.LA(1);
			SetClause result;
			if (num2 != 191)
			{
				if (num2 != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.setClauseColumnAssignment(multiPartIdentifier);
			}
			else
			{
				result = this.setClauseFunctionCall(multiPartIdentifier);
			}
			return result;
		}

		// Token: 0x0600173B RID: 5947 RVA: 0x000A6B0C File Offset: 0x000A4D0C
		public AssignmentSetClause setClauseStartingWithVariable()
		{
			AssignmentSetClause assignmentSetClause = base.FragmentFactory.CreateFragment<AssignmentSetClause>();
			VariableReference variable = this.variable();
			this.match(206);
			if (this.inputState.guessing == 0)
			{
				assignmentSetClause.Variable = variable;
			}
			bool flag = false;
			if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_110_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.multiPartIdentifier(-1);
					this.match(206);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(-1);
				this.match(206);
				ScalarExpression newValue = this.expressionWithDefault();
				if (this.inputState.guessing == 0)
				{
					base.CreateSetClauseColumn(assignmentSetClause, multiPartIdentifier);
					assignmentSetClause.NewValue = newValue;
				}
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_38_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_111_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				ScalarExpression newValue = this.expression();
				if (this.inputState.guessing == 0)
				{
					assignmentSetClause.NewValue = newValue;
				}
			}
			return assignmentSetClause;
		}

		// Token: 0x0600173C RID: 5948 RVA: 0x000A6C84 File Offset: 0x000A4E84
		public AssignmentSetClause setClauseColumnAssignment(MultiPartIdentifier vMultiPartIdentifier)
		{
			AssignmentSetClause assignmentSetClause = base.FragmentFactory.CreateFragment<AssignmentSetClause>();
			this.match(206);
			ScalarExpression newValue = this.expressionWithDefault();
			if (this.inputState.guessing == 0)
			{
				base.CreateSetClauseColumn(assignmentSetClause, vMultiPartIdentifier);
				assignmentSetClause.NewValue = newValue;
			}
			return assignmentSetClause;
		}

		// Token: 0x0600173D RID: 5949 RVA: 0x000A6CCC File Offset: 0x000A4ECC
		public FunctionCallSetClause setClauseFunctionCall(MultiPartIdentifier vMultiPartIdentifier)
		{
			FunctionCallSetClause functionCallSetClause = base.FragmentFactory.CreateFragment<FunctionCallSetClause>();
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			base.PutIdentifiersIntoFunctionCall(functionCall, vMultiPartIdentifier);
			this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
			if (this.inputState.guessing == 0)
			{
				functionCallSetClause.MutatorFunction = functionCall;
			}
			return functionCallSetClause;
		}

		// Token: 0x0600173E RID: 5950 RVA: 0x000A6D1C File Offset: 0x000A4F1C
		public ExecuteSpecification executeSpecification()
		{
			ExecuteSpecification executeSpecification = base.FragmentFactory.CreateFragment<ExecuteSpecification>();
			this.execStart(executeSpecification);
			this.execTypes(executeSpecification);
			return executeSpecification;
		}

		// Token: 0x0600173F RID: 5951 RVA: 0x000A6D44 File Offset: 0x000A4F44
		public RowValue rowValueExpressionWithDefault()
		{
			RowValue rowValue = base.FragmentFactory.CreateFragment<RowValue>();
			IToken token = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(rowValue, token);
			}
			this.expressionWithDefaultList(rowValue, rowValue.ColumnValues);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(rowValue, token2);
			}
			return rowValue;
		}

		// Token: 0x06001740 RID: 5952 RVA: 0x000A6DC0 File Offset: 0x000A4FC0
		public void expressionWithDefaultList(TSqlFragment vParent, IList<ScalarExpression> expressions)
		{
			ScalarExpression item = this.expressionWithDefault();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, expressions, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.expressionWithDefault();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, expressions, item);
				}
			}
		}

		// Token: 0x06001741 RID: 5953 RVA: 0x000A6E20 File Offset: 0x000A5020
		public TableReferenceWithAlias schemaObjectDmlTarget()
		{
			bool flag = false;
			if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_112_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.schemaObjectFourPartName();
					this.match(191);
					int num = this.LA(1);
					if (num <= 100)
					{
						if (num != 47 && num != 100)
						{
							goto IL_106;
						}
					}
					else
					{
						switch (num)
						{
						case 192:
							this.match(192);
							goto IL_119;
						case 193:
							break;
						default:
							if (num != 199)
							{
								switch (num)
								{
								case 221:
								case 222:
								case 223:
								case 224:
								case 225:
								case 230:
								case 231:
								case 234:
									break;
								case 226:
								case 227:
								case 228:
								case 229:
								case 232:
								case 233:
									goto IL_106;
								default:
									goto IL_106;
								}
							}
							break;
						}
					}
					this.possibleNegativeConstantWithDefault();
					goto IL_119;
					IL_106:
					throw new NoViableAltException(this.LT(1), this.getFilename());
					IL_119:;
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			TableReferenceWithAlias result;
			if (flag)
			{
				result = this.schemaObjectFunctionDmlTarget();
			}
			else
			{
				if ((this.LA(1) != 200 && this.LA(1) != 232 && this.LA(1) != 233) || !TSql90ParserInternal.tokenSet_113_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.schemaObjectTableDmlTarget();
			}
			return result;
		}

		// Token: 0x06001742 RID: 5954 RVA: 0x000A6FE0 File Offset: 0x000A51E0
		public ScalarExpression possibleNegativeConstantWithDefault()
		{
			int num = this.LA(1);
			if (num <= 100)
			{
				if (num == 47)
				{
					return this.defaultLiteral();
				}
				if (num != 100)
				{
					goto IL_83;
				}
			}
			else if (num != 193 && num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
				case 232:
				case 233:
					goto IL_83;
				default:
					goto IL_83;
				}
			}
			return this.possibleNegativeConstant();
			IL_83:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001743 RID: 5955 RVA: 0x000A7084 File Offset: 0x000A5284
		public SchemaObjectFunctionTableReference schemaObjectFunctionDmlTarget()
		{
			SchemaObjectFunctionTableReference schemaObjectFunctionTableReference = base.FragmentFactory.CreateFragment<SchemaObjectFunctionTableReference>();
			SchemaObjectName schemaObject = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				schemaObjectFunctionTableReference.SchemaObject = schemaObject;
			}
			this.parenthesizedOptExpressionWithDefaultList(schemaObjectFunctionTableReference, schemaObjectFunctionTableReference.Parameters);
			return schemaObjectFunctionTableReference;
		}

		// Token: 0x06001744 RID: 5956 RVA: 0x000A70C8 File Offset: 0x000A52C8
		public NamedTableReference schemaObjectTableDmlTarget()
		{
			NamedTableReference namedTableReference = base.FragmentFactory.CreateFragment<NamedTableReference>();
			SchemaObjectName schemaObject = this.schemaObjectFourPartName();
			if (this.inputState.guessing == 0)
			{
				namedTableReference.SchemaObject = schemaObject;
			}
			if (this.LA(1) == 171 && this.LA(2) == 191)
			{
				this.match(171);
				this.tableHints(namedTableReference, namedTableReference.TableHints, false);
			}
			else if (!TSql90ParserInternal.tokenSet_104_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_92_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return namedTableReference;
		}

		// Token: 0x06001745 RID: 5957 RVA: 0x000A7170 File Offset: 0x000A5370
		public void tableHints(TSqlFragment vParent, IList<TableHint> hints, bool indexHintAllowed)
		{
			IToken token = this.LT(1);
			this.match(191);
			TableHint item = this.tableHint(indexHintAllowed);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, item);
			}
			while (TSql90ParserInternal.tokenSet_114_.member(this.LA(1)))
			{
				int num = this.LA(1);
				if (num <= 84)
				{
					if (num != 78 && num != 84)
					{
						goto IL_86;
					}
				}
				else if (num != 198)
				{
					if (num != 232)
					{
						goto IL_86;
					}
				}
				else
				{
					this.match(198);
				}
				item = this.tableHint(indexHintAllowed);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, item);
					continue;
				}
				continue;
				IL_86:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06001746 RID: 5958 RVA: 0x000A725C File Offset: 0x000A545C
		public NamedTableReference schemaObjectTableReference(SchemaObjectName vSchemaObjectName)
		{
			NamedTableReference namedTableReference = base.FragmentFactory.CreateFragment<NamedTableReference>();
			namedTableReference.SchemaObject = vSchemaObjectName;
			if (this.LA(1) == 191 && (this.LA(2) == 78 || this.LA(2) == 84 || this.LA(2) == 232))
			{
				this.singleOldStyleTableHint(namedTableReference, namedTableReference.TableHints);
				if ((this.LA(1) == 9 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_115_.member(this.LA(2)))
				{
					this.simpleTableReferenceAlias(namedTableReference);
				}
				else if (!TSql90ParserInternal.tokenSet_73_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_100_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				int num = this.LA(1);
				if (num <= 106)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							goto IL_460;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_460;
						case 5:
							break;
						default:
							switch (num)
							{
							case 9:
							case 12:
							case 13:
							case 15:
							case 17:
								goto IL_460;
							}
							break;
						}
					}
					else if (num <= 36)
					{
						switch (num)
						{
						case 22:
						case 23:
							goto IL_460;
						default:
							switch (num)
							{
							case 28:
							case 29:
							case 33:
							case 35:
							case 36:
								goto IL_460;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
						case 72:
						case 74:
						case 75:
						case 76:
						case 77:
						case 78:
						case 82:
						case 85:
						case 86:
						case 87:
						case 90:
						case 92:
						case 93:
						case 95:
							goto IL_460;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 62:
						case 63:
						case 65:
						case 66:
						case 68:
						case 69:
						case 70:
						case 71:
						case 73:
						case 79:
						case 80:
						case 81:
						case 83:
						case 84:
						case 88:
						case 89:
						case 91:
						case 94:
							break;
						default:
							switch (num)
							{
							case 105:
							case 106:
								goto IL_460;
							}
							break;
						}
					}
				}
				else if (num <= 194)
				{
					if (num <= 144)
					{
						switch (num)
						{
						case 111:
						case 113:
						case 114:
							goto IL_460;
						case 112:
							break;
						default:
							switch (num)
							{
							case 119:
							case 123:
							case 125:
							case 126:
							case 129:
							case 131:
							case 132:
							case 133:
							case 134:
							case 138:
							case 140:
							case 142:
							case 143:
							case 144:
								goto IL_460;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 169:
						case 170:
						case 171:
						case 172:
						case 176:
						case 177:
						case 178:
						case 180:
						case 181:
							goto IL_460;
						case 157:
						case 159:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 173:
						case 174:
						case 175:
							break;
						case 179:
						{
							TableSampleClause tableSampleClause = this.tableSampleClause();
							if (this.inputState.guessing == 0)
							{
								namedTableReference.TableSampleClause = tableSampleClause;
								goto IL_460;
							}
							goto IL_460;
						}
						default:
							switch (num)
							{
							case 191:
							case 192:
							case 194:
								goto IL_460;
							}
							break;
						}
					}
				}
				else if (num <= 204)
				{
					if (num == 198 || num == 204)
					{
						goto IL_460;
					}
				}
				else
				{
					switch (num)
					{
					case 219:
					case 220:
						goto IL_460;
					default:
						switch (num)
						{
						case 232:
						case 233:
							goto IL_460;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_460:
				if ((this.LA(1) == 78 || this.LA(1) == 171) && TSql90ParserInternal.tokenSet_73_.member(this.LA(2)))
				{
					this.nonParameterTableHints(namedTableReference, namedTableReference.TableHints);
				}
				else if ((this.LA(1) == 9 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_116_.member(this.LA(2)))
				{
					if (this.inputState.guessing == 0 && namedTableReference.TableSampleClause != null)
					{
						throw base.GetUnexpectedTokenErrorException();
					}
					this.simpleTableReferenceAlias(namedTableReference);
					int num2 = this.LA(1);
					if (num2 <= 106)
					{
						if (num2 <= 17)
						{
							if (num2 == 1)
							{
								goto IL_843;
							}
							switch (num2)
							{
							case 4:
							case 6:
								goto IL_843;
							case 5:
								break;
							default:
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
									goto IL_843;
								}
								break;
							}
						}
						else if (num2 <= 36)
						{
							switch (num2)
							{
							case 22:
							case 23:
								goto IL_843;
							default:
								switch (num2)
								{
								case 28:
								case 29:
								case 33:
								case 35:
								case 36:
									goto IL_843;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 59:
							case 60:
							case 61:
							case 64:
							case 67:
							case 72:
							case 74:
							case 75:
							case 76:
							case 77:
							case 78:
							case 82:
							case 85:
							case 86:
							case 87:
							case 90:
							case 92:
							case 93:
							case 95:
								goto IL_843;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 62:
							case 63:
							case 65:
							case 66:
							case 68:
							case 69:
							case 70:
							case 71:
							case 73:
							case 79:
							case 80:
							case 81:
							case 83:
							case 84:
							case 88:
							case 89:
							case 91:
							case 94:
								break;
							default:
								switch (num2)
								{
								case 105:
								case 106:
									goto IL_843;
								}
								break;
							}
						}
					}
					else if (num2 <= 194)
					{
						if (num2 <= 144)
						{
							switch (num2)
							{
							case 111:
							case 113:
							case 114:
								goto IL_843;
							case 112:
								break;
							default:
								switch (num2)
								{
								case 119:
								case 123:
								case 125:
								case 126:
								case 129:
								case 131:
								case 132:
								case 133:
								case 134:
								case 138:
								case 140:
								case 142:
								case 143:
								case 144:
									goto IL_843;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 156:
							case 158:
							case 160:
							case 161:
							case 162:
							case 167:
							case 169:
							case 170:
							case 171:
							case 172:
							case 176:
							case 177:
							case 178:
							case 180:
							case 181:
								goto IL_843;
							case 157:
							case 159:
							case 163:
							case 164:
							case 165:
							case 166:
							case 168:
							case 173:
							case 174:
							case 175:
								break;
							case 179:
							{
								TableSampleClause tableSampleClause = this.tableSampleClause();
								if (this.inputState.guessing == 0)
								{
									namedTableReference.TableSampleClause = tableSampleClause;
									goto IL_843;
								}
								goto IL_843;
							}
							default:
								switch (num2)
								{
								case 191:
								case 192:
								case 194:
									goto IL_843;
								}
								break;
							}
						}
					}
					else if (num2 <= 204)
					{
						if (num2 == 198 || num2 == 204)
						{
							goto IL_843;
						}
					}
					else
					{
						switch (num2)
						{
						case 219:
						case 220:
							goto IL_843;
						default:
							if (num2 == 232)
							{
								goto IL_843;
							}
							break;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
					IL_843:
					bool flag = false;
					if (this.LA(1) == 191 && this.LA(2) == 221)
					{
						int pos = this.mark();
						flag = true;
						this.inputState.guessing++;
						try
						{
							this.match(191);
							this.integer();
						}
						catch (RecognitionException)
						{
							flag = false;
						}
						this.rewind(pos);
						this.inputState.guessing--;
					}
					if (flag)
					{
						IndexTableHint item = this.oldForceIndex();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(namedTableReference, namedTableReference.TableHints, item);
						}
					}
					else
					{
						bool flag2 = false;
						if ((this.LA(1) == 78 || this.LA(1) == 171) && TSql90ParserInternal.tokenSet_73_.member(this.LA(2)))
						{
							int pos2 = this.mark();
							flag2 = true;
							this.inputState.guessing++;
							try
							{
								int num3 = this.LA(1);
								if (num3 != 78)
								{
									if (num3 != 171)
									{
										if (num3 != 191)
										{
											throw new NoViableAltException(this.LT(1), this.getFilename());
										}
										this.match(191);
										int num4 = this.LA(1);
										if (num4 != 78)
										{
											if (num4 != 84)
											{
												throw new NoViableAltException(this.LT(1), this.getFilename());
											}
											this.match(84);
										}
										else
										{
											this.match(78);
										}
									}
									else
									{
										this.match(171);
									}
								}
								else
								{
									this.match(78);
								}
							}
							catch (RecognitionException)
							{
								flag2 = false;
							}
							this.rewind(pos2);
							this.inputState.guessing--;
						}
						if (flag2)
						{
							this.nonParameterTableHints(namedTableReference, namedTableReference.TableHints);
						}
						else if (this.LA(1) == 191 && (this.LA(2) == 78 || this.LA(2) == 84 || this.LA(2) == 232))
						{
							this.singleOldStyleTableHint(namedTableReference, namedTableReference.TableHints);
						}
						else if (!TSql90ParserInternal.tokenSet_73_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
					}
				}
				else if (!TSql90ParserInternal.tokenSet_73_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return namedTableReference;
		}

		// Token: 0x06001747 RID: 5959 RVA: 0x000A7D50 File Offset: 0x000A5F50
		public SchemaObjectFunctionTableReference schemaObjectFunctionTableReference(SchemaObjectName vSchemaObjectName)
		{
			SchemaObjectFunctionTableReference schemaObjectFunctionTableReference = base.FragmentFactory.CreateFragment<SchemaObjectFunctionTableReference>();
			schemaObjectFunctionTableReference.SchemaObject = vSchemaObjectName;
			this.parenthesizedOptExpressionWithDefaultList(schemaObjectFunctionTableReference, schemaObjectFunctionTableReference.Parameters);
			this.simpleTableReferenceAliasOpt(schemaObjectFunctionTableReference);
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.columnNameList(schemaObjectFunctionTableReference, schemaObjectFunctionTableReference.Columns);
			}
			else if (!TSql90ParserInternal.tokenSet_73_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return schemaObjectFunctionTableReference;
		}

		// Token: 0x06001748 RID: 5960 RVA: 0x000A7DF8 File Offset: 0x000A5FF8
		public void singleOldStyleTableHint(TSqlFragment vParent, IList<TableHint> hints)
		{
			IToken token = this.LT(1);
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			TableHint item = this.tableHint(true);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, item);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06001749 RID: 5961 RVA: 0x000A7E68 File Offset: 0x000A6068
		public void nonParameterTableHints(TSqlFragment vParent, IList<TableHint> hints)
		{
			int num = this.LA(1);
			if (num != 78)
			{
				if (num != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.simpleTableHints(vParent, hints);
				return;
			}
			else
			{
				IToken token = this.LT(1);
				this.match(78);
				if (this.inputState.guessing == 0)
				{
					TableHint tableHint = base.FragmentFactory.CreateFragment<TableHint>();
					TSql80ParserBaseInternal.UpdateTokenInfo(tableHint, token);
					tableHint.HintKind = TableHintKind.HoldLock;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, tableHint);
				}
				bool flag = false;
				if (this.LA(1) == 191 && this.LA(2) == 221)
				{
					int pos = this.mark();
					flag = true;
					this.inputState.guessing++;
					try
					{
						this.match(191);
						this.integer();
					}
					catch (RecognitionException)
					{
						flag = false;
					}
					this.rewind(pos);
					this.inputState.guessing--;
				}
				if (flag)
				{
					IndexTableHint item = this.oldForceIndex();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, item);
						return;
					}
					return;
				}
				else
				{
					bool flag2 = false;
					if (this.LA(1) == 171 && this.LA(2) == 191)
					{
						int pos2 = this.mark();
						flag2 = true;
						this.inputState.guessing++;
						try
						{
							this.match(191);
							int num2 = this.LA(1);
							if (num2 != 84)
							{
								switch (num2)
								{
								case 232:
								case 233:
									this.identifier();
									break;
								default:
									throw new NoViableAltException(this.LT(1), this.getFilename());
								}
							}
							else
							{
								this.match(84);
							}
						}
						catch (RecognitionException)
						{
							flag2 = false;
						}
						this.rewind(pos2);
						this.inputState.guessing--;
					}
					if (flag2)
					{
						this.simpleTableHints(vParent, hints);
						return;
					}
					if (TSql90ParserInternal.tokenSet_73_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
					{
						return;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
		}

		// Token: 0x0600174A RID: 5962 RVA: 0x000A80A4 File Offset: 0x000A62A4
		public IndexTableHint oldForceIndex()
		{
			IndexTableHint indexTableHint = base.FragmentFactory.CreateFragment<IndexTableHint>();
			IToken token = this.LT(1);
			this.match(191);
			Literal valueExpression = this.integer();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(indexTableHint, indexTableHint.IndexValues, base.IdentifierOrValueExpression(valueExpression));
				TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token2);
				indexTableHint.HintKind = TableHintKind.Index;
			}
			return indexTableHint;
		}

		// Token: 0x0600174B RID: 5963 RVA: 0x000A8128 File Offset: 0x000A6328
		public void fullTextTable(FullTextTableReference vParent)
		{
			int num = this.LA(1);
			if (num != 32)
			{
				if (num != 70)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(70);
				if (this.inputState.guessing == 0)
				{
					vParent.FullTextFunctionType = FullTextFunctionType.FreeText;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(32);
				if (this.inputState.guessing == 0)
				{
					vParent.FullTextFunctionType = FullTextFunctionType.Contains;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					return;
				}
			}
		}

		// Token: 0x0600174C RID: 5964 RVA: 0x000A81B8 File Offset: 0x000A63B8
		public void fulltextTableColumnList(FullTextTableReference vParent)
		{
			int num = this.LA(1);
			if (num != 195)
			{
				ColumnReferenceExpression item;
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						if (this.LA(1) == 191 && this.LA(2) == 195)
						{
							this.match(191);
							item = this.starColumnReferenceExpression();
							this.match(192);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vParent.Columns, item);
								return;
							}
							return;
						}
						else
						{
							if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
							{
								this.match(191);
								item = this.identifierColumnReferenceExpression();
								if (this.inputState.guessing == 0)
								{
									TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vParent.Columns, item);
								}
								while (this.LA(1) == 198)
								{
									this.match(198);
									item = this.identifierColumnReferenceExpression();
									if (this.inputState.guessing == 0)
									{
										TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vParent.Columns, item);
									}
								}
								this.match(192);
								return;
							}
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						break;
					}
				}
				item = this.identifierColumnReferenceExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vParent.Columns, item);
					return;
				}
			}
			else
			{
				ColumnReferenceExpression item = this.starColumnReferenceExpression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(vParent, vParent.Columns, item);
					return;
				}
			}
		}

		// Token: 0x0600174D RID: 5965 RVA: 0x000A8358 File Offset: 0x000A6558
		public void fulltextTableOptions(FullTextTableReference vParent)
		{
			if (this.LA(1) == 198 && this.LA(2) == 232)
			{
				this.match(198);
				ValueExpression language = this.languageExpression();
				if (this.inputState.guessing == 0)
				{
					vParent.Language = language;
				}
				int num = this.LA(1);
				if (num != 192)
				{
					if (num != 198)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(198);
					ValueExpression topN = this.unsignedInteger();
					if (this.inputState.guessing == 0)
					{
						vParent.TopN = topN;
						return;
					}
				}
			}
			else
			{
				if (this.LA(1) != 198 || (this.LA(2) != 221 && this.LA(2) != 234))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				ValueExpression topN = this.unsignedInteger();
				if (this.inputState.guessing == 0)
				{
					vParent.TopN = topN;
				}
				int num2 = this.LA(1);
				if (num2 != 192)
				{
					if (num2 != 198)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(198);
					ValueExpression language = this.languageExpression();
					if (this.inputState.guessing == 0)
					{
						vParent.Language = language;
						return;
					}
				}
			}
		}

		// Token: 0x0600174E RID: 5966 RVA: 0x000A84BC File Offset: 0x000A66BC
		public ColumnReferenceExpression identifierColumnReferenceExpression()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			MultiPartIdentifier multiPartIdentifier = this.multiPartIdentifier(1);
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression.ColumnType = ColumnType.Regular;
				columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
			}
			return columnReferenceExpression;
		}

		// Token: 0x0600174F RID: 5967 RVA: 0x000A84FC File Offset: 0x000A66FC
		public ColumnReferenceExpression starColumnReferenceExpression()
		{
			ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			IToken token = this.LT(1);
			this.match(195);
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression.ColumnType = ColumnType.Wildcard;
				TSql80ParserBaseInternal.UpdateTokenInfo(columnReferenceExpression, token);
			}
			return columnReferenceExpression;
		}

		// Token: 0x06001750 RID: 5968 RVA: 0x000A8548 File Offset: 0x000A6748
		public ValueExpression languageExpression()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "LANGUAGE");
			}
			return this.binaryOrIntegerOrStringOrVariable();
		}

		// Token: 0x06001751 RID: 5969 RVA: 0x000A858C File Offset: 0x000A678C
		public ValueExpression unsignedInteger()
		{
			int num = this.LA(1);
			ValueExpression result;
			if (num != 221)
			{
				if (num != 234)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.variable();
			}
			else
			{
				result = this.integer();
			}
			return result;
		}

		// Token: 0x06001752 RID: 5970 RVA: 0x000A85DC File Offset: 0x000A67DC
		public ValueExpression binaryOrIntegerOrStringOrVariable()
		{
			int num = this.LA(1);
			ValueExpression result;
			if (num != 221)
			{
				if (num != 224)
				{
					switch (num)
					{
					case 230:
					case 231:
						return this.stringLiteral();
					case 234:
						return this.variable();
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.binary();
			}
			else
			{
				result = this.integer();
			}
			return result;
		}

		// Token: 0x06001753 RID: 5971 RVA: 0x000A865C File Offset: 0x000A685C
		public OpenXmlTableReference openXmlParams()
		{
			OpenXmlTableReference openXmlTableReference = base.FragmentFactory.CreateFragment<OpenXmlTableReference>();
			VariableReference variable = this.variable();
			this.match(198);
			ValueExpression rowPattern = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				openXmlTableReference.Variable = variable;
				openXmlTableReference.RowPattern = rowPattern;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				ValueExpression flags = this.unsignedInteger();
				if (this.inputState.guessing == 0)
				{
					openXmlTableReference.Flags = flags;
				}
			}
			return openXmlTableReference;
		}

		// Token: 0x06001754 RID: 5972 RVA: 0x000A8700 File Offset: 0x000A6900
		public void openXmlWithClauseOpt(OpenXmlTableReference vParent)
		{
			bool flag = false;
			if (this.LA(1) == 171 && TSql90ParserInternal.tokenSet_112_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(171);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				if (this.LA(1) == 171 && this.LA(2) == 191)
				{
					this.match(171);
					this.match(191);
					this.openXmlSchemaItemList(vParent);
					IToken token = this.LT(1);
					this.match(192);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
						return;
					}
				}
				else
				{
					if (this.LA(1) != 171 || (this.LA(2) != 200 && this.LA(2) != 232 && this.LA(2) != 233))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(171);
					SchemaObjectName tableName = this.schemaObjectThreePartName();
					if (this.inputState.guessing == 0)
					{
						vParent.TableName = tableName;
						return;
					}
				}
				return;
			}
			if (TSql90ParserInternal.tokenSet_99_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001755 RID: 5973 RVA: 0x000A88A0 File Offset: 0x000A6AA0
		public void openXmlSchemaItemList(OpenXmlTableReference vParent)
		{
			SchemaDeclarationItem item = this.openXmlSchemaItem();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaDeclarationItem>(vParent, vParent.SchemaDeclarationItems, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.openXmlSchemaItem();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SchemaDeclarationItem>(vParent, vParent.SchemaDeclarationItems, item);
				}
			}
		}

		// Token: 0x06001756 RID: 5974 RVA: 0x000A890C File Offset: 0x000A6B0C
		public SchemaDeclarationItem openXmlSchemaItem()
		{
			SchemaDeclarationItem schemaDeclarationItem = base.FragmentFactory.CreateFragment<SchemaDeclarationItem>();
			ColumnDefinitionBase columnDefinition = this.columnDefinitionBasic();
			if (this.inputState.guessing == 0)
			{
				schemaDeclarationItem.ColumnDefinition = columnDefinition;
			}
			int num = this.LA(1);
			if (num != 192 && num != 198)
			{
				switch (num)
				{
				case 230:
				case 231:
				case 234:
				{
					ValueExpression mapping = this.stringOrVariable();
					if (this.inputState.guessing == 0)
					{
						schemaDeclarationItem.Mapping = mapping;
						return schemaDeclarationItem;
					}
					return schemaDeclarationItem;
				}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return schemaDeclarationItem;
		}

		// Token: 0x06001757 RID: 5975 RVA: 0x000A89AC File Offset: 0x000A6BAC
		public ColumnDefinitionBase columnDefinitionBasic()
		{
			ColumnDefinitionBase columnDefinitionBase = base.FragmentFactory.CreateFragment<ColumnDefinitionBase>();
			Identifier columnIdentifier = this.identifier();
			DataTypeReference dataType = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				columnDefinitionBase.ColumnIdentifier = columnIdentifier;
				columnDefinitionBase.DataType = dataType;
			}
			this.collationOpt(columnDefinitionBase);
			return columnDefinitionBase;
		}

		// Token: 0x06001758 RID: 5976 RVA: 0x000A89F8 File Offset: 0x000A6BF8
		public TableReferenceWithAlias openRowsetRowset()
		{
			IToken token = this.LT(1);
			this.match(109);
			this.match(191);
			int num = this.LA(1);
			TableReferenceWithAlias tableReferenceWithAlias;
			if (num != 17)
			{
				switch (num)
				{
				case 230:
				case 231:
					tableReferenceWithAlias = this.openRowsetParams();
					break;
				case 232:
				case 233:
					tableReferenceWithAlias = this.internalOpenRowsetArgs();
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				tableReferenceWithAlias = this.openRowsetBulk();
			}
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tableReferenceWithAlias, token);
			}
			return tableReferenceWithAlias;
		}

		// Token: 0x06001759 RID: 5977 RVA: 0x000A8A90 File Offset: 0x000A6C90
		public OpenQueryTableReference openQueryRowset()
		{
			OpenQueryTableReference openQueryTableReference = base.FragmentFactory.CreateFragment<OpenQueryTableReference>();
			IToken token = this.LT(1);
			this.match(108);
			this.match(191);
			Identifier linkedServer = this.identifier();
			this.match(198);
			StringLiteral query = this.stringLiteral();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(openQueryTableReference, token);
				openQueryTableReference.LinkedServer = linkedServer;
				openQueryTableReference.Query = query;
				TSql80ParserBaseInternal.UpdateTokenInfo(openQueryTableReference, token2);
			}
			return openQueryTableReference;
		}

		// Token: 0x0600175A RID: 5978 RVA: 0x000A8B20 File Offset: 0x000A6D20
		public AdHocTableReference adhocRowset()
		{
			AdHocTableReference adHocTableReference = base.FragmentFactory.CreateFragment<AdHocTableReference>();
			AdHocDataSource dataSource = this.adhocDataSource();
			this.match(200);
			if (this.inputState.guessing == 0)
			{
				adHocTableReference.DataSource = dataSource;
			}
			SchemaObjectNameOrValueExpression @object = this.objectOrString();
			if (this.inputState.guessing == 0)
			{
				adHocTableReference.Object = @object;
			}
			return adHocTableReference;
		}

		// Token: 0x0600175B RID: 5979 RVA: 0x000A8B7C File Offset: 0x000A6D7C
		public OpenRowsetTableReference openRowsetParams()
		{
			OpenRowsetTableReference openRowsetTableReference = base.FragmentFactory.CreateFragment<OpenRowsetTableReference>();
			StringLiteral providerName = this.stringLiteral();
			this.match(198);
			if (this.inputState.guessing == 0)
			{
				openRowsetTableReference.ProviderName = providerName;
			}
			if ((this.LA(1) == 230 || this.LA(1) == 231) && this.LA(2) == 204)
			{
				StringLiteral dataSource = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					openRowsetTableReference.DataSource = dataSource;
				}
				this.match(204);
				int num = this.LA(1);
				if (num != 204)
				{
					switch (num)
					{
					case 230:
					case 231:
					{
						StringLiteral userId = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							openRowsetTableReference.UserId = userId;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				this.match(204);
				int num2 = this.LA(1);
				if (num2 != 198)
				{
					switch (num2)
					{
					case 230:
					case 231:
					{
						StringLiteral password = this.stringLiteral();
						if (this.inputState.guessing == 0)
						{
							openRowsetTableReference.Password = password;
						}
						break;
					}
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
			}
			else
			{
				if ((this.LA(1) != 230 && this.LA(1) != 231) || this.LA(2) != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				StringLiteral providerString = this.stringLiteral();
				if (this.inputState.guessing == 0)
				{
					openRowsetTableReference.ProviderString = providerString;
				}
			}
			this.match(198);
			int num3 = this.LA(1);
			if (num3 != 200)
			{
				switch (num3)
				{
				case 230:
				case 231:
				{
					StringLiteral query = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						openRowsetTableReference.Query = query;
						goto IL_237;
					}
					goto IL_237;
				}
				case 232:
				case 233:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			SchemaObjectName @object = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				openRowsetTableReference.Object = @object;
			}
			IL_237:
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(openRowsetTableReference, token);
			}
			this.simpleTableReferenceAliasOpt(openRowsetTableReference);
			return openRowsetTableReference;
		}

		// Token: 0x0600175C RID: 5980 RVA: 0x000A8DF0 File Offset: 0x000A6FF0
		public InternalOpenRowset internalOpenRowsetArgs()
		{
			InternalOpenRowset internalOpenRowset = base.FragmentFactory.CreateFragment<InternalOpenRowset>();
			Identifier identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				internalOpenRowset.Identifier = identifier;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				ScalarExpression item = this.possibleNegativeConstant();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(internalOpenRowset, internalOpenRowset.VarArgs, item);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(internalOpenRowset, token);
			}
			this.simpleTableReferenceAliasOpt(internalOpenRowset);
			return internalOpenRowset;
		}

		// Token: 0x0600175D RID: 5981 RVA: 0x000A8E94 File Offset: 0x000A7094
		public BulkOpenRowset openRowsetBulk()
		{
			BulkOpenRowset bulkOpenRowset = base.FragmentFactory.CreateFragment<BulkOpenRowset>();
			int encounteredOptions = 34866;
			this.match(17);
			StringLiteral stringLiteral = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				bulkOpenRowset.DataFile = stringLiteral;
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				BulkInsertOption bulkInsertOption = this.openRowsetBulkHint();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)bulkInsertOption.OptionKind, bulkInsertOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<BulkInsertOption>(bulkOpenRowset, bulkOpenRowset.Options, bulkInsertOption);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql90ParserBaseInternal.CheckForFormatFileOptionInOpenRowsetBulk(encounteredOptions, stringLiteral);
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkOpenRowset, token);
			}
			this.simpleTableReferenceAliasOpt(bulkOpenRowset);
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				this.columnNameList(bulkOpenRowset, bulkOpenRowset.Columns);
			}
			else if (!TSql90ParserInternal.tokenSet_103_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return bulkOpenRowset;
		}

		// Token: 0x0600175E RID: 5982 RVA: 0x000A8FD0 File Offset: 0x000A71D0
		public BulkInsertOption openRowsetBulkHint()
		{
			BulkInsertOption result;
			if (this.LA(1) == 232 && (this.LA(2) == 192 || this.LA(2) == 198))
			{
				result = this.openRowsetBulkHintNoValue();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.simpleBulkInsertOptionWithValue();
			}
			return result;
		}

		// Token: 0x0600175F RID: 5983 RVA: 0x000A904C File Offset: 0x000A724C
		public BulkInsertOption openRowsetBulkHintNoValue()
		{
			BulkInsertOption bulkInsertOption = base.FragmentFactory.CreateFragment<BulkInsertOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				bulkInsertOption.OptionKind = OpenRowsetBulkHintOptionsHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(bulkInsertOption, token);
			}
			return bulkInsertOption;
		}

		// Token: 0x06001760 RID: 5984 RVA: 0x000A90A0 File Offset: 0x000A72A0
		public AdHocDataSource adhocDataSource()
		{
			AdHocDataSource adHocDataSource = base.FragmentFactory.CreateFragment<AdHocDataSource>();
			IToken token = this.LT(1);
			this.match(107);
			this.match(191);
			StringLiteral providerName = this.stringLiteral();
			this.match(198);
			StringLiteral initString = this.stringLiteral();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(adHocDataSource, token);
				adHocDataSource.ProviderName = providerName;
				adHocDataSource.InitString = initString;
				TSql80ParserBaseInternal.UpdateTokenInfo(adHocDataSource, token2);
			}
			return adHocDataSource;
		}

		// Token: 0x06001761 RID: 5985 RVA: 0x000A9130 File Offset: 0x000A7330
		public SchemaObjectNameOrValueExpression objectOrString()
		{
			SchemaObjectNameOrValueExpression schemaObjectNameOrValueExpression = base.FragmentFactory.CreateFragment<SchemaObjectNameOrValueExpression>();
			int num = this.LA(1);
			if (num != 200)
			{
				switch (num)
				{
				case 230:
				case 231:
				{
					Literal valueExpression = this.stringLiteral();
					if (this.inputState.guessing == 0)
					{
						schemaObjectNameOrValueExpression.ValueExpression = valueExpression;
						return schemaObjectNameOrValueExpression;
					}
					return schemaObjectNameOrValueExpression;
				}
				case 232:
				case 233:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				schemaObjectNameOrValueExpression.SchemaObjectName = schemaObjectName;
			}
			return schemaObjectNameOrValueExpression;
		}

		// Token: 0x06001762 RID: 5986 RVA: 0x000A91C8 File Offset: 0x000A73C8
		public void simpleTableHints(TSqlFragment vParent, IList<TableHint> hints)
		{
			IToken token = this.LT(1);
			this.match(171);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			if (this.LA(1) == 191 && this.LA(2) == 221)
			{
				IndexTableHint item = this.oldForceIndex();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TableHint>(vParent, hints, item);
					return;
				}
				return;
			}
			else
			{
				if (this.LA(1) == 191 && (this.LA(2) == 78 || this.LA(2) == 84 || this.LA(2) == 232))
				{
					this.tableHints(vParent, hints, true);
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001763 RID: 5987 RVA: 0x000A9288 File Offset: 0x000A7488
		public TableHint tableHint(bool indexHintAllowed)
		{
			int num = this.LA(1);
			if (num != 78)
			{
				if (num == 84)
				{
					return this.indexTableHint(indexHintAllowed);
				}
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			return this.simpleTableHint();
		}

		// Token: 0x06001764 RID: 5988 RVA: 0x000A92D8 File Offset: 0x000A74D8
		public TableHint simpleTableHint()
		{
			TableHint tableHint = base.FragmentFactory.CreateFragment<TableHint>();
			int num = this.LA(1);
			if (num != 78)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					tableHint.HintKind = TableHintOptionsHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
					TSql80ParserBaseInternal.UpdateTokenInfo(tableHint, token);
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(78);
				if (this.inputState.guessing == 0)
				{
					tableHint.HintKind = TableHintKind.HoldLock;
					TSql80ParserBaseInternal.UpdateTokenInfo(tableHint, token2);
				}
			}
			return tableHint;
		}

		// Token: 0x06001765 RID: 5989 RVA: 0x000A9388 File Offset: 0x000A7588
		public IndexTableHint indexTableHint(bool indexHintAllowed)
		{
			IndexTableHint indexTableHint = base.FragmentFactory.CreateFragment<IndexTableHint>();
			IToken token = this.LT(1);
			this.match(84);
			if (this.inputState.guessing == 0)
			{
				if (!indexHintAllowed)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46074", token, TSqlParserResource.SQL46074Message, new string[0]);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token);
				indexTableHint.HintKind = TableHintKind.Index;
			}
			int num = this.LA(1);
			if (num != 191)
			{
				if (num != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(206);
				IdentifierOrValueExpression item = this.identifierOrInteger();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(indexTableHint, indexTableHint.IndexValues, item);
				}
			}
			else
			{
				this.match(191);
				IdentifierOrValueExpression item = this.identifierOrInteger();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(indexTableHint, indexTableHint.IndexValues, item);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					item = this.identifierOrInteger();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IdentifierOrValueExpression>(indexTableHint, indexTableHint.IndexValues, item);
					}
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(indexTableHint, token2);
				}
			}
			return indexTableHint;
		}

		// Token: 0x06001766 RID: 5990 RVA: 0x000A94E4 File Offset: 0x000A76E4
		public IdentifierOrValueExpression identifierOrInteger()
		{
			IdentifierOrValueExpression identifierOrValueExpression = base.FragmentFactory.CreateFragment<IdentifierOrValueExpression>();
			int num = this.LA(1);
			if (num != 221)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						identifierOrValueExpression.Identifier = identifier;
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				Literal valueExpression = this.integer();
				if (this.inputState.guessing == 0)
				{
					identifierOrValueExpression.ValueExpression = valueExpression;
				}
			}
			return identifierOrValueExpression;
		}

		// Token: 0x06001767 RID: 5991 RVA: 0x000A9574 File Offset: 0x000A7774
		public WhereClause whereCurrentOfCursorClause()
		{
			WhereClause whereClause = base.FragmentFactory.CreateFragment<WhereClause>();
			IToken token = this.LT(1);
			this.match(169);
			this.match(37);
			this.match(102);
			CursorId cursor = this.cursorId();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(whereClause, token);
				whereClause.Cursor = cursor;
			}
			return whereClause;
		}

		// Token: 0x06001768 RID: 5992 RVA: 0x000A95D8 File Offset: 0x000A77D8
		public ExpressionGroupingSpecification simpleGroupByItem()
		{
			ExpressionGroupingSpecification expressionGroupingSpecification = base.FragmentFactory.CreateFragment<ExpressionGroupingSpecification>();
			ScalarExpression expression = this.expression();
			if (this.inputState.guessing == 0)
			{
				expressionGroupingSpecification.Expression = expression;
			}
			return expressionGroupingSpecification;
		}

		// Token: 0x06001769 RID: 5993 RVA: 0x000A9610 File Offset: 0x000A7810
		public ExpressionWithSortOrder expressionWithSortOrder()
		{
			ExpressionWithSortOrder expressionWithSortOrder = base.FragmentFactory.CreateFragment<ExpressionWithSortOrder>();
			ScalarExpression expression = this.expression();
			if (this.inputState.guessing == 0)
			{
				expressionWithSortOrder.Expression = expression;
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return expressionWithSortOrder;
						}
						switch (num)
						{
						case 4:
						case 6:
							return expressionWithSortOrder;
						case 5:
							goto IL_2E7;
						default:
							switch (num)
							{
							case 10:
								break;
							case 11:
							case 14:
							case 16:
								goto IL_2E7;
							case 12:
							case 13:
							case 15:
							case 17:
								return expressionWithSortOrder;
							default:
								goto IL_2E7;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return expressionWithSortOrder;
						default:
							switch (num)
							{
							case 28:
							case 29:
								return expressionWithSortOrder;
							default:
								switch (num)
								{
								case 33:
								case 35:
									return expressionWithSortOrder;
								case 34:
									goto IL_2E7;
								default:
									goto IL_2E7;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 59:
					case 60:
					case 61:
					case 64:
					case 67:
						return expressionWithSortOrder;
					case 47:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 62:
					case 63:
					case 65:
					case 66:
						goto IL_2E7;
					case 50:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return expressionWithSortOrder;
						default:
							if (num != 82)
							{
								goto IL_2E7;
							}
							return expressionWithSortOrder;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 86:
					case 87:
						return expressionWithSortOrder;
					default:
						if (num != 92 && num != 95)
						{
							goto IL_2E7;
						}
						return expressionWithSortOrder;
					}
				}
				SortOrder sortOrder = this.orderByOption(expressionWithSortOrder);
				if (this.inputState.guessing == 0)
				{
					expressionWithSortOrder.SortOrder = sortOrder;
					return expressionWithSortOrder;
				}
				return expressionWithSortOrder;
			}
			else if (num <= 176)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 111 || num == 119)
					{
						return expressionWithSortOrder;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return expressionWithSortOrder;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 158:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return expressionWithSortOrder;
						case 157:
						case 159:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								return expressionWithSortOrder;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 180:
				case 181:
					return expressionWithSortOrder;
				default:
					switch (num)
					{
					case 191:
					case 192:
						return expressionWithSortOrder;
					default:
						if (num == 198)
						{
							return expressionWithSortOrder;
						}
						break;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return expressionWithSortOrder;
				}
				switch (num)
				{
				case 219:
				case 220:
					return expressionWithSortOrder;
				default:
					if (num == 232)
					{
						return expressionWithSortOrder;
					}
					break;
				}
			}
			IL_2E7:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600176A RID: 5994 RVA: 0x000A9918 File Offset: 0x000A7B18
		public ComputeFunction computeFunction()
		{
			ComputeFunction computeFunction = base.FragmentFactory.CreateFragment<ComputeFunction>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				computeFunction.ComputeFunctionType = ComputeFunctionTypeHelper.Instance.ParseOption(token);
			}
			this.match(191);
			ScalarExpression expression = this.expression();
			if (this.inputState.guessing == 0)
			{
				computeFunction.Expression = expression;
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(computeFunction, token2);
			}
			return computeFunction;
		}

		// Token: 0x0600176B RID: 5995 RVA: 0x000A99B4 File Offset: 0x000A7BB4
		public SortOrder orderByOption(TSqlFragment vParent)
		{
			SortOrder result = SortOrder.NotSpecified;
			int num = this.LA(1);
			if (num != 10)
			{
				if (num != 50)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(50);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					result = SortOrder.Descending;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(10);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					result = SortOrder.Ascending;
				}
			}
			return result;
		}

		// Token: 0x0600176C RID: 5996 RVA: 0x000A9A40 File Offset: 0x000A7C40
		public UpdateForClause updateForClause()
		{
			UpdateForClause updateForClause = base.FragmentFactory.CreateFragment<UpdateForClause>();
			IToken token = this.LT(1);
			this.match(160);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateForClause, token);
			}
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return updateForClause;
						}
						switch (num)
						{
						case 4:
						case 6:
							return updateForClause;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return updateForClause;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return updateForClause;
						default:
							if (num == 28)
							{
								return updateForClause;
							}
							switch (num)
							{
							case 33:
							case 35:
								return updateForClause;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return updateForClause;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return updateForClause;
						default:
							if (num == 82)
							{
								return updateForClause;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return updateForClause;
				}
			}
			else if (num <= 162)
			{
				if (num <= 111)
				{
					if (num == 102)
					{
						this.match(102);
						ColumnReferenceExpression item = this.column();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(updateForClause, updateForClause.Columns, item);
						}
						while (this.LA(1) == 198)
						{
							this.match(198);
							item = this.column();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(updateForClause, updateForClause.Columns, item);
							}
						}
						return updateForClause;
					}
					if (num == 106 || num == 111)
					{
						return updateForClause;
					}
				}
				else
				{
					if (num == 119)
					{
						return updateForClause;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return updateForClause;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return updateForClause;
						}
						break;
					}
				}
			}
			else if (num <= 181)
			{
				switch (num)
				{
				case 167:
				case 170:
				case 171:
				case 172:
					return updateForClause;
				case 168:
				case 169:
					break;
				default:
					if (num == 176)
					{
						return updateForClause;
					}
					switch (num)
					{
					case 180:
					case 181:
						return updateForClause;
					}
					break;
				}
			}
			else if (num <= 204)
			{
				if (num == 191 || num == 204)
				{
					return updateForClause;
				}
			}
			else
			{
				switch (num)
				{
				case 219:
				case 220:
					return updateForClause;
				default:
					if (num == 232)
					{
						return updateForClause;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600176D RID: 5997 RVA: 0x000A9D7C File Offset: 0x000A7F7C
		public XmlForClauseOption xmlForClauseMode()
		{
			XmlForClauseOption xmlForClauseOption = base.FragmentFactory.CreateFragment<XmlForClauseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				xmlForClauseOption.OptionKind = XmlForClauseModeHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token);
			}
			if (this.LA(1) == 191 && (this.LA(2) == 230 || this.LA(2) == 231))
			{
				IToken token2 = this.LT(1);
				this.match(191);
				Literal value = this.stringLiteral();
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					if (xmlForClauseOption.OptionKind == XmlForClauseOptions.Explicit || xmlForClauseOption.OptionKind == XmlForClauseOptions.Auto)
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
					}
					xmlForClauseOption.Value = value;
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token3);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_117_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return xmlForClauseOption;
		}

		// Token: 0x0600176E RID: 5998 RVA: 0x000A9EA0 File Offset: 0x000A80A0
		public XmlForClauseOption xmlParam(XmlForClauseOptions encountered)
		{
			XmlForClauseOption xmlForClauseOption = base.FragmentFactory.CreateFragment<XmlForClauseOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.LA(1) == 191 && (this.LA(2) == 230 || this.LA(2) == 231))
			{
				IToken token2 = this.LT(1);
				this.match(191);
				Literal value = this.stringLiteral();
				IToken token3 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					if (!TSql80ParserBaseInternal.TryMatch(token, "XMLSCHEMA") && !TSql80ParserBaseInternal.TryMatch(token, "ROOT"))
					{
						throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
					}
					xmlForClauseOption.Value = value;
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token3);
				}
			}
			else if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_117_.member(this.LA(2)))
			{
				IToken token4 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					if (TSql80ParserBaseInternal.TryMatch(token, "BINARY"))
					{
						TSql80ParserBaseInternal.Match(token4, "BASE64");
						xmlForClauseOption.OptionKind = XmlForClauseOptions.BinaryBase64;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "ELEMENTS");
						if (TSql80ParserBaseInternal.TryMatch(token4, "XSINIL"))
						{
							xmlForClauseOption.OptionKind = XmlForClauseOptions.ElementsXsiNil;
						}
						else
						{
							TSql80ParserBaseInternal.Match(token4, "ABSENT");
							xmlForClauseOption.OptionKind = XmlForClauseOptions.ElementsAbsent;
						}
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token4);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_117_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0)
			{
				if (xmlForClauseOption.OptionKind == XmlForClauseOptions.None)
				{
					xmlForClauseOption.OptionKind = XmlForClauseOptionsHelper.Instance.ParseOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlForClauseOption, token);
				}
				TSql80ParserBaseInternal.CheckXmlForClauseOptionDuplication(encountered, xmlForClauseOption.OptionKind, token);
			}
			return xmlForClauseOption;
		}

		// Token: 0x0600176F RID: 5999 RVA: 0x000AA0A4 File Offset: 0x000A82A4
		public OptimizerHint hint()
		{
			OptimizerHint result;
			if (this.LA(1) == 232 && this.LA(2) == 221)
			{
				result = this.literalOptimizerHint();
			}
			else if ((this.LA(1) == 113 || this.LA(1) == 232) && TSql90ParserInternal.tokenSet_118_.member(this.LA(2)))
			{
				result = this.simpleOptimizerHint();
			}
			else if (this.LA(1) == 162)
			{
				result = this.usePlanOptimizerHint();
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 67)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.optimizeForOptimizerHint();
			}
			return result;
		}

		// Token: 0x06001770 RID: 6000 RVA: 0x000AA15C File Offset: 0x000A835C
		public LiteralOptimizerHint literalOptimizerHint()
		{
			LiteralOptimizerHint literalOptimizerHint = base.FragmentFactory.CreateFragment<LiteralOptimizerHint>();
			IToken token = this.LT(1);
			this.match(232);
			Literal value = this.integer();
			if (this.inputState.guessing == 0)
			{
				literalOptimizerHint.HintKind = IntegerOptimizerHintHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
				literalOptimizerHint.Value = value;
			}
			return literalOptimizerHint;
		}

		// Token: 0x06001771 RID: 6001 RVA: 0x000AA1B8 File Offset: 0x000A83B8
		public OptimizerHint simpleOptimizerHint()
		{
			OptimizerHint optimizerHint = base.FragmentFactory.CreateFragment<OptimizerHint>();
			if (this.LA(1) == 232 && this.LA(2) == 90)
			{
				IToken token = this.LT(1);
				this.match(232);
				this.match(90);
				if (this.inputState.guessing == 0)
				{
					optimizerHint.HintKind = TSql80ParserBaseInternal.ParseJoinOptimizerHint(token);
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 158)
			{
				IToken token2 = this.LT(1);
				this.match(232);
				this.match(158);
				if (this.inputState.guessing == 0)
				{
					optimizerHint.HintKind = TSql80ParserBaseInternal.ParseUnionOptimizerHint(token2);
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 113)
			{
				IToken token3 = this.LT(1);
				this.match(232);
				this.match(113);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token3, "FORCE");
					optimizerHint.HintKind = OptimizerHintKind.ForceOrder;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 76)
			{
				IToken token4 = this.LT(1);
				this.match(232);
				this.match(76);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token4, "HASH");
					optimizerHint.HintKind = OptimizerHintKind.HashGroup;
				}
			}
			else if (this.LA(1) == 113)
			{
				this.LT(1);
				this.match(113);
				this.match(76);
				if (this.inputState.guessing == 0)
				{
					optimizerHint.HintKind = OptimizerHintKind.OrderGroup;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 117)
			{
				IToken token5 = this.LT(1);
				this.match(232);
				this.match(117);
				if (this.inputState.guessing == 0)
				{
					optimizerHint.HintKind = PlanOptimizerHintHelper.Instance.ParseOption(token5, SqlVersionFlags.TSql90);
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 232)
			{
				IToken token6 = this.LT(1);
				this.match(232);
				IToken token7 = this.LT(1);
				this.match(232);
				int num = this.LA(1);
				if (num != 158)
				{
					if (num != 192 && num != 198)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (this.inputState.guessing == 0)
					{
						if (TSql80ParserBaseInternal.TryMatch(token6, "EXPAND"))
						{
							TSql80ParserBaseInternal.Match(token7, "VIEWS");
							optimizerHint.HintKind = OptimizerHintKind.ExpandViews;
						}
						else if (TSql80ParserBaseInternal.TryMatch(token6, "PARAMETERIZATION"))
						{
							if (TSql80ParserBaseInternal.TryMatch(token7, "SIMPLE"))
							{
								optimizerHint.HintKind = OptimizerHintKind.ParameterizationSimple;
							}
							else
							{
								TSql80ParserBaseInternal.Match(token7, "FORCED");
								optimizerHint.HintKind = OptimizerHintKind.ParameterizationForced;
							}
						}
						else
						{
							TSql80ParserBaseInternal.Match(token6, "BYPASS");
							TSql80ParserBaseInternal.Match(token7, "OPTIMIZER_QUEUE");
							optimizerHint.HintKind = OptimizerHintKind.BypassOptimizerQueue;
						}
					}
				}
				else
				{
					this.LT(1);
					this.match(158);
					this.match(5);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token6, "OPTIMIZE");
						TSql80ParserBaseInternal.Match(token7, "CORRELATED");
						optimizerHint.HintKind = OptimizerHintKind.OptimizeCorrelatedUnionAll;
					}
				}
			}
			else
			{
				if (this.LA(1) != 232 || (this.LA(2) != 192 && this.LA(2) != 198))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token8 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token8, "RECOMPILE");
					optimizerHint.HintKind = OptimizerHintKind.Recompile;
				}
			}
			return optimizerHint;
		}

		// Token: 0x06001772 RID: 6002 RVA: 0x000AA5D4 File Offset: 0x000A87D4
		public LiteralOptimizerHint usePlanOptimizerHint()
		{
			LiteralOptimizerHint literalOptimizerHint = base.FragmentFactory.CreateFragment<LiteralOptimizerHint>();
			this.LT(1);
			this.match(162);
			this.match(117);
			Literal value = this.stringLiteral();
			if (this.inputState.guessing == 0)
			{
				literalOptimizerHint.HintKind = OptimizerHintKind.UsePlan;
				literalOptimizerHint.Value = value;
			}
			return literalOptimizerHint;
		}

		// Token: 0x06001773 RID: 6003 RVA: 0x000AA62C File Offset: 0x000A882C
		public OptimizeForOptimizerHint optimizeForOptimizerHint()
		{
			OptimizeForOptimizerHint optimizeForOptimizerHint = base.FragmentFactory.CreateFragment<OptimizeForOptimizerHint>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(67);
			this.match(191);
			VariableValuePair item = this.variableValuePair();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "OPTIMIZE");
				optimizeForOptimizerHint.HintKind = OptimizerHintKind.OptimizeFor;
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<VariableValuePair>(optimizeForOptimizerHint, optimizeForOptimizerHint.Pairs, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.variableValuePair();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<VariableValuePair>(optimizeForOptimizerHint, optimizeForOptimizerHint.Pairs, item);
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(optimizeForOptimizerHint, token2);
			}
			return optimizeForOptimizerHint;
		}

		// Token: 0x06001774 RID: 6004 RVA: 0x000AA708 File Offset: 0x000A8908
		public VariableValuePair variableValuePair()
		{
			VariableValuePair variableValuePair = base.FragmentFactory.CreateFragment<VariableValuePair>();
			VariableReference variable = this.variable();
			this.match(206);
			ValueExpression value = this.literal();
			if (this.inputState.guessing == 0)
			{
				variableValuePair.Variable = variable;
				variableValuePair.Value = value;
			}
			return variableValuePair;
		}

		// Token: 0x06001775 RID: 6005 RVA: 0x000AA758 File Offset: 0x000A8958
		public ValueExpression literal()
		{
			int num = this.LA(1);
			ValueExpression result;
			if (num != 100)
			{
				if (num != 193)
				{
					switch (num)
					{
					case 221:
						return this.integer();
					case 222:
						return this.numeric();
					case 223:
						return this.real();
					case 224:
						return this.binary();
					case 225:
						return this.moneyLiteral();
					case 230:
					case 231:
						return this.stringLiteral();
					case 234:
						return this.globalVariableOrVariableReference();
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.odbcLiteral();
			}
			else
			{
				result = this.nullLiteral();
			}
			return result;
		}

		// Token: 0x06001776 RID: 6006 RVA: 0x000AA82C File Offset: 0x000A8A2C
		public void viewStatementBody(ViewStatementBody vResult)
		{
			int num = 0;
			this.match(166);
			SchemaObjectName schemaObjectName = this.schemaObjectTwoPartName();
			if (this.inputState.guessing == 0)
			{
				vResult.SchemaObjectName = schemaObjectName;
				TSql80ParserBaseInternal.CheckForTemporaryView(schemaObjectName);
				base.ThrowPartialAstIfPhaseOne(vResult);
			}
			int num2 = this.LA(1);
			if (num2 != 9 && num2 != 171)
			{
				if (num2 != 191)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.columnNameList(vResult, vResult.Columns);
			}
			int num3 = this.LA(1);
			if (num3 != 9)
			{
				if (num3 != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				ViewOption viewOption = this.viewOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)viewOption.OptionKind, viewOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ViewOption>(vResult, vResult.ViewOptions, viewOption);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					viewOption = this.viewOption();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)viewOption.OptionKind, viewOption);
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ViewOption>(vResult, vResult.ViewOptions, viewOption);
					}
				}
			}
			IToken token = this.LT(1);
			this.match(9);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
			}
			SelectStatement selectStatement = this.subqueryExpressionWithOptionalCTE();
			if (this.inputState.guessing == 0)
			{
				vResult.SelectStatement = selectStatement;
			}
			int num4 = this.LA(1);
			if (num4 <= 75)
			{
				if (num4 <= 35)
				{
					if (num4 == 1 || num4 == 35)
					{
						return;
					}
				}
				else if (num4 == 49 || num4 == 75)
				{
					return;
				}
			}
			else if (num4 <= 171)
			{
				if (num4 == 132)
				{
					return;
				}
				if (num4 == 171)
				{
					this.match(171);
					this.match(21);
					IToken token2 = this.LT(1);
					this.match(111);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token2);
						vResult.WithCheckOption = true;
						return;
					}
					return;
				}
			}
			else if (num4 == 204 || num4 == 219)
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001777 RID: 6007 RVA: 0x000AAA74 File Offset: 0x000A8C74
		public ViewOption viewOption()
		{
			ViewOption viewOption = base.FragmentFactory.CreateFragment<ViewOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				viewOption.OptionKind = ViewOptionHelper.Instance.ParseOption(token);
				TSql80ParserBaseInternal.UpdateTokenInfo(viewOption, token);
			}
			return viewOption;
		}

		// Token: 0x06001778 RID: 6008 RVA: 0x000AAAC8 File Offset: 0x000A8CC8
		public TriggerOption triggerOption(bool vOwnerProhibited)
		{
			TriggerOption triggerOption = null;
			int num = this.LA(1);
			switch (num)
			{
			case 60:
			case 61:
			{
				ExecuteAsClause executeAsClause = this.executeAsClause(false, vOwnerProhibited);
				if (this.inputState.guessing == 0)
				{
					ExecuteAsTriggerOption executeAsTriggerOption = base.FragmentFactory.CreateFragment<ExecuteAsTriggerOption>();
					executeAsTriggerOption.OptionKind = TriggerOptionKind.ExecuteAsClause;
					executeAsTriggerOption.ExecuteAsClause = executeAsClause;
					triggerOption = executeAsTriggerOption;
				}
				break;
			}
			default:
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					triggerOption = base.FragmentFactory.CreateFragment<TriggerOption>();
					triggerOption.OptionKind = TriggerOptionHelper.Instance.ParseOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(triggerOption, token);
				}
				break;
			}
			}
			return triggerOption;
		}

		// Token: 0x06001779 RID: 6009 RVA: 0x000AAB8C File Offset: 0x000A8D8C
		public void procedureOptions(ProcedureStatementBody vParent)
		{
			int num = 0;
			this.match(171);
			ProcedureOption procedureOption = this.procedureOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)procedureOption.OptionKind, procedureOption);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureOption>(vParent, vParent.Options, procedureOption);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				procedureOption = this.procedureOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckOptionDuplication(ref num, (int)procedureOption.OptionKind, procedureOption);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureOption>(vParent, vParent.Options, procedureOption);
				}
			}
		}

		// Token: 0x0600177A RID: 6010 RVA: 0x000AAC20 File Offset: 0x000A8E20
		public ProcedureOption procedureOption()
		{
			ProcedureOption procedureOption = null;
			int num = this.LA(1);
			switch (num)
			{
			case 60:
			case 61:
			{
				ExecuteAsClause executeAs = this.executeAsClause(false, false);
				if (this.inputState.guessing == 0)
				{
					ExecuteAsProcedureOption executeAsProcedureOption = base.FragmentFactory.CreateFragment<ExecuteAsProcedureOption>();
					executeAsProcedureOption.ExecuteAs = executeAs;
					executeAsProcedureOption.OptionKind = ProcedureOptionKind.ExecuteAs;
					procedureOption = executeAsProcedureOption;
				}
				break;
			}
			default:
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					procedureOption = base.FragmentFactory.CreateFragment<ProcedureOption>();
					procedureOption.OptionKind = ProcedureOptionHelper.Instance.ParseOption(token);
					TSql80ParserBaseInternal.UpdateTokenInfo(procedureOption, token);
				}
				break;
			}
			}
			return procedureOption;
		}

		// Token: 0x0600177B RID: 6011 RVA: 0x000AACE4 File Offset: 0x000A8EE4
		public void procedureStatementBody(ProcedureStatementBody vResult, out bool vParseErrorOccurred)
		{
			vParseErrorOccurred = false;
			try
			{
				switch (this.LA(1))
				{
				case 120:
					this.match(120);
					break;
				case 121:
					this.match(121);
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				ProcedureReference procedureReference = this.procedureReference();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(procedureReference.Name, "PROCEDURE");
					vResult.ProcedureReference = procedureReference;
				}
				if (this.inputState.guessing == 0)
				{
					base.ThrowPartialAstIfPhaseOne(vResult);
				}
				this.procedureParameterListOptionalParen(vResult);
				int num = this.LA(1);
				if (num != 9 && num != 67)
				{
					if (num != 171)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.procedureOptions(vResult);
				}
				int num2 = this.LA(1);
				if (num2 != 9)
				{
					if (num2 != 67)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(67);
					this.match(128);
					if (this.inputState.guessing == 0)
					{
						vResult.IsForReplication = true;
					}
				}
				IToken token = this.LT(1);
				this.match(9);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
				}
				int num3 = this.LA(1);
				if (num3 <= 86)
				{
					if (num3 <= 28)
					{
						if (num3 <= 6)
						{
							if (num3 != 1)
							{
								switch (num3)
								{
								case 4:
								case 6:
									break;
								case 5:
									goto IL_492;
								default:
									goto IL_492;
								}
							}
						}
						else
						{
							switch (num3)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								break;
							case 14:
							case 16:
								goto IL_492;
							default:
								switch (num3)
								{
								case 22:
								case 23:
									break;
								default:
									if (num3 != 28)
									{
										goto IL_492;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num3 <= 64)
					{
						switch (num3)
						{
						case 33:
						case 35:
							break;
						case 34:
							goto IL_492;
						default:
							switch (num3)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 56:
								break;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 55:
								goto IL_492;
							default:
								switch (num3)
								{
								case 60:
								case 61:
								case 64:
									break;
								case 62:
								case 63:
									goto IL_492;
								default:
									goto IL_492;
								}
								break;
							}
							break;
						}
					}
					else
					{
						switch (num3)
						{
						case 74:
						case 75:
							break;
						default:
							if (num3 != 82 && num3 != 86)
							{
								goto IL_492;
							}
							break;
						}
					}
				}
				else if (num3 <= 144)
				{
					if (num3 <= 95)
					{
						if (num3 != 92 && num3 != 95)
						{
							goto IL_492;
						}
					}
					else if (num3 != 106 && num3 != 119)
					{
						switch (num3)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							break;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							goto IL_492;
						default:
							goto IL_492;
						}
					}
				}
				else if (num3 <= 191)
				{
					switch (num3)
					{
					case 156:
					case 160:
					case 161:
					case 162:
						break;
					case 157:
					case 158:
					case 159:
						goto IL_492;
					default:
						switch (num3)
						{
						case 167:
						case 170:
						case 171:
						case 172:
						case 176:
						case 180:
						case 181:
							break;
						case 168:
						case 169:
						case 173:
						case 174:
						case 177:
						case 178:
						case 179:
							goto IL_492;
						case 175:
						{
							MethodSpecifier methodSpecifier = this.methodSpecifier();
							this.optSemicolons(vResult);
							if (this.inputState.guessing == 0)
							{
								vResult.MethodSpecifier = methodSpecifier;
								goto IL_4A5;
							}
							goto IL_4A5;
						}
						default:
							if (num3 != 191)
							{
								goto IL_492;
							}
							break;
						}
						break;
					}
				}
				else if (num3 != 204)
				{
					switch (num3)
					{
					case 219:
					case 220:
						break;
					default:
						if (num3 != 232)
						{
							goto IL_492;
						}
						break;
					}
				}
				if (TSql90ParserInternal.tokenSet_24_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					while (this.LA(1) == 204)
					{
						this.match(204);
					}
					StatementList statementList = this.statementList(ref vParseErrorOccurred);
					if (this.inputState.guessing == 0)
					{
						vResult.StatementList = statementList;
						goto IL_4A5;
					}
					goto IL_4A5;
				}
				else
				{
					if ((this.LA(1) != 1 && this.LA(1) != 204 && this.LA(1) != 219) || !TSql90ParserInternal.tokenSet_119_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					goto IL_4A5;
				}
				IL_492:
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_4A5:;
			}
			catch (NoViableAltException)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				if (!base.PhaseOne || vResult == null || vResult.ProcedureReference == null || vResult.ProcedureReference.Name == null)
				{
					throw;
				}
				base.ThrowPartialAstIfPhaseOne(vResult);
			}
		}

		// Token: 0x0600177C RID: 6012 RVA: 0x000AB1F4 File Offset: 0x000A93F4
		public ProcedureReference procedureReference()
		{
			ProcedureReference procedureReference = base.FragmentFactory.CreateFragment<ProcedureReference>();
			SchemaObjectName name = this.schemaObjectFourPartName();
			Literal number = this.procNumOpt();
			if (this.inputState.guessing == 0)
			{
				procedureReference.Name = name;
				procedureReference.Number = number;
			}
			return procedureReference;
		}

		// Token: 0x0600177D RID: 6013 RVA: 0x000AB238 File Offset: 0x000A9438
		public void procedureParameterListOptionalParen(ProcedureStatementBodyBase vResult)
		{
			int num = this.LA(1);
			if (num <= 67)
			{
				if (num != 9 && num != 67)
				{
					goto IL_B6;
				}
			}
			else if (num != 171)
			{
				if (num != 191)
				{
					if (num != 234)
					{
						goto IL_B6;
					}
				}
				else
				{
					this.match(191);
					this.procedureParameterList(vResult);
					IToken token = this.LT(1);
					this.match(192);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
						return;
					}
					return;
				}
			}
			int num2 = this.LA(1);
			if (num2 <= 67)
			{
				if (num2 == 9 || num2 == 67)
				{
					return;
				}
			}
			else
			{
				if (num2 == 171)
				{
					return;
				}
				if (num2 == 234)
				{
					this.procedureParameterList(vResult);
					return;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_B6:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600177E RID: 6014 RVA: 0x000AB310 File Offset: 0x000A9510
		public void procedureParameterList(ProcedureStatementBodyBase vResult)
		{
			ProcedureParameter item = this.procedureParameter();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(vResult, vResult.Parameters, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.procedureParameter();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ProcedureParameter>(vResult, vResult.Parameters, item);
				}
			}
		}

		// Token: 0x0600177F RID: 6015 RVA: 0x000AB37C File Offset: 0x000A957C
		public ProcedureParameter procedureParameter()
		{
			ProcedureParameter procedureParameter = base.FragmentFactory.CreateFragment<ProcedureParameter>();
			Identifier variableName = this.identifierVariable();
			int num = this.LA(1);
			if (num <= 42)
			{
				if (num == 9)
				{
					this.match(9);
					goto IL_69;
				}
				if (num == 42)
				{
					goto IL_69;
				}
			}
			else
			{
				if (num == 53 || num == 96)
				{
					goto IL_69;
				}
				switch (num)
				{
				case 232:
				case 233:
					goto IL_69;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_69:
			if (this.inputState.guessing == 0)
			{
				procedureParameter.VariableName = variableName;
			}
			int num2 = this.LA(1);
			if (num2 <= 53)
			{
				if (num2 == 42)
				{
					this.cursorProcedureParameter(procedureParameter);
					return procedureParameter;
				}
				if (num2 != 53)
				{
					goto IL_C4;
				}
			}
			else if (num2 != 96)
			{
				switch (num2)
				{
				case 232:
				case 233:
					break;
				default:
					goto IL_C4;
				}
			}
			this.scalarProcedureParameter(procedureParameter, true);
			return procedureParameter;
			IL_C4:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001780 RID: 6016 RVA: 0x000AB464 File Offset: 0x000A9664
		public void cursorProcedureParameter(ProcedureParameter vParent)
		{
			DataTypeReference dataType = this.cursorDataType();
			if (this.inputState.guessing == 0)
			{
				vParent.DataType = dataType;
			}
			IToken token = this.LT(1);
			this.match(165);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.IsVarying = true;
			}
			IToken token2 = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token2, "OUTPUT", "OUT");
				vParent.Modifier = ParameterModifier.Output;
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
			}
		}

		// Token: 0x06001781 RID: 6017 RVA: 0x000AB4FC File Offset: 0x000A96FC
		public IdentifierLiteral identifierLiteral()
		{
			IdentifierLiteral identifierLiteral = base.FragmentFactory.CreateFragment<IdentifierLiteral>();
			switch (this.LA(1))
			{
			case 232:
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identifierLiteral, token);
					identifierLiteral.SetUnquotedIdentifier(token.getText());
					TSql80ParserBaseInternal.CheckIdentifierLiteralLength(identifierLiteral);
				}
				break;
			}
			case 233:
			{
				IToken token2 = this.LT(1);
				this.match(233);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identifierLiteral, token2);
					identifierLiteral.SetIdentifier(token2.getText());
					TSql80ParserBaseInternal.CheckIdentifierLiteralLength(identifierLiteral);
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return identifierLiteral;
		}

		// Token: 0x06001782 RID: 6018 RVA: 0x000AB5C4 File Offset: 0x000A97C4
		public UnaryExpression negativeConstant()
		{
			UnaryExpression unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
			IToken token = this.LT(1);
			this.match(199);
			Literal expression = this.subroutineParameterLiteral();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
				unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
				unaryExpression.Expression = expression;
			}
			return unaryExpression;
		}

		// Token: 0x06001783 RID: 6019 RVA: 0x000AB61C File Offset: 0x000A981C
		public Literal subroutineParameterLiteral()
		{
			switch (this.LA(1))
			{
			case 221:
				return this.integer();
			case 222:
				return this.numeric();
			case 223:
				return this.real();
			case 225:
				return this.moneyLiteral();
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001784 RID: 6020 RVA: 0x000AB68C File Offset: 0x000A988C
		public void triggerStatementBody(TriggerStatementBody vResult, out bool vParseErrorOccurred)
		{
			bool flag = false;
			vParseErrorOccurred = false;
			this.match(155);
			SchemaObjectName name = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.CheckTwoPartNameForSchemaObjectName(name, "TRIGGER");
				vResult.Name = name;
			}
			this.match(105);
			TriggerObject triggerObject = this.triggerObject();
			if (this.inputState.guessing == 0)
			{
				vResult.TriggerObject = triggerObject;
				base.ThrowPartialAstIfPhaseOne(vResult);
				if (vResult.TriggerObject.TriggerScope != TriggerScope.Normal)
				{
					flag = true;
				}
			}
			int num = this.LA(1);
			if (num != 67)
			{
				if (num != 171)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(171);
					TriggerOption item = this.triggerOption(flag);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerOption>(vResult, vResult.Options, item);
					}
					while (this.LA(1) == 198)
					{
						this.match(198);
						item = this.triggerOption(flag);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerOption>(vResult, vResult.Options, item);
						}
					}
				}
			}
			if ((this.LA(1) == 67 || this.LA(1) == 232) && this.LA(2) == 232 && flag)
			{
				this.ddlTriggerMidSection(vResult);
			}
			else
			{
				if ((this.LA(1) != 67 && this.LA(1) != 232) || !TSql90ParserInternal.tokenSet_120_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.dmlTriggerMidSection(vResult);
			}
			IToken token = this.LT(1);
			this.match(9);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
			}
			int num2 = this.LA(1);
			if (num2 <= 86)
			{
				if (num2 <= 35)
				{
					if (num2 <= 17)
					{
						switch (num2)
						{
						case 4:
						case 6:
							break;
						case 5:
							goto IL_48D;
						default:
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								break;
							case 14:
							case 16:
								goto IL_48D;
							default:
								goto IL_48D;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 22:
						case 23:
							break;
						default:
							if (num2 != 28)
							{
								switch (num2)
								{
								case 33:
								case 35:
									break;
								case 34:
									goto IL_48D;
								default:
									goto IL_48D;
								}
							}
							break;
						}
					}
				}
				else if (num2 <= 64)
				{
					switch (num2)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 56:
						break;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 55:
						goto IL_48D;
					default:
						switch (num2)
						{
						case 60:
						case 61:
						case 64:
							break;
						case 62:
						case 63:
							goto IL_48D;
						default:
							goto IL_48D;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 74:
					case 75:
						break;
					default:
						if (num2 != 82 && num2 != 86)
						{
							goto IL_48D;
						}
						break;
					}
				}
			}
			else if (num2 <= 144)
			{
				if (num2 <= 95)
				{
					if (num2 != 92 && num2 != 95)
					{
						goto IL_48D;
					}
				}
				else if (num2 != 106 && num2 != 119)
				{
					switch (num2)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						break;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						goto IL_48D;
					default:
						goto IL_48D;
					}
				}
			}
			else if (num2 <= 191)
			{
				switch (num2)
				{
				case 156:
				case 160:
				case 161:
				case 162:
					break;
				case 157:
				case 158:
				case 159:
					goto IL_48D;
				default:
					switch (num2)
					{
					case 167:
					case 170:
					case 171:
					case 172:
					case 176:
					case 180:
					case 181:
						break;
					case 168:
					case 169:
					case 173:
					case 174:
					case 177:
					case 178:
					case 179:
						goto IL_48D;
					case 175:
					{
						MethodSpecifier methodSpecifier = this.methodSpecifier();
						this.optSemicolons(vResult);
						if (this.inputState.guessing == 0)
						{
							vResult.MethodSpecifier = methodSpecifier;
							return;
						}
						return;
					}
					default:
						if (num2 != 191)
						{
							goto IL_48D;
						}
						break;
					}
					break;
				}
			}
			else if (num2 != 204 && num2 != 220 && num2 != 232)
			{
				goto IL_48D;
			}
			while (this.LA(1) == 204)
			{
				this.LT(1);
				this.match(204);
			}
			StatementList statementList = this.statementList(ref vParseErrorOccurred);
			if (this.inputState.guessing == 0)
			{
				vResult.StatementList = statementList;
				return;
			}
			return;
			IL_48D:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001785 RID: 6021 RVA: 0x000ABB3C File Offset: 0x000A9D3C
		public void ddlTriggerMidSection(TriggerStatementBody vParent)
		{
			int num = this.LA(1);
			if (num != 67)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "AFTER");
					vParent.TriggerType = TriggerType.After;
				}
			}
			else
			{
				this.match(67);
				if (this.inputState.guessing == 0)
				{
					vParent.TriggerType = TriggerType.For;
				}
			}
			if (this.LA(1) == 232 && (this.LA(2) == 9 || this.LA(2) == 198) && !base.NextTokenMatches("LOGON"))
			{
				TriggerAction triggerAction = this.ddlTriggerAction();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					triggerAction = this.ddlTriggerAction();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
					}
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 9)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "LOGON");
					if (vParent.TriggerObject.TriggerScope == TriggerScope.AllServer)
					{
						TriggerAction triggerAction = base.FragmentFactory.CreateFragment<TriggerAction>();
						triggerAction.TriggerActionType = TriggerActionType.LogOn;
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
						return;
					}
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46044", token2, TSqlParserResource.SQL46044Message, new string[0]);
					return;
				}
			}
		}

		// Token: 0x06001786 RID: 6022 RVA: 0x000ABD00 File Offset: 0x000A9F00
		public void dmlTriggerMidSection(TriggerStatementBody vParent)
		{
			bool flag = false;
			int current = 0;
			int num = this.LA(1);
			if (num != 67)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				int num2 = this.LA(1);
				if (num2 <= 86)
				{
					if (num2 == 48 || num2 == 86)
					{
						goto IL_BF;
					}
				}
				else if (num2 != 102)
				{
					if (num2 == 160)
					{
						goto IL_BF;
					}
				}
				else
				{
					this.LT(1);
					this.match(102);
					if (this.inputState.guessing == 0)
					{
						flag = true;
						goto IL_BF;
					}
					goto IL_BF;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_BF:
				if (this.inputState.guessing == 0)
				{
					if (flag)
					{
						TSql80ParserBaseInternal.Match(token, "INSTEAD");
						vParent.TriggerType = TriggerType.InsteadOf;
					}
					else
					{
						TSql80ParserBaseInternal.Match(token, "AFTER");
						vParent.TriggerType = TriggerType.After;
					}
				}
			}
			else
			{
				this.match(67);
				if (this.inputState.guessing == 0)
				{
					vParent.TriggerType = TriggerType.For;
				}
			}
			TriggerAction triggerAction = this.dmlTriggerAction();
			if (this.inputState.guessing == 0)
			{
				TSql90ParserBaseInternal.CheckDmlTriggerActionDuplication(current, triggerAction);
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
				TSql90ParserBaseInternal.UpdateDmlTriggerActionEncounteredOptions(ref current, triggerAction);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				triggerAction = this.dmlTriggerAction();
				if (this.inputState.guessing == 0)
				{
					TSql90ParserBaseInternal.CheckDmlTriggerActionDuplication(current, triggerAction);
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<TriggerAction>(vParent, vParent.TriggerActions, triggerAction);
					TSql90ParserBaseInternal.UpdateDmlTriggerActionEncounteredOptions(ref current, triggerAction);
				}
			}
			int num3 = this.LA(1);
			if (num3 != 9 && num3 != 99)
			{
				if (num3 != 171)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "APPEND");
					vParent.WithAppend = true;
				}
			}
			int num4 = this.LA(1);
			if (num4 != 9)
			{
				if (num4 != 99)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(99);
				this.match(67);
				this.match(128);
				if (this.inputState.guessing == 0)
				{
					vParent.IsNotForReplication = true;
					return;
				}
			}
		}

		// Token: 0x06001787 RID: 6023 RVA: 0x000ABF5C File Offset: 0x000AA15C
		public TriggerAction dmlTriggerAction()
		{
			TriggerAction triggerAction = base.FragmentFactory.CreateFragment<TriggerAction>();
			int num = this.LA(1);
			if (num != 48)
			{
				if (num != 86)
				{
					if (num != 160)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(160);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(triggerAction, token);
						triggerAction.TriggerActionType = TriggerActionType.Update;
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(86);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(triggerAction, token2);
						triggerAction.TriggerActionType = TriggerActionType.Insert;
					}
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(48);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(triggerAction, token3);
					triggerAction.TriggerActionType = TriggerActionType.Delete;
				}
			}
			return triggerAction;
		}

		// Token: 0x06001788 RID: 6024 RVA: 0x000AC040 File Offset: 0x000AA240
		public TriggerAction ddlTriggerAction()
		{
			TriggerAction triggerAction = base.FragmentFactory.CreateFragment<TriggerAction>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				triggerAction.TriggerActionType = TriggerActionType.Event;
				EventNotificationEventType eventTypeValue;
				if (TriggerEventTypeHelper.Instance.TryParseOption(token, SqlVersionFlags.TSql90, out eventTypeValue))
				{
					triggerAction.EventTypeGroup = base.CreateEventTypeContainer(eventTypeValue, token);
				}
				else
				{
					EventNotificationEventGroup eventGroupValue = TriggerEventGroupHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
					triggerAction.EventTypeGroup = base.CreateEventGroupContainer(eventGroupValue, token);
				}
			}
			return triggerAction;
		}

		// Token: 0x06001789 RID: 6025 RVA: 0x000AC0C0 File Offset: 0x000AA2C0
		public void endConversationArgumentsOpt(EndConversationStatement vParent)
		{
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				IToken token = this.LT(1);
				this.match(232);
				int num = this.LA(1);
				if (num <= 92)
				{
					if (num <= 28)
					{
						if (num <= 6)
						{
							if (num != 1)
							{
								switch (num)
								{
								case 4:
								case 6:
									break;
								case 5:
									goto IL_357;
								default:
									goto IL_357;
								}
							}
						}
						else
						{
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								break;
							case 14:
							case 16:
								goto IL_357;
							default:
								switch (num)
								{
								case 22:
								case 23:
									break;
								default:
									if (num != 28)
									{
										goto IL_357;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num <= 75)
					{
						switch (num)
						{
						case 33:
						case 35:
							break;
						case 34:
							goto IL_357;
						default:
							switch (num)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								break;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
								goto IL_357;
							default:
								switch (num)
								{
								case 74:
								case 75:
									break;
								default:
									goto IL_357;
								}
								break;
							}
							break;
						}
					}
					else if (num != 82 && num != 86 && num != 92)
					{
						goto IL_357;
					}
				}
				else if (num <= 172)
				{
					if (num <= 119)
					{
						if (num != 95 && num != 106 && num != 119)
						{
							goto IL_357;
						}
					}
					else
					{
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							break;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							goto IL_357;
						default:
							switch (num)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								break;
							case 157:
							case 158:
							case 159:
								goto IL_357;
							default:
								switch (num)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									break;
								case 168:
								case 169:
									goto IL_357;
								default:
									goto IL_357;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 191)
				{
					if (num != 176)
					{
						switch (num)
						{
						case 180:
						case 181:
							break;
						default:
							if (num != 191)
							{
								goto IL_357;
							}
							break;
						}
					}
				}
				else
				{
					switch (num)
					{
					case 204:
						break;
					case 205:
						goto IL_357;
					case 206:
					{
						this.match(206);
						ValueExpression errorCode = this.integerOrVariable();
						IToken token2 = this.LT(1);
						this.match(232);
						this.match(206);
						ValueExpression errorDescription = this.stringOrVariable();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token2, "DESCRIPTION");
							vParent.ErrorCode = errorCode;
							vParent.ErrorDescription = errorDescription;
							return;
						}
						return;
					}
					default:
						switch (num)
						{
						case 219:
						case 220:
							break;
						default:
							if (num != 232)
							{
								goto IL_357;
							}
							break;
						}
						break;
					}
				}
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "CLEANUP");
					vParent.WithCleanup = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				return;
				IL_357:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600178A RID: 6026 RVA: 0x000AC474 File Offset: 0x000AA674
		public SelectElement receiveSelectExpression()
		{
			SelectElement result;
			if (this.LA(1) == 234 && this.LA(2) == 206)
			{
				result = this.selectSetVariable();
			}
			else
			{
				bool flag = false;
				if (TSql90ParserInternal.tokenSet_76_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_121_.member(this.LA(2)))
				{
					int pos = this.mark();
					flag = true;
					this.inputState.guessing++;
					try
					{
						this.selectStarExpression();
					}
					catch (RecognitionException)
					{
						flag = false;
					}
					this.rewind(pos);
					this.inputState.guessing--;
				}
				if (flag)
				{
					result = this.selectStarExpression();
				}
				else
				{
					if (!TSql90ParserInternal.tokenSet_88_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_122_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					result = this.receiveColumnSelectExpression();
				}
			}
			return result;
		}

		// Token: 0x0600178B RID: 6027 RVA: 0x000AC574 File Offset: 0x000AA774
		public SelectScalarExpression receiveColumnSelectExpression()
		{
			SelectScalarExpression selectScalarExpression = base.FragmentFactory.CreateFragment<SelectScalarExpression>();
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_2BD;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_2BD;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_2BD;
					}
				}
			}
			else if (num <= 141)
			{
				if (num != 133 && num != 136 && num != 141)
				{
					goto IL_2BD;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_2BD;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 192:
				case 194:
				case 196:
				case 198:
					goto IL_2BD;
				case 195:
				{
					IToken token = this.LT(1);
					this.match(195);
					if (this.inputState.guessing == 0)
					{
						ColumnReferenceExpression columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
						columnReferenceExpression.ColumnType = ColumnType.Wildcard;
						TSql80ParserBaseInternal.UpdateTokenInfo(columnReferenceExpression, token);
						selectScalarExpression.Expression = columnReferenceExpression;
						return selectScalarExpression;
					}
					return selectScalarExpression;
				}
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_2BD;
					default:
						goto IL_2BD;
					}
					break;
				}
			}
			ScalarExpression expression = this.expression();
			if (this.inputState.guessing == 0)
			{
				selectScalarExpression.Expression = expression;
			}
			int num2 = this.LA(1);
			if (num2 <= 71)
			{
				if (num2 != 9)
				{
					if (num2 != 71)
					{
						goto IL_2AA;
					}
					return selectScalarExpression;
				}
			}
			else
			{
				if (num2 == 198)
				{
					return selectScalarExpression;
				}
				switch (num2)
				{
				case 230:
				case 231:
				case 232:
				case 233:
					break;
				default:
					goto IL_2AA;
				}
			}
			int num3 = this.LA(1);
			if (num3 != 9)
			{
				switch (num3)
				{
				case 230:
				case 231:
				case 232:
				case 233:
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(9);
			}
			IdentifierOrValueExpression columnName = this.stringOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				selectScalarExpression.ColumnName = columnName;
				return selectScalarExpression;
			}
			return selectScalarExpression;
			IL_2AA:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_2BD:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600178C RID: 6028 RVA: 0x000AC854 File Offset: 0x000AAA54
		public DialogOption beginConversationArgument(ref int encounteredOptions)
		{
			IToken tOption = this.LT(1);
			this.match(232);
			this.match(206);
			int num = this.LA(1);
			if (num <= 105)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_1BA;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_1BA;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					case 102:
					case 104:
						goto IL_1BA;
					case 103:
					case 105:
						return this.onOffBeginDialogConversationArgument(tOption, ref encounteredOptions);
					default:
						goto IL_1BA;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_1BA;
					}
				}
				else if (num != 141 && num != 147)
				{
					goto IL_1BA;
				}
			}
			else if (num <= 193)
			{
				if (num != 163)
				{
					switch (num)
					{
					case 191:
					case 193:
						break;
					case 192:
						goto IL_1BA;
					default:
						goto IL_1BA;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_1BA;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_1BA;
					default:
						goto IL_1BA;
					}
					break;
				}
			}
			return this.scalarExpressionBeginDialogConversationArgument(tOption, ref encounteredOptions);
			IL_1BA:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x0600178D RID: 6029 RVA: 0x000ACA30 File Offset: 0x000AAC30
		public ScalarExpressionDialogOption scalarExpressionBeginDialogConversationArgument(IToken tOption, ref int encounteredOptions)
		{
			ScalarExpressionDialogOption scalarExpressionDialogOption = base.FragmentFactory.CreateFragment<ScalarExpressionDialogOption>();
			ScalarExpression value = this.expression();
			if (this.inputState.guessing == 0)
			{
				if (TSql80ParserBaseInternal.TryMatch(tOption, "RELATED_CONVERSATION"))
				{
					scalarExpressionDialogOption.OptionKind = DialogOptionKind.RelatedConversation;
					scalarExpressionDialogOption.Value = value;
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 1, tOption);
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 0, tOption);
				}
				else if (TSql80ParserBaseInternal.TryMatch(tOption, "RELATED_CONVERSATION_GROUP"))
				{
					scalarExpressionDialogOption.OptionKind = DialogOptionKind.RelatedConversationGroup;
					scalarExpressionDialogOption.Value = value;
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 1, tOption);
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, 0, tOption);
				}
				else
				{
					TSql80ParserBaseInternal.Match(tOption, "LIFETIME");
					scalarExpressionDialogOption.OptionKind = DialogOptionKind.Lifetime;
					scalarExpressionDialogOption.Value = value;
					TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)scalarExpressionDialogOption.OptionKind, tOption);
				}
			}
			return scalarExpressionDialogOption;
		}

		// Token: 0x0600178E RID: 6030 RVA: 0x000ACAE4 File Offset: 0x000AACE4
		public OnOffDialogOption onOffBeginDialogConversationArgument(IToken tOption, ref int encounteredOptions)
		{
			OnOffDialogOption onOffDialogOption = base.FragmentFactory.CreateFragment<OnOffDialogOption>();
			OptionState optionState = this.optionOnOff(onOffDialogOption);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(tOption, "ENCRYPTION");
				onOffDialogOption.OptionKind = DialogOptionKind.Encryption;
				TSql80ParserBaseInternal.CheckOptionDuplication(ref encounteredOptions, (int)onOffDialogOption.OptionKind, tOption);
				onOffDialogOption.OptionState = optionState;
			}
			return onOffDialogOption;
		}

		// Token: 0x0600178F RID: 6031 RVA: 0x000ACB3C File Offset: 0x000AAD3C
		public void execStart(TSqlFragment vParent)
		{
			switch (this.LA(1))
			{
			case 60:
			{
				IToken token = this.LT(1);
				this.match(60);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				break;
			}
			case 61:
			{
				IToken token2 = this.LT(1);
				this.match(61);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					return;
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001790 RID: 6032 RVA: 0x000ACBC8 File Offset: 0x000AADC8
		public ExecuteContext executeAsStatementContext()
		{
			ExecuteContext executeContext = base.FragmentFactory.CreateFragment<ExecuteContext>();
			int num = this.LA(1);
			if (num != 163)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				int num2 = this.LA(1);
				if (num2 <= 92)
				{
					if (num2 <= 28)
					{
						if (num2 <= 6)
						{
							if (num2 != 1)
							{
								switch (num2)
								{
								case 4:
								case 6:
									break;
								case 5:
									goto IL_368;
								default:
									goto IL_368;
								}
							}
						}
						else
						{
							switch (num2)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								break;
							case 14:
							case 16:
								goto IL_368;
							default:
								switch (num2)
								{
								case 22:
								case 23:
									break;
								default:
									if (num2 != 28)
									{
										goto IL_368;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num2 <= 75)
					{
						switch (num2)
						{
						case 33:
						case 35:
							break;
						case 34:
							goto IL_368;
						default:
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
								break;
							case 47:
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
								goto IL_368;
							default:
								switch (num2)
								{
								case 74:
								case 75:
									break;
								default:
									goto IL_368;
								}
								break;
							}
							break;
						}
					}
					else if (num2 != 82 && num2 != 86 && num2 != 92)
					{
						goto IL_368;
					}
				}
				else if (num2 <= 172)
				{
					if (num2 <= 119)
					{
						if (num2 != 95 && num2 != 106 && num2 != 119)
						{
							goto IL_368;
						}
					}
					else
					{
						switch (num2)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							break;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							goto IL_368;
						default:
							switch (num2)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								break;
							case 157:
							case 158:
							case 159:
								goto IL_368;
							default:
								switch (num2)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									break;
								case 168:
								case 169:
									goto IL_368;
								default:
									goto IL_368;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 191)
				{
					if (num2 != 176)
					{
						switch (num2)
						{
						case 180:
						case 181:
							break;
						default:
							if (num2 != 191)
							{
								goto IL_368;
							}
							break;
						}
					}
				}
				else
				{
					switch (num2)
					{
					case 204:
						break;
					case 205:
						goto IL_368;
					case 206:
					{
						this.match(206);
						ScalarExpression principal = this.expression();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.Match(token, "LOGIN");
							executeContext.Kind = ExecuteAsOption.Login;
							executeContext.Principal = principal;
							return executeContext;
						}
						return executeContext;
					}
					default:
						switch (num2)
						{
						case 219:
						case 220:
							break;
						default:
							if (num2 != 232)
							{
								goto IL_368;
							}
							break;
						}
						break;
					}
				}
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "CALLER");
					executeContext.Kind = ExecuteAsOption.Caller;
					TSql80ParserBaseInternal.UpdateTokenInfo(executeContext, token);
					return executeContext;
				}
				return executeContext;
				IL_368:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			else
			{
				this.match(163);
				this.match(206);
				ScalarExpression principal = this.expression();
				if (this.inputState.guessing == 0)
				{
					executeContext.Kind = ExecuteAsOption.User;
					executeContext.Principal = principal;
				}
			}
			return executeContext;
		}

		// Token: 0x06001791 RID: 6033 RVA: 0x000ACF64 File Offset: 0x000AB164
		public void executeContextStatementOptionsOpt(ExecuteAsStatement vParent)
		{
			if (this.LA(1) == 171 && this.LA(2) == 232)
			{
				this.match(171);
				if (this.LA(1) == 232 && this.LA(2) == 176)
				{
					IToken token = this.LT(1);
					this.match(232);
					IToken token2 = this.LT(1);
					this.match(176);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "NO");
						vParent.WithNoRevert = true;
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
						return;
					}
				}
				else
				{
					if (this.LA(1) != 232 || this.LA(2) != 88)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token3 = this.LT(1);
					this.match(232);
					this.match(88);
					VariableReference cookie = this.variable();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token3, "COOKIE");
						vParent.Cookie = cookie;
						return;
					}
				}
				return;
			}
			if (TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001792 RID: 6034 RVA: 0x000AD0B8 File Offset: 0x000AB2B8
		public ExecuteOption executeOption()
		{
			ExecuteOption executeOption = base.FragmentFactory.CreateFragment<ExecuteOption>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "RECOMPILE");
				executeOption.OptionKind = ExecuteOptionKind.Recompile;
			}
			return executeOption;
		}

		// Token: 0x06001793 RID: 6035 RVA: 0x000AD108 File Offset: 0x000AB308
		public void execTypes(ExecuteSpecification vParent)
		{
			if (this.LA(1) == 191)
			{
				this.match(191);
				ExecutableEntity executableEntity = this.execStrTypes();
				IToken token = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.ExecutableEntity = executableEntity;
				}
				int num = this.LA(1);
				if (num <= 95)
				{
					if (num <= 35)
					{
						if (num <= 17)
						{
							if (num == 1)
							{
								goto IL_30F;
							}
							switch (num)
							{
							case 4:
							case 6:
								goto IL_30F;
							case 5:
								break;
							default:
								switch (num)
								{
								case 9:
								{
									ExecuteContext executeContext = this.execStrExecCtxt();
									if (this.inputState.guessing == 0)
									{
										vParent.ExecuteContext = executeContext;
										goto IL_30F;
									}
									goto IL_30F;
								}
								case 12:
								case 13:
								case 15:
								case 17:
									goto IL_30F;
								}
								break;
							}
						}
						else
						{
							switch (num)
							{
							case 22:
							case 23:
								goto IL_30F;
							default:
								if (num == 28)
								{
									goto IL_30F;
								}
								switch (num)
								{
								case 33:
								case 35:
									goto IL_30F;
								}
								break;
							}
						}
					}
					else if (num <= 82)
					{
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 60:
						case 61:
						case 64:
							goto IL_30F;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 58:
						case 59:
						case 62:
						case 63:
							break;
						default:
							switch (num)
							{
							case 74:
							case 75:
								goto IL_30F;
							default:
								if (num == 82)
								{
									goto IL_30F;
								}
								break;
							}
							break;
						}
					}
					else if (num == 86 || num == 92 || num == 95)
					{
						goto IL_30F;
					}
				}
				else if (num <= 172)
				{
					if (num <= 119)
					{
						if (num == 106 || num == 111 || num == 119)
						{
							goto IL_30F;
						}
					}
					else
					{
						switch (num)
						{
						case 123:
						case 125:
						case 126:
						case 129:
						case 131:
						case 132:
						case 134:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_30F;
						case 124:
						case 127:
						case 128:
						case 130:
						case 133:
						case 135:
						case 136:
						case 137:
						case 139:
						case 141:
							break;
						default:
							switch (num)
							{
							case 156:
							case 160:
							case 161:
							case 162:
								goto IL_30F;
							case 157:
							case 158:
							case 159:
								break;
							default:
								switch (num)
								{
								case 167:
								case 170:
								case 171:
								case 172:
									goto IL_30F;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 191)
				{
					if (num == 176)
					{
						goto IL_30F;
					}
					switch (num)
					{
					case 180:
					case 181:
						goto IL_30F;
					default:
						if (num == 191)
						{
							goto IL_30F;
						}
						break;
					}
				}
				else
				{
					if (num == 204)
					{
						goto IL_30F;
					}
					switch (num)
					{
					case 219:
					case 220:
						goto IL_30F;
					default:
						if (num == 232)
						{
							goto IL_30F;
						}
						break;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_30F:
				if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233) && base.NextTokenMatches("AT"))
				{
					Identifier linkedServer = this.linkedServer();
					if (this.inputState.guessing == 0)
					{
						vParent.LinkedServer = linkedServer;
						return;
					}
				}
				else
				{
					if (TSql90ParserInternal.tokenSet_20_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
					{
						return;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else if (TSql90ParserInternal.tokenSet_123_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_124_.member(this.LA(2)))
			{
				ExecutableEntity executableEntity = this.execProcEx();
				if (this.inputState.guessing == 0)
				{
					vParent.ExecutableEntity = executableEntity;
					return;
				}
			}
			else
			{
				if (this.LA(1) != 234 || this.LA(2) != 206)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				VariableReference variable = this.variable();
				this.match(206);
				ExecutableEntity executableEntity = this.execProcEx();
				if (this.inputState.guessing == 0)
				{
					vParent.Variable = variable;
					vParent.ExecutableEntity = executableEntity;
					return;
				}
			}
		}

		// Token: 0x06001794 RID: 6036 RVA: 0x000AD560 File Offset: 0x000AB760
		public ExecutableEntity execStrTypes()
		{
			ExecutableEntity executableEntity = this.execSqlList();
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				this.setParamList(executableEntity);
			}
			return executableEntity;
		}

		// Token: 0x06001795 RID: 6037 RVA: 0x000AD5B4 File Offset: 0x000AB7B4
		public ExecuteContext execStrExecCtxt()
		{
			this.match(9);
			return this.execCtxtStmt();
		}

		// Token: 0x06001796 RID: 6038 RVA: 0x000AD5D4 File Offset: 0x000AB7D4
		public Identifier linkedServer()
		{
			IToken token = this.LT(1);
			this.match(232);
			Identifier result = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "AT");
			}
			return result;
		}

		// Token: 0x06001797 RID: 6039 RVA: 0x000AD618 File Offset: 0x000AB818
		public ExecutableProcedureReference execProcEx()
		{
			int num = this.LA(1);
			ExecutableProcedureReference result;
			if (num != 107)
			{
				if (num != 200)
				{
					switch (num)
					{
					case 232:
					case 233:
					case 234:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				result = this.execProc();
			}
			else
			{
				result = this.adhocDataSourceExecproc();
			}
			return result;
		}

		// Token: 0x06001798 RID: 6040 RVA: 0x000AD67C File Offset: 0x000AB87C
		public ExecuteContext execCtxtStmt()
		{
			ExecuteContext executeContext = base.FragmentFactory.CreateFragment<ExecuteContext>();
			this.execCtxtStmtType(executeContext);
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return executeContext;
						}
						switch (num)
						{
						case 4:
						case 6:
							return executeContext;
						case 5:
							break;
						default:
							switch (num)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return executeContext;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return executeContext;
						default:
							if (num == 28)
							{
								return executeContext;
							}
							switch (num)
							{
							case 33:
							case 35:
								return executeContext;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return executeContext;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return executeContext;
						default:
							if (num == 82)
							{
								return executeContext;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return executeContext;
				}
			}
			else if (num <= 172)
			{
				if (num <= 119)
				{
					if (num == 106 || num == 111 || num == 119)
					{
						return executeContext;
					}
				}
				else
				{
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return executeContext;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return executeContext;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return executeContext;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 191)
			{
				if (num == 176)
				{
					return executeContext;
				}
				switch (num)
				{
				case 180:
				case 181:
					return executeContext;
				default:
					if (num == 191)
					{
						return executeContext;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 204:
					return executeContext;
				case 205:
					break;
				case 206:
				{
					Literal principal = this.execCtxtStmtPrincipal();
					if (this.inputState.guessing == 0)
					{
						executeContext.Principal = principal;
						return executeContext;
					}
					return executeContext;
				}
				default:
					switch (num)
					{
					case 219:
					case 220:
						return executeContext;
					default:
						if (num == 232)
						{
							return executeContext;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x06001799 RID: 6041 RVA: 0x000AD940 File Offset: 0x000ABB40
		public void execCtxtStmtType(ExecuteContext vParent)
		{
			int num = this.LA(1);
			if (num != 163)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token, "LOGIN");
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.Kind = ExecuteAsOption.Login;
					return;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(163);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					vParent.Kind = ExecuteAsOption.User;
					return;
				}
			}
		}

		// Token: 0x0600179A RID: 6042 RVA: 0x000AD9E8 File Offset: 0x000ABBE8
		public Literal execCtxtStmtPrincipal()
		{
			this.match(206);
			return this.stringLiteral();
		}

		// Token: 0x0600179B RID: 6043 RVA: 0x000ADA0C File Offset: 0x000ABC0C
		public ExecutableStringList execSqlList()
		{
			ExecutableStringList executableStringList = base.FragmentFactory.CreateFragment<ExecutableStringList>();
			ValueExpression item = this.stringOrGlobalVariableOrVariable();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(executableStringList, executableStringList.Strings, item);
			}
			while (this.LA(1) == 197)
			{
				this.match(197);
				item = this.stringOrGlobalVariableOrVariable();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ValueExpression>(executableStringList, executableStringList.Strings, item);
				}
			}
			return executableStringList;
		}

		// Token: 0x0600179C RID: 6044 RVA: 0x000ADA84 File Offset: 0x000ABC84
		public void setParamList(ExecutableEntity vParent)
		{
			bool flag = false;
			int num = 0;
			ExecuteParameter item = this.setParam(ref flag, ref num);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExecuteParameter>(vParent, vParent.Parameters, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.setParam(ref flag, ref num);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ExecuteParameter>(vParent, vParent.Parameters, item);
				}
			}
		}

		// Token: 0x0600179D RID: 6045 RVA: 0x000ADAFC File Offset: 0x000ABCFC
		public ExecutableProcedureReference adhocDataSourceExecproc()
		{
			ExecutableProcedureReference executableProcedureReference = base.FragmentFactory.CreateFragment<ExecutableProcedureReference>();
			AdHocDataSource adHocDataSource = this.adhocDataSource();
			this.match(200);
			ProcedureReferenceName procedureReference = this.procObjectReference();
			if (this.inputState.guessing == 0)
			{
				executableProcedureReference.AdHocDataSource = adHocDataSource;
				executableProcedureReference.ProcedureReference = procedureReference;
			}
			if (TSql90ParserInternal.tokenSet_18_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_19_.member(this.LA(2)))
			{
				this.setParamList(executableProcedureReference);
			}
			else if (!TSql90ParserInternal.tokenSet_20_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return executableProcedureReference;
		}

		// Token: 0x0600179E RID: 6046 RVA: 0x000ADBB4 File Offset: 0x000ABDB4
		public ProcedureReferenceName procObjectReference()
		{
			ProcedureReferenceName procedureReferenceName = base.FragmentFactory.CreateFragment<ProcedureReferenceName>();
			ProcedureReference procedureReference = this.procedureReference();
			if (this.inputState.guessing == 0)
			{
				procedureReferenceName.ProcedureReference = procedureReference;
			}
			return procedureReferenceName;
		}

		// Token: 0x0600179F RID: 6047 RVA: 0x000ADBEC File Offset: 0x000ABDEC
		public ProcedureReferenceName varObjectReference()
		{
			ProcedureReferenceName procedureReferenceName = base.FragmentFactory.CreateFragment<ProcedureReferenceName>();
			VariableReference procedureVariable = this.variable();
			if (this.inputState.guessing == 0)
			{
				procedureReferenceName.ProcedureVariable = procedureVariable;
			}
			return procedureReferenceName;
		}

		// Token: 0x060017A0 RID: 6048 RVA: 0x000ADC24 File Offset: 0x000ABE24
		public Literal procNumOpt()
		{
			Literal result = null;
			int num = this.LA(1);
			if (num <= 95)
			{
				if (num <= 35)
				{
					if (num <= 17)
					{
						if (num == 1)
						{
							return result;
						}
						switch (num)
						{
						case 4:
						case 6:
							return result;
						case 5:
							break;
						default:
							switch (num)
							{
							case 9:
							case 12:
							case 13:
							case 15:
							case 17:
								return result;
							}
							break;
						}
					}
					else
					{
						switch (num)
						{
						case 22:
						case 23:
							return result;
						default:
							if (num == 28)
							{
								return result;
							}
							switch (num)
							{
							case 33:
							case 35:
								return result;
							}
							break;
						}
					}
				}
				else if (num <= 82)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 67:
						return result;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return result;
						default:
							if (num == 82)
							{
								return result;
							}
							break;
						}
						break;
					}
				}
				else if (num == 86 || num == 92 || num == 95)
				{
					return result;
				}
			}
			else if (num <= 162)
			{
				if (num <= 111)
				{
					if (num == 100 || num == 106 || num == 111)
					{
						return result;
					}
				}
				else
				{
					if (num == 119)
					{
						return result;
					}
					switch (num)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return result;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return result;
						}
						break;
					}
				}
			}
			else if (num <= 181)
			{
				switch (num)
				{
				case 167:
				case 170:
				case 171:
				case 172:
					return result;
				case 168:
				case 169:
					break;
				default:
					if (num == 176)
					{
						return result;
					}
					switch (num)
					{
					case 180:
					case 181:
						return result;
					}
					break;
				}
			}
			else if (num <= 199)
			{
				switch (num)
				{
				case 191:
				case 193:
					return result;
				case 192:
					break;
				default:
					if (num == 199)
					{
						return result;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return result;
				}
				switch (num)
				{
				case 219:
				case 220:
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
					return result;
				case 236:
					this.match(236);
					return this.integer();
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017A1 RID: 6049 RVA: 0x000ADF44 File Offset: 0x000AC144
		public ValueExpression stringOrGlobalVariableOrVariable()
		{
			switch (this.LA(1))
			{
			case 230:
			case 231:
				return this.stringLiteral();
			case 234:
				return this.globalVariableOrVariableReference();
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017A2 RID: 6050 RVA: 0x000ADFA4 File Offset: 0x000AC1A4
		public RealLiteral real()
		{
			RealLiteral realLiteral = base.FragmentFactory.CreateFragment<RealLiteral>();
			IToken token = this.LT(1);
			this.match(223);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(realLiteral, token);
				realLiteral.Value = token.getText();
			}
			return realLiteral;
		}

		// Token: 0x060017A3 RID: 6051 RVA: 0x000ADFF4 File Offset: 0x000AC1F4
		public NumericLiteral numeric()
		{
			NumericLiteral numericLiteral = base.FragmentFactory.CreateFragment<NumericLiteral>();
			IToken token = this.LT(1);
			this.match(222);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(numericLiteral, token);
				numericLiteral.Value = token.getText();
			}
			return numericLiteral;
		}

		// Token: 0x060017A4 RID: 6052 RVA: 0x000AE044 File Offset: 0x000AC244
		public ExecuteParameter setParam(ref bool nameEqualsValueWasUsed, ref int parameterNumber)
		{
			ExecuteParameter executeParameter = base.FragmentFactory.CreateFragment<ExecuteParameter>();
			executeParameter.IsOutput = false;
			parameterNumber++;
			if (this.LA(1) == 234 && this.LA(2) == 206)
			{
				VariableReference variable = this.variable();
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					executeParameter.Variable = variable;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_18_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_125_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num = this.LA(1);
			if (num <= 100)
			{
				if (num != 47)
				{
					if (num != 100)
					{
						goto IL_276;
					}
				}
				else
				{
					Literal parameterValue = this.defaultLiteral();
					if (this.inputState.guessing == 0)
					{
						executeParameter.ParameterValue = parameterValue;
						return executeParameter;
					}
					return executeParameter;
				}
			}
			else if (num != 193 && num != 199)
			{
				switch (num)
				{
				case 221:
				case 222:
				case 223:
				case 224:
				case 225:
				case 230:
				case 231:
				case 232:
				case 233:
				case 234:
					break;
				case 226:
				case 227:
				case 228:
				case 229:
					goto IL_276;
				default:
					goto IL_276;
				}
			}
			ScalarExpression scalarExpression = this.possibleNegativeConstantOrIdentifier();
			if (this.inputState.guessing == 0)
			{
				executeParameter.ParameterValue = scalarExpression;
				if (executeParameter.Variable != null)
				{
					nameEqualsValueWasUsed = true;
				}
				else if (nameEqualsValueWasUsed)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46089", scalarExpression, TSqlParserResource.SQL46089Message, new string[]
					{
						parameterNumber.ToString(CultureInfo.CurrentCulture)
					});
				}
			}
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_126_.member(this.LA(2)) && (base.NextTokenMatches("OUTPUT") || base.NextTokenMatches("OUT")))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					VariableReference variableReference = scalarExpression as VariableReference;
					GlobalVariableExpression globalVariableExpression = scalarExpression as GlobalVariableExpression;
					if (variableReference == null && globalVariableExpression == null)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46088", token, TSqlParserResource.SQL46088Message, new string[0]);
					}
					TSql80ParserBaseInternal.Match(token, "OUTPUT", "OUT");
					executeParameter.IsOutput = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(executeParameter, token);
					return executeParameter;
				}
				return executeParameter;
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_126_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				return executeParameter;
			}
			IL_276:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017A5 RID: 6053 RVA: 0x000AE2DC File Offset: 0x000AC4DC
		public TableDefinition tableDefinitionCreateTable()
		{
			TableDefinition tableDefinition = base.FragmentFactory.CreateFragment<TableDefinition>();
			this.tableElement(IndexAffectingStatement.CreateTable, tableDefinition, null);
			while (this.LA(1) == 198 && TSql90ParserInternal.tokenSet_127_.member(this.LA(2)))
			{
				this.LT(1);
				this.match(198);
				this.tableElement(IndexAffectingStatement.CreateTable, tableDefinition, null);
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
			}
			return tableDefinition;
		}

		// Token: 0x060017A6 RID: 6054 RVA: 0x000AE378 File Offset: 0x000AC578
		public AlterTableAlterColumnStatement alterTableAlterColumnStatement()
		{
			AlterTableAlterColumnStatement alterTableAlterColumnStatement = base.FragmentFactory.CreateFragment<AlterTableAlterColumnStatement>();
			bool flag = false;
			this.match(6);
			this.match(27);
			Identifier columnIdentifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				alterTableAlterColumnStatement.ColumnIdentifier = columnIdentifier;
				base.ThrowPartialAstIfPhaseOne(alterTableAlterColumnStatement);
			}
			int num = this.LA(1);
			if (num <= 54)
			{
				if (num != 4)
				{
					switch (num)
					{
					case 53:
						goto IL_96;
					case 54:
						break;
					default:
						goto IL_505;
					}
				}
				int num2 = this.LA(1);
				if (num2 != 4)
				{
					if (num2 != 54)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(54);
					if (this.inputState.guessing == 0)
					{
						flag = false;
					}
				}
				else
				{
					this.match(4);
					if (this.inputState.guessing == 0)
					{
						flag = true;
					}
				}
				int num3 = this.LA(1);
				if (num3 != 99)
				{
					if (num3 != 136)
					{
						if (num3 != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token = this.LT(1);
						this.match(232);
						if (this.inputState.guessing != 0)
						{
							return alterTableAlterColumnStatement;
						}
						TSql80ParserBaseInternal.Match(token, "PERSISTED");
						TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterColumnStatement, token);
						if (flag)
						{
							alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.AddPersisted;
							return alterTableAlterColumnStatement;
						}
						alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.DropPersisted;
						return alterTableAlterColumnStatement;
					}
					else
					{
						IToken token2 = this.LT(1);
						this.match(136);
						if (this.inputState.guessing != 0)
						{
							return alterTableAlterColumnStatement;
						}
						TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterColumnStatement, token2);
						if (flag)
						{
							alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.AddRowGuidCol;
							return alterTableAlterColumnStatement;
						}
						alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.DropRowGuidCol;
						return alterTableAlterColumnStatement;
					}
				}
				else
				{
					this.match(99);
					this.match(67);
					IToken token3 = this.LT(1);
					this.match(128);
					if (this.inputState.guessing != 0)
					{
						return alterTableAlterColumnStatement;
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableAlterColumnStatement, token3);
					if (flag)
					{
						alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.AddNotForReplication;
						return alterTableAlterColumnStatement;
					}
					alterTableAlterColumnStatement.AlterTableAlterColumnOption = AlterTableAlterColumnOption.DropNotForReplication;
					return alterTableAlterColumnStatement;
				}
			}
			else if (num != 96)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				default:
					goto IL_505;
				}
			}
			IL_96:
			DataTypeReference dataType = this.scalarDataType();
			if (this.inputState.guessing == 0)
			{
				alterTableAlterColumnStatement.DataType = dataType;
			}
			this.collationOpt(alterTableAlterColumnStatement);
			int num4 = this.LA(1);
			if (num4 <= 95)
			{
				if (num4 <= 35)
				{
					if (num4 <= 17)
					{
						if (num4 == 1)
						{
							return alterTableAlterColumnStatement;
						}
						switch (num4)
						{
						case 4:
						case 6:
							return alterTableAlterColumnStatement;
						case 5:
							break;
						default:
							switch (num4)
							{
							case 12:
							case 13:
							case 15:
							case 17:
								return alterTableAlterColumnStatement;
							}
							break;
						}
					}
					else
					{
						switch (num4)
						{
						case 22:
						case 23:
							return alterTableAlterColumnStatement;
						default:
							if (num4 == 28)
							{
								return alterTableAlterColumnStatement;
							}
							switch (num4)
							{
							case 33:
							case 35:
								return alterTableAlterColumnStatement;
							}
							break;
						}
					}
				}
				else if (num4 <= 82)
				{
					switch (num4)
					{
					case 44:
					case 45:
					case 46:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
						return alterTableAlterColumnStatement;
					case 47:
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
						break;
					default:
						switch (num4)
						{
						case 74:
						case 75:
							return alterTableAlterColumnStatement;
						default:
							if (num4 == 82)
							{
								return alterTableAlterColumnStatement;
							}
							break;
						}
						break;
					}
				}
				else if (num4 == 86 || num4 == 92 || num4 == 95)
				{
					return alterTableAlterColumnStatement;
				}
			}
			else if (num4 <= 172)
			{
				if (num4 <= 119)
				{
					switch (num4)
					{
					case 99:
					case 100:
					{
						bool flag2 = this.nullNotNull(alterTableAlterColumnStatement);
						if (this.inputState.guessing == 0)
						{
							alterTableAlterColumnStatement.AlterTableAlterColumnOption = (flag2 ? AlterTableAlterColumnOption.Null : AlterTableAlterColumnOption.NotNull);
							return alterTableAlterColumnStatement;
						}
						return alterTableAlterColumnStatement;
					}
					default:
						if (num4 == 106 || num4 == 119)
						{
							return alterTableAlterColumnStatement;
						}
						break;
					}
				}
				else
				{
					switch (num4)
					{
					case 123:
					case 125:
					case 126:
					case 129:
					case 131:
					case 132:
					case 134:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return alterTableAlterColumnStatement;
					case 124:
					case 127:
					case 128:
					case 130:
					case 133:
					case 135:
					case 136:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num4)
						{
						case 156:
						case 160:
						case 161:
						case 162:
							return alterTableAlterColumnStatement;
						case 157:
						case 158:
						case 159:
							break;
						default:
							switch (num4)
							{
							case 167:
							case 170:
							case 171:
							case 172:
								return alterTableAlterColumnStatement;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num4 <= 191)
			{
				if (num4 == 176)
				{
					return alterTableAlterColumnStatement;
				}
				switch (num4)
				{
				case 180:
				case 181:
					return alterTableAlterColumnStatement;
				default:
					if (num4 == 191)
					{
						return alterTableAlterColumnStatement;
					}
					break;
				}
			}
			else
			{
				if (num4 == 204)
				{
					return alterTableAlterColumnStatement;
				}
				switch (num4)
				{
				case 219:
				case 220:
					return alterTableAlterColumnStatement;
				default:
					if (num4 == 232)
					{
						return alterTableAlterColumnStatement;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_505:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017A7 RID: 6055 RVA: 0x000AE8A0 File Offset: 0x000ACAA0
		public AlterTableTriggerModificationStatement alterTableTriggerModificationStatement()
		{
			AlterTableTriggerModificationStatement alterTableTriggerModificationStatement = base.FragmentFactory.CreateFragment<AlterTableTriggerModificationStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				alterTableTriggerModificationStatement.TriggerEnforcement = TSql80ParserBaseInternal.ParseTriggerEnforcement(token);
			}
			this.match(155);
			int num = this.LA(1);
			if (num != 5)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier item = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(alterTableTriggerModificationStatement, alterTableTriggerModificationStatement.TriggerNames, item);
					}
					while (this.LA(1) == 198)
					{
						this.match(198);
						item = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(alterTableTriggerModificationStatement, alterTableTriggerModificationStatement.TriggerNames, item);
						}
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					alterTableTriggerModificationStatement.All = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableTriggerModificationStatement, token2);
				}
			}
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterTableTriggerModificationStatement);
			}
			return alterTableTriggerModificationStatement;
		}

		// Token: 0x060017A8 RID: 6056 RVA: 0x000AE9D0 File Offset: 0x000ACBD0
		public AlterTableDropTableElementStatement alterTableDropTableElementStatement()
		{
			AlterTableDropTableElementStatement alterTableDropTableElementStatement = base.FragmentFactory.CreateFragment<AlterTableDropTableElementStatement>();
			this.match(54);
			AlterTableDropTableElement item = this.alterTableDropTableElement();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AlterTableDropTableElement>(alterTableDropTableElementStatement, alterTableDropTableElementStatement.AlterTableDropTableElements, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.alterTableDropTableElement();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<AlterTableDropTableElement>(alterTableDropTableElementStatement, alterTableDropTableElementStatement.AlterTableDropTableElements, item);
				}
			}
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterTableDropTableElementStatement);
			}
			return alterTableDropTableElementStatement;
		}

		// Token: 0x060017A9 RID: 6057 RVA: 0x000AEA64 File Offset: 0x000ACC64
		public AlterTableSwitchStatement alterTableSwitchStatement()
		{
			AlterTableSwitchStatement alterTableSwitchStatement = base.FragmentFactory.CreateFragment<AlterTableSwitchStatement>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SWITCH");
			}
			int num = this.LA(1);
			if (num != 151)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				ScalarExpression scalarExpression = this.expression();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "PARTITION");
					alterTableSwitchStatement.SourcePartitionNumber = scalarExpression;
				}
			}
			this.match(151);
			SchemaObjectName targetTable = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				alterTableSwitchStatement.TargetTable = targetTable;
			}
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_38_.member(this.LA(2)) && base.NextTokenMatches("PARTITION"))
			{
				this.match(232);
				ScalarExpression scalarExpression = this.expression();
				if (this.inputState.guessing == 0)
				{
					alterTableSwitchStatement.TargetPartitionNumber = scalarExpression;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_17_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return alterTableSwitchStatement;
		}

		// Token: 0x060017AA RID: 6058 RVA: 0x000AEBD0 File Offset: 0x000ACDD0
		public ConstraintEnforcement constraintEnforcement()
		{
			ConstraintEnforcement result = ConstraintEnforcement.NotSpecified;
			int num = this.LA(1);
			if (num != 21)
			{
				if (num != 97)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(97);
				if (this.inputState.guessing == 0)
				{
					result = ConstraintEnforcement.NoCheck;
				}
			}
			else
			{
				this.match(21);
				if (this.inputState.guessing == 0)
				{
					result = ConstraintEnforcement.Check;
				}
			}
			return result;
		}

		// Token: 0x060017AB RID: 6059 RVA: 0x000AEC3C File Offset: 0x000ACE3C
		public AlterTableAddTableElementStatement alterTableAddTableElementStatement(ConstraintEnforcement vExistingRowsCheck)
		{
			AlterTableAddTableElementStatement alterTableAddTableElementStatement = base.FragmentFactory.CreateFragment<AlterTableAddTableElementStatement>();
			alterTableAddTableElementStatement.ExistingRowsCheckEnforcement = vExistingRowsCheck;
			this.match(4);
			TableDefinition definition = this.tableDefinition(IndexAffectingStatement.AlterTableAddElement, alterTableAddTableElementStatement);
			if (this.inputState.guessing == 0)
			{
				alterTableAddTableElementStatement.Definition = definition;
			}
			return alterTableAddTableElementStatement;
		}

		// Token: 0x060017AC RID: 6060 RVA: 0x000AEC84 File Offset: 0x000ACE84
		public AlterTableConstraintModificationStatement alterTableConstraintModificationStatement(ConstraintEnforcement vExistingRowsCheck)
		{
			AlterTableConstraintModificationStatement alterTableConstraintModificationStatement = base.FragmentFactory.CreateFragment<AlterTableConstraintModificationStatement>();
			alterTableConstraintModificationStatement.ExistingRowsCheckEnforcement = vExistingRowsCheck;
			ConstraintEnforcement constraintEnforcement = this.constraintEnforcement();
			this.match(30);
			if (this.inputState.guessing == 0)
			{
				alterTableConstraintModificationStatement.ConstraintEnforcement = constraintEnforcement;
			}
			int num = this.LA(1);
			if (num != 5)
			{
				switch (num)
				{
				case 232:
				case 233:
				{
					Identifier item = this.identifier();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(alterTableConstraintModificationStatement, alterTableConstraintModificationStatement.ConstraintNames, item);
					}
					while (this.LA(1) == 198)
					{
						this.match(198);
						item = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(alterTableConstraintModificationStatement, alterTableConstraintModificationStatement.ConstraintNames, item);
						}
					}
					break;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					alterTableConstraintModificationStatement.All = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(alterTableConstraintModificationStatement, token);
				}
			}
			if (this.inputState.guessing == 0)
			{
				base.ThrowPartialAstIfPhaseOne(alterTableConstraintModificationStatement);
			}
			return alterTableConstraintModificationStatement;
		}

		// Token: 0x060017AD RID: 6061 RVA: 0x000AEDA8 File Offset: 0x000ACFA8
		public AlterTableDropTableElement alterTableDropTableElement()
		{
			AlterTableDropTableElement alterTableDropTableElement = base.FragmentFactory.CreateFragment<AlterTableDropTableElement>();
			int num = this.LA(1);
			if (num != 27)
			{
				if (num != 30)
				{
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				int num2 = this.LA(1);
				if (num2 != 30)
				{
					switch (num2)
					{
					case 232:
					case 233:
						break;
					default:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
				}
				else
				{
					this.match(30);
					if (this.inputState.guessing == 0)
					{
						alterTableDropTableElement.TableElementType = TableElementType.Constraint;
					}
				}
				Identifier name = this.identifier();
				if (this.inputState.guessing == 0)
				{
					alterTableDropTableElement.Name = name;
				}
				if (this.LA(1) == 171 && this.LA(2) == 191)
				{
					this.alterTableDropTableElementWithOptions(alterTableDropTableElement);
				}
				else if (!TSql90ParserInternal.tokenSet_42_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_11_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				this.match(27);
				Identifier name = this.identifier();
				if (this.inputState.guessing == 0)
				{
					alterTableDropTableElement.TableElementType = TableElementType.Column;
					alterTableDropTableElement.Name = name;
				}
			}
			return alterTableDropTableElement;
		}

		// Token: 0x060017AE RID: 6062 RVA: 0x000AEEFC File Offset: 0x000AD0FC
		public void alterTableDropTableElementWithOptions(AlterTableDropTableElement vParent)
		{
			this.match(171);
			this.match(191);
			DropClusteredConstraintOption item = this.dropClusteredConstraintOption();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DropClusteredConstraintOption>(vParent, vParent.DropClusteredConstraintOptions, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.dropClusteredConstraintOption();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<DropClusteredConstraintOption>(vParent, vParent.DropClusteredConstraintOptions, item);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x060017AF RID: 6063 RVA: 0x000AEFA8 File Offset: 0x000AD1A8
		public DropClusteredConstraintOption dropClusteredConstraintOption()
		{
			DropClusteredConstraintOption dropClusteredConstraintOption = null;
			DropClusteredConstraintStateOption dropClusteredConstraintStateOption = null;
			if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("MAXDOP"))
			{
				this.match(232);
				this.match(206);
				Literal optionValue = this.integer();
				if (this.inputState.guessing == 0)
				{
					DropClusteredConstraintValueOption dropClusteredConstraintValueOption = base.FragmentFactory.CreateFragment<DropClusteredConstraintValueOption>();
					dropClusteredConstraintValueOption.OptionValue = optionValue;
					dropClusteredConstraintOption = dropClusteredConstraintValueOption;
					dropClusteredConstraintOption.OptionKind = DropClusteredConstraintOptionKind.MaxDop;
				}
			}
			else if (this.LA(1) == 232 && this.LA(2) == 206 && base.NextTokenMatches("ONLINE"))
			{
				this.match(232);
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					dropClusteredConstraintStateOption = base.FragmentFactory.CreateFragment<DropClusteredConstraintStateOption>();
					dropClusteredConstraintOption = dropClusteredConstraintStateOption;
					dropClusteredConstraintOption.OptionKind = DropClusteredConstraintOptionKind.Online;
				}
				OptionState optionState = this.optionOnOff(dropClusteredConstraintOption);
				if (this.inputState.guessing == 0)
				{
					dropClusteredConstraintStateOption.OptionState = optionState;
				}
			}
			else
			{
				if (this.LA(1) != 232 || this.LA(2) != 151 || !base.NextTokenMatches("MOVE"))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(232);
				this.match(151);
				FileGroupOrPartitionScheme optionValue2 = this.filegroupOrPartitionScheme();
				if (this.inputState.guessing == 0)
				{
					DropClusteredConstraintMoveOption dropClusteredConstraintMoveOption = base.FragmentFactory.CreateFragment<DropClusteredConstraintMoveOption>();
					dropClusteredConstraintMoveOption.OptionValue = optionValue2;
					dropClusteredConstraintOption = dropClusteredConstraintMoveOption;
					dropClusteredConstraintOption.OptionKind = DropClusteredConstraintOptionKind.MoveTo;
				}
			}
			return dropClusteredConstraintOption;
		}

		// Token: 0x060017B0 RID: 6064 RVA: 0x000AF144 File Offset: 0x000AD344
		public ColumnDefinition columnDefinition(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement)
		{
			ColumnDefinition columnDefinition = base.FragmentFactory.CreateFragment<ColumnDefinition>();
			Identifier columnIdentifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				columnDefinition.ColumnIdentifier = columnIdentifier;
				if (base.PhaseOne && vStatement != null)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnDefinition>(vStatement, vStatement.Definition.ColumnDefinitions, columnDefinition);
					base.ThrowPartialAstIfPhaseOne(vStatement);
				}
			}
			int num = this.LA(1);
			if (num <= 86)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num != 1)
						{
							switch (num)
							{
							case 4:
							case 6:
								break;
							case 5:
								goto IL_350;
							default:
								goto IL_350;
							}
						}
					}
					else
					{
						switch (num)
						{
						case 9:
							this.computedColumnBody(columnDefinition);
							this.computedColumnConstraintListOpt(statementType, columnDefinition);
							return columnDefinition;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							goto IL_350;
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							break;
						default:
							switch (num)
							{
							case 28:
							case 30:
								break;
							case 29:
								goto IL_350;
							default:
								switch (num)
								{
								case 33:
								case 35:
									break;
								case 34:
									goto IL_350;
								default:
									goto IL_350;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 53:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 68:
						break;
					case 50:
					case 51:
					case 52:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
					case 67:
						goto IL_350;
					default:
						switch (num)
						{
						case 74:
						case 75:
							break;
						default:
							goto IL_350;
						}
						break;
					}
				}
				else if (num != 79 && num != 82 && num != 86)
				{
					goto IL_350;
				}
			}
			else if (num <= 176)
			{
				if (num <= 106)
				{
					switch (num)
					{
					case 92:
					case 95:
					case 96:
					case 99:
					case 100:
						break;
					case 93:
					case 94:
					case 97:
					case 98:
						goto IL_350;
					default:
						if (num != 106)
						{
							goto IL_350;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 118:
					case 119:
					case 123:
					case 125:
					case 126:
					case 127:
					case 129:
					case 131:
					case 132:
					case 134:
					case 136:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						break;
					case 120:
					case 121:
					case 122:
					case 124:
					case 128:
					case 130:
					case 133:
					case 135:
					case 137:
					case 139:
					case 141:
						goto IL_350;
					default:
						switch (num)
						{
						case 156:
						case 159:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							break;
						case 157:
						case 158:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 169:
							goto IL_350;
						default:
							if (num != 176)
							{
								goto IL_350;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 180:
				case 181:
					break;
				default:
					switch (num)
					{
					case 191:
					case 192:
						break;
					default:
						if (num != 198)
						{
							goto IL_350;
						}
						break;
					}
					break;
				}
			}
			else if (num != 204)
			{
				switch (num)
				{
				case 219:
				case 220:
					break;
				default:
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_350;
					}
					break;
				}
			}
			this.regularColumnBody(columnDefinition);
			this.columnConstraintListOpt(statementType, columnDefinition);
			return columnDefinition;
			IL_350:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017B1 RID: 6065 RVA: 0x000AF4B8 File Offset: 0x000AD6B8
		public ConstraintDefinition tableConstraint(IndexAffectingStatement statementType, AlterTableAddTableElementStatement vStatement)
		{
			ConstraintDefinition constraintDefinition = null;
			IToken token = null;
			Identifier identifier = null;
			try
			{
				int num = this.LA(1);
				if (num <= 47)
				{
					if (num == 21)
					{
						goto IL_80;
					}
					if (num != 30)
					{
						if (num == 47)
						{
							goto IL_80;
						}
					}
					else
					{
						token = this.LT(1);
						this.match(30);
						identifier = this.identifier();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
							goto IL_80;
						}
						goto IL_80;
					}
				}
				else if (num == 68 || num == 118 || num == 159)
				{
					goto IL_80;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_80:
				int num2 = this.LA(1);
				if (num2 <= 47)
				{
					if (num2 == 21)
					{
						constraintDefinition = this.checkConstraint(statementType);
						goto IL_ED;
					}
					if (num2 == 47)
					{
						constraintDefinition = this.defaultTableConstraint(statementType);
						goto IL_ED;
					}
				}
				else
				{
					if (num2 == 68)
					{
						constraintDefinition = this.foreignKeyTableConstraint(statementType);
						goto IL_ED;
					}
					if (num2 == 118 || num2 == 159)
					{
						constraintDefinition = this.uniqueTableConstraint(statementType);
						goto IL_ED;
					}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_ED:
				if (this.inputState.guessing == 0 && identifier != null)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(constraintDefinition, token);
					constraintDefinition.ConstraintIdentifier = identifier;
				}
			}
			catch (PhaseOneConstraintException ex)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
				if (identifier != null)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(ex.Constraint, token);
					ex.Constraint.ConstraintIdentifier = identifier;
				}
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ConstraintDefinition>(vStatement, vStatement.Definition.TableConstraints, ex.Constraint);
				base.ThrowPartialAstIfPhaseOne(vStatement);
			}
			return constraintDefinition;
		}

		// Token: 0x060017B2 RID: 6066 RVA: 0x000AF63C File Offset: 0x000AD83C
		public void computedColumnBody(ColumnDefinition vParent)
		{
			this.match(9);
			ScalarExpression computedColumnExpression = this.expressionWithFlags(ExpressionFlags.ScalarSubqueriesDisallowed);
			if (this.inputState.guessing == 0)
			{
				vParent.ComputedColumnExpression = computedColumnExpression;
			}
			if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_128_.member(this.LA(2)) && base.NextTokenMatches("PERSISTED"))
			{
				IToken token = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					vParent.IsPersisted = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				return;
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_128_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x060017B3 RID: 6067 RVA: 0x000AF708 File Offset: 0x000AD908
		public void computedColumnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult)
		{
			while (TSql90ParserInternal.tokenSet_129_.member(this.LA(1)))
			{
				ConstraintDefinition constraint = this.columnConstraint(statementType);
				if (this.inputState.guessing == 0)
				{
					TSql90ParserBaseInternal.AddConstraintToComputedColumn(constraint, vResult);
				}
			}
		}

		// Token: 0x060017B4 RID: 6068 RVA: 0x000AF748 File Offset: 0x000AD948
		public void regularColumnBody(ColumnDefinition vParent)
		{
			if (TSql90ParserInternal.tokenSet_50_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_130_.member(this.LA(2)))
			{
				DataTypeReference dataType = this.scalarDataType();
				if (this.inputState.guessing == 0)
				{
					vParent.DataType = dataType;
				}
				this.collationOpt(vParent);
			}
			else if (!TSql90ParserInternal.tokenSet_70_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			if (this.inputState.guessing == 0)
			{
				base.VerifyColumnDataType(vParent);
			}
		}

		// Token: 0x060017B5 RID: 6069 RVA: 0x000AF7F0 File Offset: 0x000AD9F0
		public void columnConstraintListOpt(IndexAffectingStatement statementType, ColumnDefinition vResult)
		{
			for (;;)
			{
				int num = this.LA(1);
				if (num <= 79)
				{
					if (num <= 30)
					{
						if (num != 21 && num != 30)
						{
							break;
						}
					}
					else if (num != 47 && num != 68)
					{
						if (num != 79)
						{
							return;
						}
						IdentityOptions identityOptions = this.identityConstraint(statementType);
						if (this.inputState.guessing == 0)
						{
							if (vResult.IdentityOptions != null)
							{
								TSql80ParserBaseInternal.ThrowParseErrorException("SQL46043", identityOptions, TSqlParserResource.SQL46043Message, new string[0]);
							}
							vResult.IdentityOptions = identityOptions;
							continue;
						}
						continue;
					}
				}
				else if (num <= 118)
				{
					switch (num)
					{
					case 99:
					case 100:
						break;
					default:
						if (num != 118)
						{
							return;
						}
						break;
					}
				}
				else if (num != 127)
				{
					if (num == 136)
					{
						this.rowguidcolConstraint(vResult);
						continue;
					}
					if (num != 159)
					{
						return;
					}
				}
				ConstraintDefinition constraint = this.columnConstraint(statementType);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddConstraintToColumn(constraint, vResult);
				}
			}
		}

		// Token: 0x060017B6 RID: 6070 RVA: 0x000AF8D8 File Offset: 0x000ADAD8
		public ScalarExpression expressionWithFlags(ExpressionFlags expressionFlags)
		{
			return this.expressionBinaryPri2(expressionFlags);
		}

		// Token: 0x060017B7 RID: 6071 RVA: 0x000AF8F0 File Offset: 0x000ADAF0
		public ConstraintDefinition columnConstraint(IndexAffectingStatement statementType)
		{
			ConstraintDefinition constraintDefinition = null;
			IToken token = null;
			Identifier identifier = null;
			try
			{
				int num = this.LA(1);
				if (num <= 68)
				{
					if (num <= 30)
					{
						if (num == 21)
						{
							goto IL_9C;
						}
						if (num == 30)
						{
							token = this.LT(1);
							this.match(30);
							identifier = this.identifier();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
								goto IL_9C;
							}
							goto IL_9C;
						}
					}
					else if (num == 47 || num == 68)
					{
						goto IL_9C;
					}
				}
				else if (num <= 118)
				{
					switch (num)
					{
					case 99:
					case 100:
						goto IL_9C;
					default:
						if (num == 118)
						{
							goto IL_9C;
						}
						break;
					}
				}
				else if (num == 127 || num == 159)
				{
					goto IL_9C;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_9C:
				int num2 = this.LA(1);
				if (num2 > 68)
				{
					if (num2 <= 118)
					{
						switch (num2)
						{
						case 99:
						case 100:
							constraintDefinition = this.nullableConstraint();
							goto IL_134;
						default:
							if (num2 != 118)
							{
								goto IL_121;
							}
							break;
						}
					}
					else
					{
						if (num2 == 127)
						{
							goto IL_10D;
						}
						if (num2 != 159)
						{
							goto IL_121;
						}
					}
					constraintDefinition = this.uniqueColumnConstraint(statementType);
					goto IL_134;
				}
				if (num2 == 21)
				{
					constraintDefinition = this.checkConstraint(statementType);
					goto IL_134;
				}
				if (num2 == 47)
				{
					constraintDefinition = this.defaultColumnConstraint(statementType);
					goto IL_134;
				}
				if (num2 != 68)
				{
					goto IL_121;
				}
				IL_10D:
				constraintDefinition = this.foreignKeyColumnConstraint(statementType);
				goto IL_134;
				IL_121:
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_134:
				if (this.inputState.guessing == 0 && identifier != null)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(constraintDefinition, token);
					constraintDefinition.ConstraintIdentifier = identifier;
				}
			}
			catch (PhaseOneConstraintException)
			{
				if (this.inputState.guessing != 0)
				{
					throw;
				}
			}
			return constraintDefinition;
		}

		// Token: 0x060017B8 RID: 6072 RVA: 0x000AFA80 File Offset: 0x000ADC80
		public void rowguidcolConstraint(ColumnDefinition vParent)
		{
			IToken token = this.LT(1);
			this.match(136);
			if (this.inputState.guessing == 0)
			{
				if (vParent.IsRowGuidCol)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46042", token, TSqlParserResource.SQL46042Message, new string[0]);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.IsRowGuidCol = true;
			}
		}

		// Token: 0x060017B9 RID: 6073 RVA: 0x000AFADC File Offset: 0x000ADCDC
		public IdentityOptions identityConstraint(IndexAffectingStatement statementType)
		{
			IdentityOptions identityOptions = base.FragmentFactory.CreateFragment<IdentityOptions>();
			IToken token = this.LT(1);
			this.match(79);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(identityOptions, token);
			}
			bool flag = false;
			if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_131_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.seedIncrement();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				ScalarExpression scalarExpression = this.seedIncrement();
				if (this.inputState.guessing == 0)
				{
					identityOptions.IdentitySeed = scalarExpression;
				}
				this.match(198);
				scalarExpression = this.seedIncrement();
				if (this.inputState.guessing == 0)
				{
					identityOptions.IdentityIncrement = scalarExpression;
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(identityOptions, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_70_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			bool isIdentityNotForReplication = this.replicationClauseOpt(statementType, identityOptions);
			if (this.inputState.guessing == 0)
			{
				identityOptions.IsIdentityNotForReplication = isIdentityNotForReplication;
			}
			return identityOptions;
		}

		// Token: 0x060017BA RID: 6074 RVA: 0x000AFC78 File Offset: 0x000ADE78
		public bool replicationClauseOpt(IndexAffectingStatement statementType, TSqlFragment vParent)
		{
			bool result = false;
			bool flag = false;
			if (this.LA(1) == 99 && this.LA(2) == 67)
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(99);
					this.match(67);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				IToken atToken = this.LT(1);
				this.match(99);
				this.match(67);
				IToken token = this.LT(1);
				this.match(128);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, atToken);
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					result = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_70_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return result;
		}

		// Token: 0x060017BB RID: 6075 RVA: 0x000AFD8C File Offset: 0x000ADF8C
		public DefaultConstraintDefinition defaultColumnConstraint(IndexAffectingStatement statementType)
		{
			DefaultConstraintDefinition defaultConstraintDefinition = base.FragmentFactory.CreateFragment<DefaultConstraintDefinition>();
			IToken token = this.LT(1);
			this.match(47);
			ScalarExpression expression = this.expressionWithFlags(ExpressionFlags.ScalarSubqueriesDisallowed);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token);
				defaultConstraintDefinition.Expression = expression;
			}
			if (this.LA(1) == 171 && this.LA(2) == 164)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(164);
				if (this.inputState.guessing == 0)
				{
					if (statementType != IndexAffectingStatement.AlterTableAddElement)
					{
						TSql80ParserBaseInternal.ThrowParseErrorException("SQL46013", token, TSqlParserResource.SQL46013Message, new string[0]);
					}
					TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token2);
					defaultConstraintDefinition.WithValues = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_70_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return defaultConstraintDefinition;
		}

		// Token: 0x060017BC RID: 6076 RVA: 0x000AFE88 File Offset: 0x000AE088
		public UniqueConstraintDefinition uniqueColumnConstraint(IndexAffectingStatement statementType)
		{
			UniqueConstraintDefinition uniqueConstraintDefinition = base.FragmentFactory.CreateFragment<UniqueConstraintDefinition>();
			this.uniqueConstraintHeader(uniqueConstraintDefinition, false);
			bool flag = false;
			if (this.LA(1) == 191 && (this.LA(2) == 200 || this.LA(2) == 232 || this.LA(2) == 233))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.columnWithSortOrder();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				ColumnWithSortOrder item = this.columnWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, item);
				}
				while (this.LA(1) == 198)
				{
					this.match(198);
					item = this.columnWithSortOrder();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, item);
					}
				}
				IToken token = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(uniqueConstraintDefinition, token);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_132_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.uniqueConstraintTailOpt(statementType, uniqueConstraintDefinition);
			return uniqueConstraintDefinition;
		}

		// Token: 0x060017BD RID: 6077 RVA: 0x000B0020 File Offset: 0x000AE220
		public ForeignKeyConstraintDefinition foreignKeyColumnConstraint(IndexAffectingStatement statementType)
		{
			ForeignKeyConstraintDefinition foreignKeyConstraintDefinition = base.FragmentFactory.CreateFragment<ForeignKeyConstraintDefinition>();
			int num = this.LA(1);
			if (num != 68)
			{
				if (num != 127)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				IToken token = this.LT(1);
				this.match(68);
				this.match(91);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
					TSql80ParserBaseInternal.UpdateTokenInfo(foreignKeyConstraintDefinition, token);
				}
				this.foreignConstraintColumnsOpt(foreignKeyConstraintDefinition);
			}
			this.foreignKeyConstraintCommonEnd(statementType, foreignKeyConstraintDefinition);
			return foreignKeyConstraintDefinition;
		}

		// Token: 0x060017BE RID: 6078 RVA: 0x000B00A8 File Offset: 0x000AE2A8
		public CheckConstraintDefinition checkConstraint(IndexAffectingStatement statementType)
		{
			CheckConstraintDefinition checkConstraintDefinition = base.FragmentFactory.CreateFragment<CheckConstraintDefinition>();
			IToken token = this.LT(1);
			this.match(21);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(checkConstraintDefinition, token);
				base.ThrowConstraintIfPhaseOne(checkConstraintDefinition);
			}
			bool notForReplication = this.replicationClauseOpt(statementType, checkConstraintDefinition);
			if (this.inputState.guessing == 0)
			{
				checkConstraintDefinition.NotForReplication = notForReplication;
			}
			this.match(191);
			BooleanExpression checkCondition = this.booleanExpressionWithFlags(ExpressionFlags.ScalarSubqueriesDisallowed);
			if (this.inputState.guessing == 0)
			{
				checkConstraintDefinition.CheckCondition = checkCondition;
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(checkConstraintDefinition, token2);
			}
			return checkConstraintDefinition;
		}

		// Token: 0x060017BF RID: 6079 RVA: 0x000B0160 File Offset: 0x000AE360
		public UniqueConstraintDefinition uniqueTableConstraint(IndexAffectingStatement statementType)
		{
			UniqueConstraintDefinition uniqueConstraintDefinition = base.FragmentFactory.CreateFragment<UniqueConstraintDefinition>();
			this.uniqueConstraintHeader(uniqueConstraintDefinition, true);
			this.match(191);
			ColumnWithSortOrder item = this.columnWithSortOrder();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, item);
			}
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.columnWithSortOrder();
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnWithSortOrder>(uniqueConstraintDefinition, uniqueConstraintDefinition.Columns, item);
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(uniqueConstraintDefinition, token);
			}
			this.uniqueConstraintTailOpt(statementType, uniqueConstraintDefinition);
			return uniqueConstraintDefinition;
		}

		// Token: 0x060017C0 RID: 6080 RVA: 0x000B021C File Offset: 0x000AE41C
		public DefaultConstraintDefinition defaultTableConstraint(IndexAffectingStatement statementType)
		{
			DefaultConstraintDefinition defaultConstraintDefinition = base.FragmentFactory.CreateFragment<DefaultConstraintDefinition>();
			IToken token = this.LT(1);
			this.match(47);
			if (this.inputState.guessing == 0)
			{
				if (statementType != IndexAffectingStatement.AlterTableAddElement)
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46014", token, TSqlParserResource.SQL46014Message, new string[0]);
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token);
				base.ThrowConstraintIfPhaseOne(defaultConstraintDefinition);
			}
			ScalarExpression expression = this.expressionWithFlags(ExpressionFlags.ScalarSubqueriesDisallowed);
			this.match(67);
			Identifier column = this.identifier();
			if (this.inputState.guessing == 0)
			{
				defaultConstraintDefinition.Expression = expression;
				defaultConstraintDefinition.Column = column;
			}
			if (this.LA(1) == 171 && this.LA(2) == 164)
			{
				this.match(171);
				IToken token2 = this.LT(1);
				this.match(164);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(defaultConstraintDefinition, token2);
					defaultConstraintDefinition.WithValues = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_133_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_134_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return defaultConstraintDefinition;
		}

		// Token: 0x060017C1 RID: 6081 RVA: 0x000B0344 File Offset: 0x000AE544
		public ForeignKeyConstraintDefinition foreignKeyTableConstraint(IndexAffectingStatement statementType)
		{
			ForeignKeyConstraintDefinition foreignKeyConstraintDefinition = base.FragmentFactory.CreateFragment<ForeignKeyConstraintDefinition>();
			IToken token = this.LT(1);
			this.match(68);
			this.match(91);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(foreignKeyConstraintDefinition, token);
				base.ThrowConstraintIfPhaseOne(foreignKeyConstraintDefinition);
			}
			this.foreignConstraintColumnsOpt(foreignKeyConstraintDefinition);
			this.foreignKeyConstraintCommonEnd(statementType, foreignKeyConstraintDefinition);
			return foreignKeyConstraintDefinition;
		}

		// Token: 0x060017C2 RID: 6082 RVA: 0x000B03AC File Offset: 0x000AE5AC
		public void uniqueConstraintHeader(UniqueConstraintDefinition vParent, bool throwInPhaseOne)
		{
			int num = this.LA(1);
			if (num != 118)
			{
				if (num != 159)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(159);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					vParent.IsPrimaryKey = false;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(118);
				IToken token3 = this.LT(1);
				this.match(91);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
					vParent.IsPrimaryKey = true;
				}
			}
			if (this.inputState.guessing == 0 && throwInPhaseOne)
			{
				base.ThrowConstraintIfPhaseOne(vParent);
			}
			int num2 = this.LA(1);
			if (num2 <= 100)
			{
				if (num2 <= 68)
				{
					if (num2 <= 6)
					{
						if (num2 == 1)
						{
							return;
						}
						switch (num2)
						{
						case 4:
						case 6:
							return;
						}
					}
					else
					{
						switch (num2)
						{
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
						case 28:
						case 30:
							return;
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
						case 25:
						case 26:
						case 27:
						case 29:
							break;
						case 24:
						{
							IToken token4 = this.LT(1);
							this.match(24);
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token4);
								vParent.Clustered = new bool?(true);
								return;
							}
							return;
						}
						default:
							switch (num2)
							{
							case 33:
							case 35:
								return;
							case 34:
								break;
							default:
								switch (num2)
								{
								case 44:
								case 45:
								case 46:
								case 47:
								case 48:
								case 49:
								case 54:
								case 55:
								case 56:
								case 60:
								case 61:
								case 64:
								case 68:
									return;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num2 <= 79)
				{
					switch (num2)
					{
					case 74:
					case 75:
						return;
					default:
						if (num2 == 79)
						{
							return;
						}
						break;
					}
				}
				else
				{
					if (num2 == 82 || num2 == 86)
					{
						return;
					}
					switch (num2)
					{
					case 92:
					case 95:
					case 99:
					case 100:
						return;
					case 98:
					{
						IToken token5 = this.LT(1);
						this.match(98);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token5);
							vParent.Clustered = new bool?(false);
							return;
						}
						return;
					}
					}
				}
			}
			else if (num2 <= 181)
			{
				if (num2 <= 144)
				{
					switch (num2)
					{
					case 105:
					case 106:
						return;
					default:
						switch (num2)
						{
						case 118:
						case 119:
						case 123:
						case 125:
						case 126:
						case 127:
						case 129:
						case 131:
						case 132:
						case 134:
						case 136:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return;
						}
						break;
					}
				}
				else
				{
					switch (num2)
					{
					case 156:
					case 159:
					case 160:
					case 161:
					case 162:
					case 167:
					case 170:
					case 171:
					case 172:
						return;
					case 157:
					case 158:
					case 163:
					case 164:
					case 165:
					case 166:
					case 168:
					case 169:
						break;
					default:
						if (num2 == 176)
						{
							return;
						}
						switch (num2)
						{
						case 180:
						case 181:
							return;
						}
						break;
					}
				}
			}
			else if (num2 <= 198)
			{
				switch (num2)
				{
				case 191:
				case 192:
					return;
				default:
					if (num2 == 198)
					{
						return;
					}
					break;
				}
			}
			else
			{
				if (num2 == 204)
				{
					return;
				}
				switch (num2)
				{
				case 219:
				case 220:
					return;
				default:
					if (num2 == 232)
					{
						return;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017C3 RID: 6083 RVA: 0x000B07F4 File Offset: 0x000AE9F4
		public void uniqueConstraintTailOpt(IndexAffectingStatement statementType, UniqueConstraintDefinition vParent)
		{
			this.uniqueConstraintIndexOptionsOpt(statementType, vParent);
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return;
						}
						switch (num)
						{
						case 4:
						case 6:
							return;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							return;
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num)
							{
							case 28:
							case 30:
								return;
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									return;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 79)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 68:
						return;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
					case 67:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return;
						default:
							if (num == 79)
							{
								return;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					return;
				}
			}
			else if (num <= 176)
			{
				if (num <= 106)
				{
					if (num == 95)
					{
						return;
					}
					switch (num)
					{
					case 99:
					case 100:
						return;
					default:
						switch (num)
						{
						case 105:
						{
							this.LT(1);
							this.match(105);
							FileGroupOrPartitionScheme onFileGroupOrPartitionScheme = this.filegroupOrPartitionScheme();
							if (this.inputState.guessing == 0)
							{
								vParent.OnFileGroupOrPartitionScheme = onFileGroupOrPartitionScheme;
								return;
							}
							return;
						}
						case 106:
							return;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 118:
					case 119:
					case 123:
					case 125:
					case 126:
					case 127:
					case 129:
					case 131:
					case 132:
					case 134:
					case 136:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						return;
					case 120:
					case 121:
					case 122:
					case 124:
					case 128:
					case 130:
					case 133:
					case 135:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 159:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							return;
						case 157:
						case 158:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								return;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 180:
				case 181:
					return;
				default:
					switch (num)
					{
					case 191:
					case 192:
						return;
					default:
						if (num == 198)
						{
							return;
						}
						break;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					return;
				}
				switch (num)
				{
				case 219:
				case 220:
					return;
				default:
					if (num == 232)
					{
						return;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017C4 RID: 6084 RVA: 0x000B0B10 File Offset: 0x000AED10
		public void uniqueConstraintIndexOptionsOpt(IndexAffectingStatement statement, UniqueConstraintDefinition vParent)
		{
			if (this.LA(1) == 171 && (this.LA(2) == 66 || this.LA(2) == 191 || this.LA(2) == 232))
			{
				this.match(171);
				int num = this.LA(1);
				if (num != 66)
				{
					if (num == 191)
					{
						this.indexOptionList(statement, vParent.IndexOptions, vParent);
						return;
					}
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.sortedDataOptions();
					int num2 = this.LA(1);
					if (num2 <= 92)
					{
						if (num2 <= 35)
						{
							if (num2 <= 6)
							{
								if (num2 == 1)
								{
									return;
								}
								switch (num2)
								{
								case 4:
								case 6:
									return;
								}
							}
							else
							{
								switch (num2)
								{
								case 12:
								case 13:
								case 15:
								case 17:
								case 21:
								case 22:
								case 23:
									return;
								case 14:
								case 16:
								case 18:
								case 19:
								case 20:
									break;
								default:
									switch (num2)
									{
									case 28:
									case 30:
										return;
									case 29:
										break;
									default:
										switch (num2)
										{
										case 33:
										case 35:
											return;
										}
										break;
									}
									break;
								}
							}
						}
						else if (num2 <= 79)
						{
							switch (num2)
							{
							case 44:
							case 45:
							case 46:
							case 47:
							case 48:
							case 49:
							case 54:
							case 55:
							case 56:
							case 60:
							case 61:
							case 64:
							case 68:
								return;
							case 50:
							case 51:
							case 52:
							case 53:
							case 57:
							case 58:
							case 59:
							case 62:
							case 63:
							case 65:
							case 67:
								break;
							case 66:
							{
								IndexOption item = this.fillFactorOption();
								if (this.inputState.guessing == 0)
								{
									TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.IndexOptions, item);
									return;
								}
								return;
							}
							default:
								switch (num2)
								{
								case 74:
								case 75:
									return;
								default:
									if (num2 == 79)
									{
										return;
									}
									break;
								}
								break;
							}
						}
						else if (num2 == 82 || num2 == 86 || num2 == 92)
						{
							return;
						}
					}
					else if (num2 <= 176)
					{
						if (num2 <= 106)
						{
							if (num2 == 95)
							{
								return;
							}
							switch (num2)
							{
							case 99:
							case 100:
								return;
							default:
								switch (num2)
								{
								case 105:
								case 106:
									return;
								}
								break;
							}
						}
						else
						{
							switch (num2)
							{
							case 118:
							case 119:
							case 123:
							case 125:
							case 126:
							case 127:
							case 129:
							case 131:
							case 132:
							case 134:
							case 136:
							case 138:
							case 140:
							case 142:
							case 143:
							case 144:
								return;
							case 120:
							case 121:
							case 122:
							case 124:
							case 128:
							case 130:
							case 133:
							case 135:
							case 137:
							case 139:
							case 141:
								break;
							default:
								switch (num2)
								{
								case 156:
								case 159:
								case 160:
								case 161:
								case 162:
								case 167:
								case 170:
								case 171:
								case 172:
									return;
								case 157:
								case 158:
								case 163:
								case 164:
								case 165:
								case 166:
								case 168:
								case 169:
									break;
								default:
									if (num2 == 176)
									{
										return;
									}
									break;
								}
								break;
							}
						}
					}
					else if (num2 <= 198)
					{
						switch (num2)
						{
						case 180:
						case 181:
							return;
						default:
							switch (num2)
							{
							case 191:
							case 192:
								return;
							default:
								if (num2 == 198)
								{
									return;
								}
								break;
							}
							break;
						}
					}
					else
					{
						if (num2 == 204)
						{
							return;
						}
						switch (num2)
						{
						case 219:
						case 220:
							return;
						default:
							if (num2 == 232)
							{
								return;
							}
							break;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				else
				{
					IndexOption item = this.fillFactorOption();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<IndexOption>(vParent, vParent.IndexOptions, item);
					}
					if (this.LA(1) == 232 && TSql90ParserInternal.tokenSet_132_.member(this.LA(2)) && base.NextTokenMatchesOneOf(new string[]
					{
						"SORTED_DATA",
						"SORTED_DATA_REORG"
					}))
					{
						this.sortedDataOptions();
						return;
					}
					if (TSql90ParserInternal.tokenSet_132_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
					{
						return;
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_132_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x060017C5 RID: 6085 RVA: 0x000B0F98 File Offset: 0x000AF198
		public void sortedDataOptions()
		{
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "SORTED_DATA", "SORTED_DATA_REORG");
			}
		}

		// Token: 0x060017C6 RID: 6086 RVA: 0x000B0FD8 File Offset: 0x000AF1D8
		public DeleteUpdateAction deleteUpdateAction(TSqlFragment vParent)
		{
			DeleteUpdateAction result = DeleteUpdateAction.NoAction;
			int num = this.LA(1);
			if (num != 19)
			{
				if (num != 142)
				{
					if (num != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.Match(token, "NO");
					}
					IToken token2 = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token2);
						TSql80ParserBaseInternal.Match(token2, "ACTION");
					}
				}
				else
				{
					this.match(142);
					int num2 = this.LA(1);
					if (num2 != 47)
					{
						if (num2 != 100)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						IToken token3 = this.LT(1);
						this.match(100);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token3);
							result = DeleteUpdateAction.SetNull;
						}
					}
					else
					{
						IToken token4 = this.LT(1);
						this.match(47);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token4);
							result = DeleteUpdateAction.SetDefault;
						}
					}
				}
			}
			else
			{
				IToken token5 = this.LT(1);
				this.match(19);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token5);
					result = DeleteUpdateAction.Cascade;
				}
			}
			return result;
		}

		// Token: 0x060017C7 RID: 6087 RVA: 0x000B1148 File Offset: 0x000AF348
		public void foreignKeyConstraintCommonEnd(IndexAffectingStatement statementType, ForeignKeyConstraintDefinition vParent)
		{
			bool flag = false;
			IToken token = this.LT(1);
			this.match(127);
			SchemaObjectName referenceTableName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ThrowSyntaxErrorIfNotCreateAlterTable(statementType, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
				vParent.ReferenceTableName = referenceTableName;
			}
			bool flag2 = false;
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				int pos = this.mark();
				flag2 = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.identifier();
				}
				catch (RecognitionException)
				{
					flag2 = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag2)
			{
				this.columnNameList(vParent, vParent.ReferencedTableColumns);
			}
			else if (!TSql90ParserInternal.tokenSet_132_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			bool flag3 = false;
			if (this.LA(1) == 105 && this.LA(2) == 48)
			{
				int pos2 = this.mark();
				flag3 = true;
				this.inputState.guessing++;
				try
				{
					this.match(105);
					this.match(48);
				}
				catch (RecognitionException)
				{
					flag3 = false;
				}
				this.rewind(pos2);
				this.inputState.guessing--;
			}
			if (flag3)
			{
				this.match(105);
				this.match(48);
				DeleteUpdateAction deleteUpdateAction = this.deleteUpdateAction(vParent);
				if (this.inputState.guessing == 0)
				{
					vParent.DeleteAction = deleteUpdateAction;
					flag = true;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_132_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_71_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			int num = this.LA(1);
			if (num <= 92)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_85C;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_85C;
						}
					}
					else
					{
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							goto IL_85C;
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num)
							{
							case 28:
							case 30:
								goto IL_85C;
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									goto IL_85C;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 79)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 68:
						goto IL_85C;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
					case 67:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_85C;
						default:
							if (num == 79)
							{
								goto IL_85C;
							}
							break;
						}
						break;
					}
				}
				else if (num == 82 || num == 86 || num == 92)
				{
					goto IL_85C;
				}
			}
			else if (num <= 176)
			{
				if (num <= 106)
				{
					if (num == 95)
					{
						goto IL_85C;
					}
					switch (num)
					{
					case 99:
					case 100:
						goto IL_85C;
					default:
						switch (num)
						{
						case 105:
						{
							this.match(105);
							this.match(160);
							DeleteUpdateAction deleteUpdateAction = this.deleteUpdateAction(vParent);
							if (this.inputState.guessing == 0)
							{
								vParent.UpdateAction = deleteUpdateAction;
							}
							int num2 = this.LA(1);
							if (num2 <= 92)
							{
								if (num2 <= 35)
								{
									if (num2 <= 6)
									{
										if (num2 == 1)
										{
											goto IL_85C;
										}
										switch (num2)
										{
										case 4:
										case 6:
											goto IL_85C;
										}
									}
									else
									{
										switch (num2)
										{
										case 12:
										case 13:
										case 15:
										case 17:
										case 21:
										case 22:
										case 23:
											goto IL_85C;
										case 14:
										case 16:
										case 18:
										case 19:
										case 20:
											break;
										default:
											switch (num2)
											{
											case 28:
											case 30:
												goto IL_85C;
											case 29:
												break;
											default:
												switch (num2)
												{
												case 33:
												case 35:
													goto IL_85C;
												}
												break;
											}
											break;
										}
									}
								}
								else if (num2 <= 79)
								{
									switch (num2)
									{
									case 44:
									case 45:
									case 46:
									case 47:
									case 48:
									case 49:
									case 54:
									case 55:
									case 56:
									case 60:
									case 61:
									case 64:
									case 68:
										goto IL_85C;
									case 50:
									case 51:
									case 52:
									case 53:
									case 57:
									case 58:
									case 59:
									case 62:
									case 63:
									case 65:
									case 66:
									case 67:
										break;
									default:
										switch (num2)
										{
										case 74:
										case 75:
											goto IL_85C;
										default:
											if (num2 == 79)
											{
												goto IL_85C;
											}
											break;
										}
										break;
									}
								}
								else if (num2 == 82 || num2 == 86 || num2 == 92)
								{
									goto IL_85C;
								}
							}
							else if (num2 <= 176)
							{
								if (num2 <= 106)
								{
									if (num2 == 95)
									{
										goto IL_85C;
									}
									switch (num2)
									{
									case 99:
									case 100:
										goto IL_85C;
									default:
										switch (num2)
										{
										case 105:
										{
											IToken token2 = this.LT(1);
											this.match(105);
											this.match(48);
											deleteUpdateAction = this.deleteUpdateAction(vParent);
											if (this.inputState.guessing != 0)
											{
												goto IL_85C;
											}
											if (flag)
											{
												throw TSql80ParserBaseInternal.GetUnexpectedTokenErrorException(token2);
											}
											vParent.DeleteAction = deleteUpdateAction;
											goto IL_85C;
										}
										case 106:
											goto IL_85C;
										}
										break;
									}
								}
								else
								{
									switch (num2)
									{
									case 118:
									case 119:
									case 123:
									case 125:
									case 126:
									case 127:
									case 129:
									case 131:
									case 132:
									case 134:
									case 136:
									case 138:
									case 140:
									case 142:
									case 143:
									case 144:
										goto IL_85C;
									case 120:
									case 121:
									case 122:
									case 124:
									case 128:
									case 130:
									case 133:
									case 135:
									case 137:
									case 139:
									case 141:
										break;
									default:
										switch (num2)
										{
										case 156:
										case 159:
										case 160:
										case 161:
										case 162:
										case 167:
										case 170:
										case 171:
										case 172:
											goto IL_85C;
										case 157:
										case 158:
										case 163:
										case 164:
										case 165:
										case 166:
										case 168:
										case 169:
											break;
										default:
											if (num2 == 176)
											{
												goto IL_85C;
											}
											break;
										}
										break;
									}
								}
							}
							else if (num2 <= 198)
							{
								switch (num2)
								{
								case 180:
								case 181:
									goto IL_85C;
								default:
									switch (num2)
									{
									case 191:
									case 192:
										goto IL_85C;
									default:
										if (num2 == 198)
										{
											goto IL_85C;
										}
										break;
									}
									break;
								}
							}
							else
							{
								if (num2 == 204)
								{
									goto IL_85C;
								}
								switch (num2)
								{
								case 219:
								case 220:
									goto IL_85C;
								default:
									if (num2 == 232)
									{
										goto IL_85C;
									}
									break;
								}
							}
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						case 106:
							goto IL_85C;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 118:
					case 119:
					case 123:
					case 125:
					case 126:
					case 127:
					case 129:
					case 131:
					case 132:
					case 134:
					case 136:
					case 138:
					case 140:
					case 142:
					case 143:
					case 144:
						goto IL_85C;
					case 120:
					case 121:
					case 122:
					case 124:
					case 128:
					case 130:
					case 133:
					case 135:
					case 137:
					case 139:
					case 141:
						break;
					default:
						switch (num)
						{
						case 156:
						case 159:
						case 160:
						case 161:
						case 162:
						case 167:
						case 170:
						case 171:
						case 172:
							goto IL_85C;
						case 157:
						case 158:
						case 163:
						case 164:
						case 165:
						case 166:
						case 168:
						case 169:
							break;
						default:
							if (num == 176)
							{
								goto IL_85C;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 180:
				case 181:
					goto IL_85C;
				default:
					switch (num)
					{
					case 191:
					case 192:
						goto IL_85C;
					default:
						if (num == 198)
						{
							goto IL_85C;
						}
						break;
					}
					break;
				}
			}
			else
			{
				if (num == 204)
				{
					goto IL_85C;
				}
				switch (num)
				{
				case 219:
				case 220:
					goto IL_85C;
				default:
					if (num == 232)
					{
						goto IL_85C;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_85C:
			bool notForReplication = this.replicationClauseOpt(statementType, vParent);
			if (this.inputState.guessing == 0)
			{
				vParent.NotForReplication = notForReplication;
			}
		}

		// Token: 0x060017C8 RID: 6088 RVA: 0x000B19EC File Offset: 0x000AFBEC
		public void foreignConstraintColumnsOpt(ForeignKeyConstraintDefinition vParent)
		{
			int num = this.LA(1);
			if (num == 127)
			{
				return;
			}
			if (num == 191)
			{
				this.columnNameList(vParent, vParent.Columns);
				return;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017C9 RID: 6089 RVA: 0x000B1A30 File Offset: 0x000AFC30
		public BooleanExpression booleanExpressionWithFlags(ExpressionFlags expressionFlags)
		{
			return this.booleanExpressionOr(expressionFlags);
		}

		// Token: 0x060017CA RID: 6090 RVA: 0x000B1A48 File Offset: 0x000AFC48
		public XmlDataTypeReference xmlDataType(SchemaObjectName vName)
		{
			XmlDataTypeReference xmlDataTypeReference = base.FragmentFactory.CreateFragment<XmlDataTypeReference>();
			xmlDataTypeReference.Name = vName;
			xmlDataTypeReference.UpdateTokenInfo(vName);
			bool flag = false;
			if (this.LA(1) == 191 && (this.LA(2) == 232 || this.LA(2) == 233))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					this.identifier();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				if (this.LA(1) == 232 && (this.LA(2) == 232 || this.LA(2) == 233))
				{
					IToken token = this.LT(1);
					this.match(232);
					if (this.inputState.guessing == 0)
					{
						xmlDataTypeReference.XmlDataTypeOption = XmlDataTypeOptionHelper.Instance.ParseOption(token);
					}
				}
				else if ((this.LA(1) != 232 && this.LA(1) != 233) || (this.LA(2) != 192 && this.LA(2) != 200))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				SchemaObjectName xmlSchemaCollection = this.dataTypeSchemaObjectName();
				if (this.inputState.guessing == 0)
				{
					xmlDataTypeReference.XmlSchemaCollection = xmlSchemaCollection;
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(xmlDataTypeReference, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_0_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return xmlDataTypeReference;
		}

		// Token: 0x060017CB RID: 6091 RVA: 0x000B1C3C File Offset: 0x000AFE3C
		public SchemaObjectName dataTypeSchemaObjectName()
		{
			SchemaObjectName schemaObjectName = base.FragmentFactory.CreateFragment<SchemaObjectName>();
			Identifier item = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, item);
			}
			int num = this.LA(1);
			if (num <= 86)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							return schemaObjectName;
						}
						switch (num)
						{
						case 4:
						case 6:
							return schemaObjectName;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							return schemaObjectName;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num)
							{
							case 26:
							case 28:
							case 30:
								return schemaObjectName;
							case 27:
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									return schemaObjectName;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 67:
					case 68:
						return schemaObjectName;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							return schemaObjectName;
						}
						break;
					}
				}
				else if (num == 79 || num == 82 || num == 86)
				{
					return schemaObjectName;
				}
			}
			else if (num <= 144)
			{
				if (num <= 95)
				{
					if (num == 92 || num == 95)
					{
						return schemaObjectName;
					}
				}
				else
				{
					switch (num)
					{
					case 99:
					case 100:
						return schemaObjectName;
					default:
						if (num == 106)
						{
							return schemaObjectName;
						}
						switch (num)
						{
						case 118:
						case 119:
						case 123:
						case 125:
						case 126:
						case 127:
						case 129:
						case 131:
						case 132:
						case 134:
						case 136:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							return schemaObjectName;
						}
						break;
					}
				}
			}
			else if (num <= 200)
			{
				switch (num)
				{
				case 156:
				case 159:
				case 160:
				case 161:
				case 162:
				case 165:
				case 167:
				case 170:
				case 171:
				case 172:
				case 175:
				case 176:
				case 180:
				case 181:
					return schemaObjectName;
				case 157:
				case 158:
				case 163:
				case 164:
				case 166:
				case 168:
				case 169:
				case 173:
				case 174:
				case 177:
				case 178:
				case 179:
					break;
				default:
					switch (num)
					{
					case 191:
					case 192:
						return schemaObjectName;
					default:
						switch (num)
						{
						case 198:
							return schemaObjectName;
						case 200:
							this.match(200);
							item = this.identifier();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Identifier>(schemaObjectName, schemaObjectName.Identifiers, item);
								return schemaObjectName;
							}
							return schemaObjectName;
						}
						break;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 204:
				case 206:
					return schemaObjectName;
				case 205:
					break;
				default:
					switch (num)
					{
					case 219:
					case 220:
						return schemaObjectName;
					default:
						switch (num)
						{
						case 230:
						case 231:
						case 232:
						case 234:
							return schemaObjectName;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017CC RID: 6092 RVA: 0x000B1FCC File Offset: 0x000B01CC
		public SqlDataTypeReference sqlDataTypeWithoutNational(SchemaObjectName vName, SqlDataTypeOption vType)
		{
			SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
			sqlDataTypeReference.Name = vName;
			sqlDataTypeReference.SqlDataTypeOption = vType;
			sqlDataTypeReference.UpdateTokenInfo(vName);
			bool isVarying = false;
			int num = this.LA(1);
			if (num <= 86)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_369;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_369;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							goto IL_369;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num)
							{
							case 26:
							case 28:
							case 30:
								goto IL_369;
							case 27:
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									goto IL_369;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 67:
					case 68:
						goto IL_369;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_369;
						}
						break;
					}
				}
				else if (num == 79 || num == 82 || num == 86)
				{
					goto IL_369;
				}
			}
			else if (num <= 144)
			{
				if (num <= 95)
				{
					if (num == 92 || num == 95)
					{
						goto IL_369;
					}
				}
				else
				{
					switch (num)
					{
					case 99:
					case 100:
						goto IL_369;
					default:
						if (num == 106)
						{
							goto IL_369;
						}
						switch (num)
						{
						case 118:
						case 119:
						case 123:
						case 125:
						case 126:
						case 127:
						case 129:
						case 131:
						case 132:
						case 134:
						case 136:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_369;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 156:
				case 159:
				case 160:
				case 161:
				case 162:
				case 167:
				case 170:
				case 171:
				case 172:
				case 175:
				case 176:
				case 180:
				case 181:
					goto IL_369;
				case 157:
				case 158:
				case 163:
				case 164:
				case 166:
				case 168:
				case 169:
				case 173:
				case 174:
				case 177:
				case 178:
				case 179:
					break;
				case 165:
				{
					IToken token = this.LT(1);
					this.match(165);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token);
						isVarying = true;
						goto IL_369;
					}
					goto IL_369;
				}
				default:
					switch (num)
					{
					case 191:
					case 192:
						goto IL_369;
					default:
						if (num == 198)
						{
							goto IL_369;
						}
						break;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 204:
				case 206:
					goto IL_369;
				case 205:
					break;
				default:
					switch (num)
					{
					case 219:
					case 220:
						goto IL_369;
					default:
						switch (num)
						{
						case 230:
						case 231:
						case 232:
						case 234:
							goto IL_369;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_369:
			this.dataTypeParametersOpt(sqlDataTypeReference);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ProcessNationalAndVarying(sqlDataTypeReference, null, isVarying);
				TSql80ParserBaseInternal.CheckSqlDataTypeParameters(sqlDataTypeReference);
			}
			return sqlDataTypeReference;
		}

		// Token: 0x060017CD RID: 6093 RVA: 0x000B2368 File Offset: 0x000B0568
		public UserDataTypeReference userDataType(SchemaObjectName vName)
		{
			UserDataTypeReference userDataTypeReference = base.FragmentFactory.CreateFragment<UserDataTypeReference>();
			userDataTypeReference.Name = vName;
			userDataTypeReference.UpdateTokenInfo(vName);
			this.dataTypeParametersOpt(userDataTypeReference);
			return userDataTypeReference;
		}

		// Token: 0x060017CE RID: 6094 RVA: 0x000B2398 File Offset: 0x000B0598
		public SqlDataTypeReference doubleDataType()
		{
			SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
			IToken doubleToken = this.LT(1);
			this.match(53);
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "PRECISION");
				sqlDataTypeReference.SqlDataTypeOption = SqlDataTypeOption.Float;
				base.SetNameForDoublePrecisionType(sqlDataTypeReference, doubleToken, token);
			}
			bool flag = false;
			if (this.LA(1) == 191 && (this.LA(2) == 221 || this.LA(2) == 232))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					int num = this.LA(1);
					if (num != 221)
					{
						if (num != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(232);
					}
					else
					{
						this.integer();
					}
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				int num2 = this.LA(1);
				if (num2 != 221)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					Literal item = this.max();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(sqlDataTypeReference, sqlDataTypeReference.Parameters, item);
					}
				}
				else
				{
					Literal item = this.integer();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(sqlDataTypeReference, sqlDataTypeReference.Parameters, item);
					}
				}
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token2);
				}
			}
			else if (!TSql90ParserInternal.tokenSet_0_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return sqlDataTypeReference;
		}

		// Token: 0x060017CF RID: 6095 RVA: 0x000B25C8 File Offset: 0x000B07C8
		public SqlDataTypeReference sqlDataTypeWithNational()
		{
			SqlDataTypeReference sqlDataTypeReference = base.FragmentFactory.CreateFragment<SqlDataTypeReference>();
			bool isVarying = false;
			IToken token = this.LT(1);
			this.match(96);
			SchemaObjectName schemaObjectName = this.dataTypeSchemaObjectName();
			if (this.inputState.guessing == 0)
			{
				sqlDataTypeReference.SqlDataTypeOption = TSql80ParserBaseInternal.ParseDataType(schemaObjectName.BaseIdentifier.Value);
				if (sqlDataTypeReference.SqlDataTypeOption == SqlDataTypeOption.None || (schemaObjectName.SchemaIdentifier != null && !TSql90ParserBaseInternal.IsSys(schemaObjectName.SchemaIdentifier)))
				{
					TSql80ParserBaseInternal.ThrowParseErrorException("SQL46003", token, TSqlParserResource.SQL46003Message, new string[]
					{
						TSqlParserResource.UserDefined
					});
				}
				sqlDataTypeReference.Name = schemaObjectName;
				TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token);
				sqlDataTypeReference.UpdateTokenInfo(schemaObjectName);
			}
			int num = this.LA(1);
			if (num <= 86)
			{
				if (num <= 35)
				{
					if (num <= 6)
					{
						if (num == 1)
						{
							goto IL_404;
						}
						switch (num)
						{
						case 4:
						case 6:
							goto IL_404;
						}
					}
					else
					{
						switch (num)
						{
						case 9:
						case 12:
						case 13:
						case 15:
						case 17:
						case 21:
						case 22:
						case 23:
							goto IL_404;
						case 10:
						case 11:
						case 14:
						case 16:
						case 18:
						case 19:
						case 20:
							break;
						default:
							switch (num)
							{
							case 26:
							case 28:
							case 30:
								goto IL_404;
							case 27:
							case 29:
								break;
							default:
								switch (num)
								{
								case 33:
								case 35:
									goto IL_404;
								}
								break;
							}
							break;
						}
					}
				}
				else if (num <= 75)
				{
					switch (num)
					{
					case 44:
					case 45:
					case 46:
					case 47:
					case 48:
					case 49:
					case 54:
					case 55:
					case 56:
					case 60:
					case 61:
					case 64:
					case 67:
					case 68:
						goto IL_404;
					case 50:
					case 51:
					case 52:
					case 53:
					case 57:
					case 58:
					case 59:
					case 62:
					case 63:
					case 65:
					case 66:
						break;
					default:
						switch (num)
						{
						case 74:
						case 75:
							goto IL_404;
						}
						break;
					}
				}
				else if (num == 79 || num == 82 || num == 86)
				{
					goto IL_404;
				}
			}
			else if (num <= 144)
			{
				if (num <= 95)
				{
					if (num == 92 || num == 95)
					{
						goto IL_404;
					}
				}
				else
				{
					switch (num)
					{
					case 99:
					case 100:
						goto IL_404;
					default:
						if (num == 106)
						{
							goto IL_404;
						}
						switch (num)
						{
						case 118:
						case 119:
						case 123:
						case 125:
						case 126:
						case 127:
						case 129:
						case 131:
						case 132:
						case 134:
						case 136:
						case 138:
						case 140:
						case 142:
						case 143:
						case 144:
							goto IL_404;
						}
						break;
					}
				}
			}
			else if (num <= 198)
			{
				switch (num)
				{
				case 156:
				case 159:
				case 160:
				case 161:
				case 162:
				case 167:
				case 170:
				case 171:
				case 172:
				case 175:
				case 176:
				case 180:
				case 181:
					goto IL_404;
				case 157:
				case 158:
				case 163:
				case 164:
				case 166:
				case 168:
				case 169:
				case 173:
				case 174:
				case 177:
				case 178:
				case 179:
					break;
				case 165:
				{
					IToken token2 = this.LT(1);
					this.match(165);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(sqlDataTypeReference, token2);
						isVarying = true;
						goto IL_404;
					}
					goto IL_404;
				}
				default:
					switch (num)
					{
					case 191:
					case 192:
						goto IL_404;
					default:
						if (num == 198)
						{
							goto IL_404;
						}
						break;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 204:
				case 206:
					goto IL_404;
				case 205:
					break;
				default:
					switch (num)
					{
					case 219:
					case 220:
						goto IL_404;
					default:
						switch (num)
						{
						case 230:
						case 231:
						case 232:
						case 234:
							goto IL_404;
						}
						break;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_404:
			this.dataTypeParametersOpt(sqlDataTypeReference);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.ProcessNationalAndVarying(sqlDataTypeReference, token, isVarying);
				TSql80ParserBaseInternal.CheckSqlDataTypeParameters(sqlDataTypeReference);
			}
			return sqlDataTypeReference;
		}

		// Token: 0x060017D0 RID: 6096 RVA: 0x000B2A00 File Offset: 0x000B0C00
		public void dataTypeParametersOpt(ParameterizedDataTypeReference vParent)
		{
			bool flag = false;
			if (this.LA(1) == 191 && (this.LA(2) == 221 || this.LA(2) == 232))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.match(191);
					int num = this.LA(1);
					if (num != 221)
					{
						if (num != 232)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(232);
					}
					else
					{
						this.integer();
					}
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			if (flag)
			{
				this.match(191);
				int num2 = this.LA(1);
				if (num2 != 221)
				{
					if (num2 != 232)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					Literal item = this.max();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.Parameters, item);
					}
				}
				else
				{
					Literal item = this.integer();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.Parameters, item);
					}
					int num3 = this.LA(1);
					if (num3 != 192)
					{
						if (num3 != 198)
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						this.match(198);
						item = this.integer();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<Literal>(vParent, vParent.Parameters, item);
						}
					}
				}
				IToken token = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
					return;
				}
				return;
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_0_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_1_.member(this.LA(2)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x060017D1 RID: 6097 RVA: 0x000B2C2C File Offset: 0x000B0E2C
		public MaxLiteral max()
		{
			MaxLiteral maxLiteral = base.FragmentFactory.CreateFragment<MaxLiteral>();
			IToken token = this.LT(1);
			this.match(232);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "MAX");
				TSql80ParserBaseInternal.UpdateTokenInfo(maxLiteral, token);
				maxLiteral.Value = token.getText();
			}
			return maxLiteral;
		}

		// Token: 0x060017D2 RID: 6098 RVA: 0x000B2C88 File Offset: 0x000B0E88
		public void identifierListElement(List<Identifier> vParent, int vMaxNumber, bool first)
		{
			IToken token = this.LT(1);
			this.match(200);
			Identifier item;
			if (this.inputState.guessing == 0 && first)
			{
				item = base.GetEmptyIdentifier(token);
				TSql80ParserBaseInternal.AddIdentifierToListWithCheck(vParent, item, vMaxNumber);
			}
			while (this.LA(1) == 200)
			{
				IToken token2 = this.LT(1);
				this.match(200);
				if (this.inputState.guessing == 0)
				{
					item = base.GetEmptyIdentifier(token2);
					TSql80ParserBaseInternal.AddIdentifierToListWithCheck(vParent, item, vMaxNumber);
				}
			}
			item = this.identifier();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddIdentifierToListWithCheck(vParent, item, vMaxNumber);
			}
		}

		// Token: 0x060017D3 RID: 6099 RVA: 0x000B2D28 File Offset: 0x000B0F28
		public BooleanExpression booleanExpressionOr(ExpressionFlags expressionFlags)
		{
			BooleanExpression result = null;
			result = this.booleanExpressionAnd(expressionFlags);
			while (this.LA(1) == 112)
			{
				this.match(112);
				BooleanExpression expression = this.booleanExpressionAnd(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					base.AddBinaryExpression(ref result, expression, BooleanBinaryExpressionType.Or);
				}
			}
			return result;
		}

		// Token: 0x060017D4 RID: 6100 RVA: 0x000B2D74 File Offset: 0x000B0F74
		public BooleanExpression booleanExpressionAnd(ExpressionFlags expressionFlags)
		{
			BooleanExpression result = null;
			result = this.booleanExpressionUnary(expressionFlags);
			while (this.LA(1) == 7)
			{
				this.match(7);
				BooleanExpression expression = this.booleanExpressionUnary(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					base.AddBinaryExpression(ref result, expression, BooleanBinaryExpressionType.And);
				}
			}
			return result;
		}

		// Token: 0x060017D5 RID: 6101 RVA: 0x000B2DC0 File Offset: 0x000B0FC0
		public BooleanExpression booleanExpressionUnary(ExpressionFlags expressionFlags)
		{
			BooleanExpression result = null;
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num != 20 && num != 25)
						{
							goto IL_220;
						}
					}
					else if (num != 31 && num != 34)
					{
						switch (num)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_220;
						}
					}
				}
				else if (num <= 69)
				{
					if (num != 62 && num != 69)
					{
						goto IL_220;
					}
				}
				else if (num != 81 && num != 93)
				{
					switch (num)
					{
					case 99:
					{
						IToken token = this.LT(1);
						this.match(99);
						BooleanExpression expression = this.booleanExpressionUnary(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							BooleanNotExpression booleanNotExpression = base.FragmentFactory.CreateFragment<BooleanNotExpression>();
							result = booleanNotExpression;
							TSql80ParserBaseInternal.UpdateTokenInfo(booleanNotExpression, token);
							booleanNotExpression.Expression = expression;
							return result;
						}
						return result;
					}
					case 100:
					case 101:
						break;
					default:
						goto IL_220;
					}
				}
			}
			else if (num <= 157)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_220;
					}
				}
				else if (num != 141 && num != 147 && num != 157)
				{
					goto IL_220;
				}
			}
			else if (num <= 163)
			{
				if (num != 160 && num != 163)
				{
					goto IL_220;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
					break;
				case 192:
					goto IL_220;
				default:
					switch (num)
					{
					case 197:
					case 199:
					case 200:
						break;
					case 198:
						goto IL_220;
					default:
						switch (num)
						{
						case 211:
						case 221:
						case 222:
						case 223:
						case 224:
						case 225:
						case 227:
						case 228:
						case 230:
						case 231:
						case 232:
						case 233:
						case 234:
						case 235:
							break;
						case 212:
						case 213:
						case 214:
						case 215:
						case 216:
						case 217:
						case 218:
						case 219:
						case 220:
						case 226:
						case 229:
							goto IL_220;
						default:
							goto IL_220;
						}
						break;
					}
					break;
				}
			}
			return this.booleanExpressionPrimary(expressionFlags);
			IL_220:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017D6 RID: 6102 RVA: 0x000B3004 File Offset: 0x000B1204
		public BooleanExpression booleanExpressionPrimary(ExpressionFlags expressionFlags)
		{
			IToken token = null;
			bool vNotDefined = false;
			BooleanComparisonType vType = BooleanComparisonType.Equals;
			int num = this.LA(1);
			if (num <= 62)
			{
				if (num != 31)
				{
					if (num != 62)
					{
						goto IL_71;
					}
					return this.existsPredicate(expressionFlags);
				}
			}
			else if (num != 69)
			{
				if (num == 157)
				{
					return this.tsEqualCall();
				}
				if (num != 160)
				{
					goto IL_71;
				}
				return this.updateCall();
			}
			return this.fulltextPredicate();
			IL_71:
			BooleanExpression booleanExpression;
			if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_106_.member(this.LA(2)) && base.IsNextRuleBooleanParenthesis())
			{
				booleanExpression = this.booleanExpressionParenthesis();
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_38_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_135_.member(this.LA(2)))
				{
					ScalarExpression vExpressionFirst = this.expressionWithFlags(expressionFlags);
					int num2 = this.LA(1);
					if (num2 > 94)
					{
						if (num2 > 188)
						{
							if (num2 != 196)
							{
								switch (num2)
								{
								case 205:
								case 206:
								case 208:
									goto IL_16B;
								case 207:
									break;
								default:
									goto IL_43E;
								}
							}
							return this.joinPredicate(vExpressionFirst, vType, expressionFlags);
						}
						if (num2 == 99)
						{
							goto IL_374;
						}
						if (num2 != 188)
						{
							goto IL_43E;
						}
						IL_16B:
						vType = this.comparisonOperator();
						int num3 = this.LA(1);
						if (num3 <= 93)
						{
							if (num3 <= 25)
							{
								if (num3 <= 8)
								{
									if (num3 != 5 && num3 != 8)
									{
										goto IL_344;
									}
									goto IL_334;
								}
								else if (num3 != 20 && num3 != 25)
								{
									goto IL_344;
								}
							}
							else if (num3 <= 41)
							{
								if (num3 != 34)
								{
									switch (num3)
									{
									case 40:
									case 41:
										break;
									default:
										goto IL_344;
									}
								}
							}
							else if (num3 != 81 && num3 != 93)
							{
								goto IL_344;
							}
						}
						else if (num3 <= 141)
						{
							if (num3 <= 133)
							{
								switch (num3)
								{
								case 100:
								case 101:
									break;
								default:
									if (num3 != 133)
									{
										goto IL_344;
									}
									break;
								}
							}
							else if (num3 != 136 && num3 != 141)
							{
								goto IL_344;
							}
						}
						else if (num3 <= 163)
						{
							switch (num3)
							{
							case 145:
								goto IL_334;
							case 146:
								goto IL_344;
							case 147:
								break;
							default:
								if (num3 != 163)
								{
									goto IL_344;
								}
								break;
							}
						}
						else
						{
							switch (num3)
							{
							case 191:
							case 193:
								break;
							case 192:
								goto IL_344;
							default:
								switch (num3)
								{
								case 197:
								case 199:
								case 200:
									break;
								case 198:
									goto IL_344;
								default:
									switch (num3)
									{
									case 211:
									case 221:
									case 222:
									case 223:
									case 224:
									case 225:
									case 227:
									case 228:
									case 230:
									case 231:
									case 232:
									case 233:
									case 234:
									case 235:
										break;
									case 212:
									case 213:
									case 214:
									case 215:
									case 216:
									case 217:
									case 218:
									case 219:
									case 220:
									case 226:
									case 229:
										goto IL_344;
									default:
										goto IL_344;
									}
									break;
								}
								break;
							}
						}
						return this.comparisonPredicate(vExpressionFirst, vType, expressionFlags);
						IL_334:
						return this.subqueryComparisonPredicate(vExpressionFirst, vType, expressionFlags);
						IL_344:
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (num2 <= 83)
					{
						if (num2 != 14 && num2 != 83)
						{
							goto IL_43E;
						}
					}
					else
					{
						if (num2 == 89)
						{
							return this.isPredicate(vExpressionFirst);
						}
						if (num2 != 94)
						{
							goto IL_43E;
						}
					}
					IL_374:
					int num4 = this.LA(1);
					if (num4 <= 83)
					{
						if (num4 == 14 || num4 == 83)
						{
							goto IL_3D1;
						}
					}
					else
					{
						if (num4 == 94)
						{
							goto IL_3D1;
						}
						if (num4 == 99)
						{
							token = this.LT(1);
							this.match(99);
							if (this.inputState.guessing == 0)
							{
								vNotDefined = true;
								goto IL_3D1;
							}
							goto IL_3D1;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
					IL_3D1:
					int num5 = this.LA(1);
					if (num5 != 14)
					{
						if (num5 != 83)
						{
							if (num5 != 94)
							{
								throw new NoViableAltException(this.LT(1), this.getFilename());
							}
							booleanExpression = this.likePredicate(vExpressionFirst, vNotDefined, expressionFlags);
						}
						else
						{
							booleanExpression = this.inPredicate(vExpressionFirst, vNotDefined, expressionFlags);
						}
					}
					else
					{
						booleanExpression = this.betweenPredicate(vExpressionFirst, vNotDefined, expressionFlags);
					}
					if (this.inputState.guessing == 0 && token != null)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(booleanExpression, token);
						return booleanExpression;
					}
					return booleanExpression;
					IL_43E:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return booleanExpression;
		}

		// Token: 0x060017D7 RID: 6103 RVA: 0x000B3478 File Offset: 0x000B1678
		public BooleanParenthesisExpression booleanExpressionParenthesis()
		{
			BooleanParenthesisExpression booleanParenthesisExpression = base.FragmentFactory.CreateFragment<BooleanParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			BooleanExpression expression = this.booleanExpression();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token);
				booleanParenthesisExpression.Expression = expression;
				TSql80ParserBaseInternal.UpdateTokenInfo(booleanParenthesisExpression, token2);
			}
			return booleanParenthesisExpression;
		}

		// Token: 0x060017D8 RID: 6104 RVA: 0x000B34E8 File Offset: 0x000B16E8
		public BooleanComparisonType comparisonOperator()
		{
			BooleanComparisonType result = BooleanComparisonType.Equals;
			int num = this.LA(1);
			if (num != 188)
			{
				switch (num)
				{
				case 205:
				{
					this.match(205);
					if (this.inputState.guessing == 0)
					{
						result = BooleanComparisonType.LessThan;
					}
					int num2 = this.LA(1);
					if (num2 <= 93)
					{
						if (num2 <= 25)
						{
							if (num2 <= 8)
							{
								if (num2 == 5 || num2 == 8)
								{
									return result;
								}
							}
							else if (num2 == 20 || num2 == 25)
							{
								return result;
							}
						}
						else if (num2 <= 41)
						{
							if (num2 == 34)
							{
								return result;
							}
							switch (num2)
							{
							case 40:
							case 41:
								return result;
							}
						}
						else if (num2 == 81 || num2 == 93)
						{
							return result;
						}
					}
					else if (num2 <= 141)
					{
						if (num2 <= 133)
						{
							switch (num2)
							{
							case 100:
							case 101:
								return result;
							default:
								if (num2 == 133)
								{
									return result;
								}
								break;
							}
						}
						else if (num2 == 136 || num2 == 141)
						{
							return result;
						}
					}
					else if (num2 <= 163)
					{
						switch (num2)
						{
						case 145:
						case 147:
							return result;
						case 146:
							break;
						default:
							if (num2 == 163)
							{
								return result;
							}
							break;
						}
					}
					else
					{
						switch (num2)
						{
						case 191:
						case 193:
							return result;
						case 192:
							break;
						default:
							switch (num2)
							{
							case 197:
							case 199:
							case 200:
								return result;
							case 198:
								break;
							default:
								switch (num2)
								{
								case 206:
									this.match(206);
									if (this.inputState.guessing == 0)
									{
										return BooleanComparisonType.LessThanOrEqualTo;
									}
									return result;
								case 208:
									this.match(208);
									if (this.inputState.guessing == 0)
									{
										return BooleanComparisonType.NotEqualToBrackets;
									}
									return result;
								case 211:
								case 221:
								case 222:
								case 223:
								case 224:
								case 225:
								case 227:
								case 228:
								case 230:
								case 231:
								case 232:
								case 233:
								case 234:
								case 235:
									return result;
								}
								break;
							}
							break;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				case 206:
					this.match(206);
					if (this.inputState.guessing == 0)
					{
						return BooleanComparisonType.Equals;
					}
					return result;
				case 208:
				{
					this.match(208);
					if (this.inputState.guessing == 0)
					{
						result = BooleanComparisonType.GreaterThan;
					}
					int num3 = this.LA(1);
					if (num3 <= 101)
					{
						if (num3 <= 25)
						{
							if (num3 <= 8)
							{
								if (num3 == 5 || num3 == 8)
								{
									return result;
								}
							}
							else if (num3 == 20 || num3 == 25)
							{
								return result;
							}
						}
						else if (num3 <= 41)
						{
							if (num3 == 34)
							{
								return result;
							}
							switch (num3)
							{
							case 40:
							case 41:
								return result;
							}
						}
						else
						{
							if (num3 == 81 || num3 == 93)
							{
								return result;
							}
							switch (num3)
							{
							case 100:
							case 101:
								return result;
							}
						}
					}
					else if (num3 <= 147)
					{
						if (num3 <= 136)
						{
							if (num3 == 133 || num3 == 136)
							{
								return result;
							}
						}
						else
						{
							if (num3 == 141)
							{
								return result;
							}
							switch (num3)
							{
							case 145:
							case 147:
								return result;
							}
						}
					}
					else if (num3 <= 193)
					{
						if (num3 == 163)
						{
							return result;
						}
						switch (num3)
						{
						case 191:
						case 193:
							return result;
						}
					}
					else
					{
						switch (num3)
						{
						case 197:
						case 199:
						case 200:
							return result;
						case 198:
							break;
						default:
							if (num3 != 206)
							{
								switch (num3)
								{
								case 211:
								case 221:
								case 222:
								case 223:
								case 224:
								case 225:
								case 227:
								case 228:
								case 230:
								case 231:
								case 232:
								case 233:
								case 234:
								case 235:
									return result;
								}
							}
							else
							{
								this.match(206);
								if (this.inputState.guessing == 0)
								{
									return BooleanComparisonType.GreaterThanOrEqualTo;
								}
								return result;
							}
							break;
						}
					}
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			this.match(188);
			switch (this.LA(1))
			{
			case 205:
				this.match(205);
				if (this.inputState.guessing == 0)
				{
					return BooleanComparisonType.NotLessThan;
				}
				return result;
			case 206:
				this.match(206);
				if (this.inputState.guessing == 0)
				{
					return BooleanComparisonType.NotEqualToExclamation;
				}
				return result;
			case 208:
				this.match(208);
				if (this.inputState.guessing == 0)
				{
					return BooleanComparisonType.NotGreaterThan;
				}
				return result;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017D9 RID: 6105 RVA: 0x000B3A08 File Offset: 0x000B1C08
		public BooleanComparisonExpression comparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags)
		{
			BooleanComparisonExpression booleanComparisonExpression = base.FragmentFactory.CreateFragment<BooleanComparisonExpression>();
			ScalarExpression secondExpression = this.expressionWithFlags(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				booleanComparisonExpression.ComparisonType = vType;
				booleanComparisonExpression.FirstExpression = vExpressionFirst;
				booleanComparisonExpression.SecondExpression = secondExpression;
			}
			return booleanComparisonExpression;
		}

		// Token: 0x060017DA RID: 6106 RVA: 0x000B3A4C File Offset: 0x000B1C4C
		public SubqueryComparisonPredicate subqueryComparisonPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags)
		{
			SubqueryComparisonPredicate subqueryComparisonPredicate = base.FragmentFactory.CreateFragment<SubqueryComparisonPredicate>();
			SubqueryComparisonPredicateType subqueryComparisonPredicateType = this.subqueryComparisonPredicateType();
			ScalarSubquery subquery = this.subquery(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				subqueryComparisonPredicate.ComparisonType = vType;
				subqueryComparisonPredicate.Expression = vExpressionFirst;
				subqueryComparisonPredicate.SubqueryComparisonPredicateType = subqueryComparisonPredicateType;
				subqueryComparisonPredicate.Subquery = subquery;
			}
			return subqueryComparisonPredicate;
		}

		// Token: 0x060017DB RID: 6107 RVA: 0x000B3AA0 File Offset: 0x000B1CA0
		public BooleanComparisonExpression joinPredicate(ScalarExpression vExpressionFirst, BooleanComparisonType vType, ExpressionFlags expressionFlags)
		{
			BooleanComparisonExpression booleanComparisonExpression = base.FragmentFactory.CreateFragment<BooleanComparisonExpression>();
			vType = this.joinOperator();
			ScalarExpression secondExpression = this.expressionWithFlags(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				booleanComparisonExpression.ComparisonType = vType;
				booleanComparisonExpression.FirstExpression = vExpressionFirst;
				booleanComparisonExpression.SecondExpression = secondExpression;
			}
			return booleanComparisonExpression;
		}

		// Token: 0x060017DC RID: 6108 RVA: 0x000B3AEC File Offset: 0x000B1CEC
		public BooleanIsNullExpression isPredicate(ScalarExpression vExpressionFirst)
		{
			BooleanIsNullExpression booleanIsNullExpression = base.FragmentFactory.CreateFragment<BooleanIsNullExpression>();
			this.match(89);
			bool flag = this.nullNotNull(booleanIsNullExpression);
			if (this.inputState.guessing == 0)
			{
				booleanIsNullExpression.Expression = vExpressionFirst;
				booleanIsNullExpression.IsNot = !flag;
			}
			return booleanIsNullExpression;
		}

		// Token: 0x060017DD RID: 6109 RVA: 0x000B3B34 File Offset: 0x000B1D34
		public InPredicate inPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags)
		{
			InPredicate inPredicate = base.FragmentFactory.CreateFragment<InPredicate>();
			IToken token = this.LT(1);
			this.match(83);
			if (this.inputState.guessing == 0)
			{
				if (vNotDefined)
				{
					inPredicate.NotDefined = true;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(inPredicate, token);
				inPredicate.Expression = vExpressionFirst;
			}
			if (this.LA(1) == 191 && (this.LA(2) == 140 || this.LA(2) == 191) && base.IsNextRuleSelectParenthesis())
			{
				ScalarSubquery subquery = this.subquery(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					inPredicate.Subquery = subquery;
				}
			}
			else
			{
				if (this.LA(1) != 191 || !TSql90ParserInternal.tokenSet_38_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(191);
				this.expressionList(inPredicate, inPredicate.Values);
				IToken token2 = this.LT(1);
				this.match(192);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(inPredicate, token2);
				}
			}
			return inPredicate;
		}

		// Token: 0x060017DE RID: 6110 RVA: 0x000B3C4C File Offset: 0x000B1E4C
		public BooleanTernaryExpression betweenPredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags)
		{
			BooleanTernaryExpression booleanTernaryExpression = base.FragmentFactory.CreateFragment<BooleanTernaryExpression>();
			IToken token = this.LT(1);
			this.match(14);
			ScalarExpression scalarExpression = this.expressionWithFlags(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				booleanTernaryExpression.SecondExpression = scalarExpression;
			}
			this.match(7);
			scalarExpression = this.expressionWithFlags(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				booleanTernaryExpression.ThirdExpression = scalarExpression;
				if (vNotDefined)
				{
					booleanTernaryExpression.TernaryExpressionType = BooleanTernaryExpressionType.NotBetween;
				}
				else
				{
					booleanTernaryExpression.TernaryExpressionType = BooleanTernaryExpressionType.Between;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(booleanTernaryExpression, token);
				booleanTernaryExpression.FirstExpression = vExpressionFirst;
			}
			return booleanTernaryExpression;
		}

		// Token: 0x060017DF RID: 6111 RVA: 0x000B3CD8 File Offset: 0x000B1ED8
		public LikePredicate likePredicate(ScalarExpression vExpressionFirst, bool vNotDefined, ExpressionFlags expressionFlags)
		{
			LikePredicate likePredicate = base.FragmentFactory.CreateFragment<LikePredicate>();
			IToken token = this.LT(1);
			this.match(94);
			if (this.inputState.guessing == 0)
			{
				if (vNotDefined)
				{
					likePredicate.NotDefined = true;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(likePredicate, token);
				likePredicate.FirstExpression = vExpressionFirst;
			}
			ScalarExpression secondExpression = this.expressionWithFlags(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				likePredicate.SecondExpression = secondExpression;
			}
			int num = this.LA(1);
			if (num <= 114)
			{
				if (num <= 23)
				{
					switch (num)
					{
					case 1:
					case 4:
					case 6:
					case 7:
						return likePredicate;
					case 2:
					case 3:
					case 5:
						break;
					default:
						switch (num)
						{
						case 12:
						case 13:
						case 15:
						case 17:
							return likePredicate;
						case 14:
						case 16:
							break;
						default:
							switch (num)
							{
							case 22:
							case 23:
								return likePredicate;
							}
							break;
						}
						break;
					}
				}
				else
				{
					switch (num)
					{
					case 28:
					case 29:
					case 33:
					case 35:
					case 36:
						return likePredicate;
					case 30:
					case 31:
					case 32:
					case 34:
						break;
					default:
						switch (num)
						{
						case 44:
						case 45:
						case 46:
						case 48:
						case 49:
						case 54:
						case 55:
						case 56:
						case 59:
						case 60:
						case 61:
						case 64:
						case 67:
						case 72:
						case 74:
						case 75:
						case 76:
						case 77:
						case 82:
						case 85:
						case 86:
						case 87:
						case 90:
						case 92:
						case 93:
						case 95:
							return likePredicate;
						case 47:
						case 50:
						case 51:
						case 52:
						case 53:
						case 57:
						case 62:
						case 63:
						case 65:
						case 66:
						case 68:
						case 69:
						case 70:
						case 71:
						case 73:
						case 78:
						case 79:
						case 80:
						case 81:
						case 83:
						case 84:
						case 88:
						case 89:
						case 91:
						case 94:
							break;
						case 58:
							this.escapeExpression(likePredicate, expressionFlags);
							return likePredicate;
						default:
							switch (num)
							{
							case 105:
							case 106:
							case 111:
							case 112:
							case 113:
							case 114:
								return likePredicate;
							}
							break;
						}
						break;
					}
				}
			}
			else if (num <= 181)
			{
				switch (num)
				{
				case 119:
				case 123:
				case 125:
				case 126:
				case 129:
				case 131:
				case 132:
				case 133:
				case 134:
				case 138:
				case 140:
				case 142:
				case 143:
				case 144:
					return likePredicate;
				case 120:
				case 121:
				case 122:
				case 124:
				case 127:
				case 128:
				case 130:
				case 135:
				case 136:
				case 137:
				case 139:
				case 141:
					break;
				default:
					if (num == 150)
					{
						return likePredicate;
					}
					switch (num)
					{
					case 156:
					case 158:
					case 160:
					case 161:
					case 162:
					case 167:
					case 169:
					case 170:
					case 171:
					case 172:
					case 176:
					case 177:
					case 178:
					case 180:
					case 181:
						return likePredicate;
					}
					break;
				}
			}
			else if (num <= 204)
			{
				switch (num)
				{
				case 191:
				case 192:
				case 194:
				case 198:
					return likePredicate;
				case 193:
				{
					this.match(193);
					if (this.inputState.guessing == 0)
					{
						likePredicate.OdbcEscape = true;
					}
					this.escapeExpression(likePredicate, expressionFlags);
					IToken token2 = this.LT(1);
					this.match(194);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(likePredicate, token2);
						return likePredicate;
					}
					return likePredicate;
				}
				case 195:
				case 196:
				case 197:
					break;
				default:
					if (num == 204)
					{
						return likePredicate;
					}
					break;
				}
			}
			else
			{
				switch (num)
				{
				case 219:
				case 220:
					return likePredicate;
				default:
					if (num == 232)
					{
						return likePredicate;
					}
					break;
				}
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017E0 RID: 6112 RVA: 0x000B40D4 File Offset: 0x000B22D4
		public FullTextPredicate fulltextPredicate()
		{
			FullTextPredicate fullTextPredicate = base.FragmentFactory.CreateFragment<FullTextPredicate>();
			int num = this.LA(1);
			if (num != 31)
			{
				if (num != 69)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token = this.LT(1);
				this.match(69);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(fullTextPredicate, token);
					fullTextPredicate.FullTextFunctionType = FullTextFunctionType.FreeText;
				}
			}
			else
			{
				IToken token2 = this.LT(1);
				this.match(31);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(fullTextPredicate, token2);
					fullTextPredicate.FullTextFunctionType = FullTextFunctionType.Contains;
				}
			}
			this.match(191);
			int num2 = this.LA(1);
			ColumnReferenceExpression item;
			if (num2 <= 191)
			{
				if (num2 != 81 && num2 != 136)
				{
					if (num2 != 191)
					{
						goto IL_290;
					}
					this.match(191);
					bool flag = false;
					if (TSql90ParserInternal.tokenSet_76_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_136_.member(this.LA(2)))
					{
						int pos = this.mark();
						flag = true;
						this.inputState.guessing++;
						try
						{
							this.starColumn();
						}
						catch (RecognitionException)
						{
							flag = false;
						}
						this.rewind(pos);
						this.inputState.guessing--;
					}
					if (flag)
					{
						item = this.starColumn();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(fullTextPredicate, fullTextPredicate.Columns, item);
						}
					}
					else
					{
						if (!TSql90ParserInternal.tokenSet_32_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_137_.member(this.LA(2)))
						{
							throw new NoViableAltException(this.LT(1), this.getFilename());
						}
						item = this.column();
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(fullTextPredicate, fullTextPredicate.Columns, item);
						}
						while (this.LA(1) == 198)
						{
							this.match(198);
							item = this.column();
							if (this.inputState.guessing == 0)
							{
								TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(fullTextPredicate, fullTextPredicate.Columns, item);
							}
						}
					}
					this.match(192);
					goto IL_2A3;
				}
			}
			else if (num2 <= 200)
			{
				if (num2 != 195 && num2 != 200)
				{
					goto IL_290;
				}
			}
			else if (num2 != 227)
			{
				switch (num2)
				{
				case 232:
				case 233:
					break;
				default:
					goto IL_290;
				}
			}
			item = this.fulltextColumn();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ColumnReferenceExpression>(fullTextPredicate, fullTextPredicate.Columns, item);
				goto IL_2A3;
			}
			goto IL_2A3;
			IL_290:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_2A3:
			this.match(198);
			ValueExpression value = this.stringOrVariable();
			if (this.inputState.guessing == 0)
			{
				fullTextPredicate.Value = value;
			}
			int num3 = this.LA(1);
			if (num3 != 192)
			{
				if (num3 != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				ValueExpression languageTerm = this.languageExpression();
				if (this.inputState.guessing == 0)
				{
					fullTextPredicate.LanguageTerm = languageTerm;
				}
			}
			IToken token3 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(fullTextPredicate, token3);
			}
			return fullTextPredicate;
		}

		// Token: 0x060017E1 RID: 6113 RVA: 0x000B443C File Offset: 0x000B263C
		public ExistsPredicate existsPredicate(ExpressionFlags expressionFlags)
		{
			ExistsPredicate existsPredicate = base.FragmentFactory.CreateFragment<ExistsPredicate>();
			this.match(62);
			ScalarSubquery subquery = this.subquery(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				existsPredicate.Subquery = subquery;
			}
			return existsPredicate;
		}

		// Token: 0x060017E2 RID: 6114 RVA: 0x000B447C File Offset: 0x000B267C
		public TSEqualCall tsEqualCall()
		{
			TSEqualCall tsequalCall = base.FragmentFactory.CreateFragment<TSEqualCall>();
			IToken token = this.LT(1);
			this.match(157);
			this.match(191);
			ScalarExpression scalarExpression = this.expression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(tsequalCall, token);
				tsequalCall.FirstExpression = scalarExpression;
			}
			this.match(198);
			scalarExpression = this.expression();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				tsequalCall.SecondExpression = scalarExpression;
				TSql80ParserBaseInternal.UpdateTokenInfo(tsequalCall, token2);
			}
			return tsequalCall;
		}

		// Token: 0x060017E3 RID: 6115 RVA: 0x000B451C File Offset: 0x000B271C
		public UpdateCall updateCall()
		{
			UpdateCall updateCall = base.FragmentFactory.CreateFragment<UpdateCall>();
			IToken token = this.LT(1);
			this.match(160);
			this.match(191);
			Identifier identifier = this.identifier();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(updateCall, token);
				updateCall.Identifier = identifier;
				TSql80ParserBaseInternal.UpdateTokenInfo(updateCall, token2);
			}
			return updateCall;
		}

		// Token: 0x060017E4 RID: 6116 RVA: 0x000B4594 File Offset: 0x000B2794
		public ColumnReferenceExpression fulltextColumn()
		{
			bool flag = false;
			if (TSql90ParserInternal.tokenSet_76_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_138_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.starColumn();
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			ColumnReferenceExpression result;
			if (flag)
			{
				result = this.starColumn();
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_32_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_138_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.column();
			}
			return result;
		}

		// Token: 0x060017E5 RID: 6117 RVA: 0x000B4670 File Offset: 0x000B2870
		public BooleanComparisonType joinOperator()
		{
			BooleanComparisonType result = BooleanComparisonType.LeftOuterJoin;
			int num = this.LA(1);
			if (num != 196)
			{
				if (num != 207)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(207);
				if (this.inputState.guessing == 0)
				{
					result = BooleanComparisonType.RightOuterJoin;
				}
			}
			else
			{
				this.match(196);
				if (this.inputState.guessing == 0)
				{
					result = BooleanComparisonType.LeftOuterJoin;
				}
			}
			return result;
		}

		// Token: 0x060017E6 RID: 6118 RVA: 0x000B46E8 File Offset: 0x000B28E8
		public SubqueryComparisonPredicateType subqueryComparisonPredicateType()
		{
			SubqueryComparisonPredicateType result = SubqueryComparisonPredicateType.None;
			int num = this.LA(1);
			if (num != 5)
			{
				if (num != 8)
				{
					if (num != 145)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					this.match(145);
					if (this.inputState.guessing == 0)
					{
						result = SubqueryComparisonPredicateType.Any;
					}
				}
				else
				{
					this.match(8);
					if (this.inputState.guessing == 0)
					{
						result = SubqueryComparisonPredicateType.Any;
					}
				}
			}
			else
			{
				this.match(5);
				if (this.inputState.guessing == 0)
				{
					result = SubqueryComparisonPredicateType.All;
				}
			}
			return result;
		}

		// Token: 0x060017E7 RID: 6119 RVA: 0x000B4774 File Offset: 0x000B2974
		public void escapeExpression(LikePredicate vParent, ExpressionFlags expressionFlags)
		{
			this.match(58);
			ScalarExpression escapeExpression = this.expressionWithFlags(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				vParent.EscapeExpression = escapeExpression;
			}
		}

		// Token: 0x060017E8 RID: 6120 RVA: 0x000B47A8 File Offset: 0x000B29A8
		public ScalarExpression expressionBinaryPri2(ExpressionFlags expressionFlags)
		{
			ScalarExpression result = null;
			result = this.expressionBinaryPri1(expressionFlags);
			for (;;)
			{
				int num = this.LA(1);
				if (num != 190)
				{
					switch (num)
					{
					case 197:
					{
						this.match(197);
						ScalarExpression expression = this.expressionBinaryPri1(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							base.AddBinaryExpression(ref result, expression, BinaryExpressionType.Add);
						}
						break;
					}
					case 198:
						return result;
					case 199:
					{
						this.match(199);
						ScalarExpression expression = this.expressionBinaryPri1(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							base.AddBinaryExpression(ref result, expression, BinaryExpressionType.Subtract);
						}
						break;
					}
					default:
						switch (num)
						{
						case 209:
						{
							this.match(209);
							ScalarExpression expression = this.expressionBinaryPri1(expressionFlags);
							if (this.inputState.guessing == 0)
							{
								base.AddBinaryExpression(ref result, expression, BinaryExpressionType.BitwiseXor);
								continue;
							}
							continue;
						}
						case 210:
						{
							this.match(210);
							ScalarExpression expression = this.expressionBinaryPri1(expressionFlags);
							if (this.inputState.guessing == 0)
							{
								base.AddBinaryExpression(ref result, expression, BinaryExpressionType.BitwiseOr);
								continue;
							}
							continue;
						}
						}
						return result;
					}
				}
				else
				{
					this.match(190);
					ScalarExpression expression = this.expressionBinaryPri1(expressionFlags);
					if (this.inputState.guessing == 0)
					{
						base.AddBinaryExpression(ref result, expression, BinaryExpressionType.BitwiseAnd);
					}
				}
			}
			return result;
		}

		// Token: 0x060017E9 RID: 6121 RVA: 0x000B48F8 File Offset: 0x000B2AF8
		public ScalarExpression expressionBinaryPri1(ExpressionFlags expressionFlags)
		{
			ScalarExpression result = null;
			result = this.expressionUnary(expressionFlags);
			for (;;)
			{
				int num = this.LA(1);
				if (num != 189)
				{
					if (num != 195)
					{
						if (num != 201)
						{
							break;
						}
						this.match(201);
						ScalarExpression expression = this.expressionUnary(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							base.AddBinaryExpression(ref result, expression, BinaryExpressionType.Divide);
						}
					}
					else
					{
						this.match(195);
						ScalarExpression expression = this.expressionUnary(expressionFlags);
						if (this.inputState.guessing == 0)
						{
							base.AddBinaryExpression(ref result, expression, BinaryExpressionType.Multiply);
						}
					}
				}
				else
				{
					this.match(189);
					ScalarExpression expression = this.expressionUnary(expressionFlags);
					if (this.inputState.guessing == 0)
					{
						base.AddBinaryExpression(ref result, expression, BinaryExpressionType.Modulo);
					}
				}
			}
			return result;
		}

		// Token: 0x060017EA RID: 6122 RVA: 0x000B49C0 File Offset: 0x000B2BC0
		public ScalarExpression expressionUnary(ExpressionFlags expressionFlags)
		{
			ScalarExpression result = null;
			UnaryExpression unaryExpression = null;
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_2D2;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_2D2;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_2D2;
					}
				}
			}
			else if (num <= 147)
			{
				if (num <= 136)
				{
					if (num != 133 && num != 136)
					{
						goto IL_2D2;
					}
				}
				else if (num != 141 && num != 147)
				{
					goto IL_2D2;
				}
			}
			else if (num <= 193)
			{
				if (num != 163)
				{
					switch (num)
					{
					case 191:
					case 193:
						break;
					case 192:
						goto IL_2D2;
					default:
						goto IL_2D2;
					}
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
					break;
				case 198:
					goto IL_2D2;
				case 200:
					goto IL_2C8;
				default:
					switch (num)
					{
					case 211:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_2D2;
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						goto IL_2C8;
					default:
						goto IL_2D2;
					}
					break;
				}
				int num2 = this.LA(1);
				switch (num2)
				{
				case 197:
				{
					IToken token = this.LT(1);
					this.match(197);
					if (this.inputState.guessing == 0)
					{
						unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
						TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token);
						unaryExpression.UnaryExpressionType = UnaryExpressionType.Positive;
						goto IL_2A4;
					}
					goto IL_2A4;
				}
				case 198:
					break;
				case 199:
				{
					IToken token2 = this.LT(1);
					this.match(199);
					if (this.inputState.guessing == 0)
					{
						unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
						TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token2);
						unaryExpression.UnaryExpressionType = UnaryExpressionType.Negative;
						goto IL_2A4;
					}
					goto IL_2A4;
				}
				default:
					if (num2 == 211)
					{
						IToken token3 = this.LT(1);
						this.match(211);
						if (this.inputState.guessing == 0)
						{
							unaryExpression = base.FragmentFactory.CreateFragment<UnaryExpression>();
							TSql80ParserBaseInternal.UpdateTokenInfo(unaryExpression, token3);
							unaryExpression.UnaryExpressionType = UnaryExpressionType.BitwiseNot;
							goto IL_2A4;
						}
						goto IL_2A4;
					}
					break;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
				IL_2A4:
				ScalarExpression expression = this.expressionUnary(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					result = unaryExpression;
					unaryExpression.Expression = expression;
					return result;
				}
				return result;
			}
			IL_2C8:
			return this.expressionWithClrElements(expressionFlags);
			IL_2D2:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017EB RID: 6123 RVA: 0x000B4CB4 File Offset: 0x000B2EB4
		public PrimaryExpression expressionWithClrElements(ExpressionFlags expressionFlags)
		{
			ExpressionCallTarget expressionCallTarget = null;
			bool flag = false;
			if ((this.LA(1) == 200 || this.LA(1) == 232 || this.LA(1) == 233) && TSql90ParserInternal.tokenSet_139_.member(this.LA(2)))
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.schemaObjectTwoPartName();
					this.match(203);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			PrimaryExpression primaryExpression;
			if (flag)
			{
				primaryExpression = this.udtExpression();
			}
			else
			{
				if (!TSql90ParserInternal.tokenSet_140_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_141_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				primaryExpression = this.expressionPrimary(expressionFlags);
			}
			while (this.LA(1) == 200)
			{
				this.match(200);
				Identifier identifier = this.identifier();
				if (this.inputState.guessing == 0)
				{
					expressionCallTarget = base.FragmentFactory.CreateFragment<ExpressionCallTarget>();
					expressionCallTarget.Expression = primaryExpression;
				}
				bool flag2 = false;
				if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_101_.member(this.LA(2)))
				{
					int pos2 = this.mark();
					flag2 = true;
					this.inputState.guessing++;
					try
					{
						this.match(191);
					}
					catch (RecognitionException)
					{
						flag2 = false;
					}
					this.rewind(pos2);
					this.inputState.guessing--;
				}
				if (flag2)
				{
					FunctionCall functionCall = this.expressionWithClrElementsFunctionCallPart();
					if (this.inputState.guessing == 0)
					{
						functionCall.CallTarget = expressionCallTarget;
						functionCall.FunctionName = identifier;
						primaryExpression = functionCall;
					}
				}
				else
				{
					if (!TSql90ParserInternal.tokenSet_142_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					if (this.inputState.guessing == 0)
					{
						UserDefinedTypePropertyAccess userDefinedTypePropertyAccess = base.FragmentFactory.CreateFragment<UserDefinedTypePropertyAccess>();
						userDefinedTypePropertyAccess.CallTarget = expressionCallTarget;
						userDefinedTypePropertyAccess.PropertyName = identifier;
						primaryExpression = userDefinedTypePropertyAccess;
					}
				}
			}
			return primaryExpression;
		}

		// Token: 0x060017EC RID: 6124 RVA: 0x000B4F18 File Offset: 0x000B3118
		public PrimaryExpression udtExpression()
		{
			UserDefinedTypeCallTarget vCallTarget = this.userDefinedTypeCallTarget();
			bool flag = false;
			if ((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 191)
			{
				int pos = this.mark();
				flag = true;
				this.inputState.guessing++;
				try
				{
					this.identifier();
					this.match(191);
				}
				catch (RecognitionException)
				{
					flag = false;
				}
				this.rewind(pos);
				this.inputState.guessing--;
			}
			PrimaryExpression result;
			if (flag)
			{
				result = this.udtFunctionExpression(vCallTarget);
			}
			else
			{
				if ((this.LA(1) != 232 && this.LA(1) != 233) || !TSql90ParserInternal.tokenSet_142_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				result = this.udtPropertyExpression(vCallTarget);
			}
			return result;
		}

		// Token: 0x060017ED RID: 6125 RVA: 0x000B5014 File Offset: 0x000B3214
		public PrimaryExpression expressionPrimary(ExpressionFlags expressionFlags)
		{
			PrimaryExpression primaryExpression = null;
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num == 20)
					{
						primaryExpression = this.caseExpression(expressionFlags);
						goto IL_2FF;
					}
					if (num == 25)
					{
						primaryExpression = this.coalesceExpression(expressionFlags);
						goto IL_2FF;
					}
					if (num != 34)
					{
						goto IL_FD;
					}
					primaryExpression = this.convertCall();
					goto IL_2FF;
				}
				else
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num == 93)
						{
							primaryExpression = this.leftFunctionCall();
							goto IL_2FF;
						}
						if (num != 101)
						{
							goto IL_FD;
						}
						primaryExpression = this.nullIfExpression(expressionFlags);
						goto IL_2FF;
					}
				}
			}
			else if (num <= 147)
			{
				if (num == 133)
				{
					primaryExpression = this.rightFunctionCall();
					goto IL_2FF;
				}
				if (num != 141 && num != 147)
				{
					goto IL_FD;
				}
			}
			else if (num != 163)
			{
				if (num == 191)
				{
					primaryExpression = this.paranthesisDisambiguatorForExpressions(expressionFlags);
					goto IL_2FF;
				}
				if (num == 235)
				{
					this.odbcInitiator();
					goto IL_2FF;
				}
				goto IL_FD;
			}
			primaryExpression = this.parameterlessCall();
			goto IL_2FF;
			IL_FD:
			if (this.LA(1) == 193 && this.LA(2) == 232 && this.LA(1) == 193 && base.NextTokenMatches("FN", 2))
			{
				primaryExpression = this.odbcFunctionCall();
			}
			else if (TSql90ParserInternal.tokenSet_143_.member(this.LA(1)) && TSql90ParserInternal.tokenSet_144_.member(this.LA(2)))
			{
				primaryExpression = this.literal();
			}
			else if (this.LA(1) == 232 && this.LA(2) == 191 && base.NextTokenMatches("CAST") && this.LA(2) == 191)
			{
				primaryExpression = this.castCall();
			}
			else
			{
				bool flag = false;
				if (this.LA(1) == 232 && this.LA(2) == 191)
				{
					int pos = this.mark();
					flag = true;
					this.inputState.guessing++;
					try
					{
						this.match(232);
						this.match(191);
					}
					catch (RecognitionException)
					{
						flag = false;
					}
					this.rewind(pos);
					this.inputState.guessing--;
				}
				if (flag)
				{
					primaryExpression = this.builtInFunctionCall();
				}
				else if ((this.LA(1) == 228 || this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 200 && (((this.LA(1) == 232 || this.LA(1) == 233) && this.LA(2) == 200 && this.LA(3) == 228) || this.LA(1) == 228))
				{
					primaryExpression = this.partitionFunctionCall();
				}
				else
				{
					if (!TSql90ParserInternal.tokenSet_32_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_144_.member(this.LA(2)))
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					primaryExpression = this.columnOrFunctionCall();
				}
			}
			IL_2FF:
			this.collationOpt(primaryExpression);
			return primaryExpression;
		}

		// Token: 0x060017EE RID: 6126 RVA: 0x000B5338 File Offset: 0x000B3538
		public FunctionCall expressionWithClrElementsFunctionCallPart()
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
			return functionCall;
		}

		// Token: 0x060017EF RID: 6127 RVA: 0x000B5360 File Offset: 0x000B3560
		public CastCall castCall()
		{
			CastCall castCall = base.FragmentFactory.CreateFragment<CastCall>();
			IToken token = this.LT(1);
			this.match(232);
			this.match(191);
			ScalarExpression parameter = this.expression();
			this.match(9);
			DataTypeReference dataType = this.scalarDataType();
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.Match(token, "CAST");
				TSql80ParserBaseInternal.UpdateTokenInfo(castCall, token);
				castCall.DataType = dataType;
				castCall.Parameter = parameter;
				TSql80ParserBaseInternal.UpdateTokenInfo(castCall, token2);
			}
			return castCall;
		}

		// Token: 0x060017F0 RID: 6128 RVA: 0x000B53FC File Offset: 0x000B35FC
		public FunctionCall builtInFunctionCall()
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			Identifier functionName = this.nonQuotedIdentifier();
			if (this.inputState.guessing == 0)
			{
				functionCall.FunctionName = functionName;
			}
			this.match(191);
			int num = this.LA(1);
			if (num <= 93)
			{
				if (num <= 34)
				{
					if (num <= 20)
					{
						if (num != 5)
						{
							if (num != 20)
							{
								goto IL_1D1;
							}
							goto IL_1BF;
						}
					}
					else
					{
						if (num != 25 && num != 34)
						{
							goto IL_1D1;
						}
						goto IL_1BF;
					}
				}
				else if (num <= 51)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_1BF;
					default:
						if (num != 51)
						{
							goto IL_1D1;
						}
						break;
					}
				}
				else
				{
					if (num != 81 && num != 93)
					{
						goto IL_1D1;
					}
					goto IL_1BF;
				}
				this.aggregateBuiltInFunctionCall(functionCall);
				return functionCall;
			}
			if (num <= 141)
			{
				if (num <= 133)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						if (num != 133)
						{
							goto IL_1D1;
						}
						break;
					}
				}
				else if (num != 136 && num != 141)
				{
					goto IL_1D1;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_1D1;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 192:
				case 193:
				case 195:
				case 197:
				case 199:
				case 200:
					break;
				case 194:
				case 196:
				case 198:
					goto IL_1D1;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_1D1;
					default:
						goto IL_1D1;
					}
					break;
				}
			}
			IL_1BF:
			this.regularBuiltInFunctionCall(functionCall);
			return functionCall;
			IL_1D1:
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017F1 RID: 6129 RVA: 0x000B55F0 File Offset: 0x000B37F0
		public LeftFunctionCall leftFunctionCall()
		{
			LeftFunctionCall leftFunctionCall = base.FragmentFactory.CreateFragment<LeftFunctionCall>();
			IToken token = this.LT(1);
			this.match(93);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(leftFunctionCall, token);
			}
			this.reservedBuiltInFunctionCallParameters(leftFunctionCall, leftFunctionCall.Parameters);
			return leftFunctionCall;
		}

		// Token: 0x060017F2 RID: 6130 RVA: 0x000B5640 File Offset: 0x000B3840
		public RightFunctionCall rightFunctionCall()
		{
			RightFunctionCall rightFunctionCall = base.FragmentFactory.CreateFragment<RightFunctionCall>();
			IToken token = this.LT(1);
			this.match(133);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(rightFunctionCall, token);
			}
			this.reservedBuiltInFunctionCallParameters(rightFunctionCall, rightFunctionCall.Parameters);
			return rightFunctionCall;
		}

		// Token: 0x060017F3 RID: 6131 RVA: 0x000B5690 File Offset: 0x000B3890
		public PartitionFunctionCall partitionFunctionCall()
		{
			PartitionFunctionCall partitionFunctionCall = base.FragmentFactory.CreateFragment<PartitionFunctionCall>();
			int num = this.LA(1);
			Identifier identifier;
			if (num != 228)
			{
				switch (num)
				{
				case 232:
				case 233:
					identifier = this.identifier();
					if (this.inputState.guessing == 0)
					{
						partitionFunctionCall.DatabaseName = identifier;
					}
					this.match(200);
					break;
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			IToken token = this.LT(1);
			this.match(228);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(partitionFunctionCall, token);
			}
			this.match(200);
			identifier = this.identifier();
			if (this.inputState.guessing == 0)
			{
				partitionFunctionCall.FunctionName = identifier;
			}
			this.match(191);
			this.expressionList(partitionFunctionCall, partitionFunctionCall.Parameters);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(partitionFunctionCall, token2);
			}
			return partitionFunctionCall;
		}

		// Token: 0x060017F4 RID: 6132 RVA: 0x000B57A0 File Offset: 0x000B39A0
		public PrimaryExpression columnOrFunctionCall()
		{
			PrimaryExpression primaryExpression = null;
			MultiPartIdentifier multiPartIdentifier = null;
			ColumnReferenceExpression columnReferenceExpression = null;
			int num = this.LA(1);
			if (num <= 136)
			{
				if (num != 81 && num != 136)
				{
					goto IL_14D;
				}
			}
			else
			{
				if (num != 200)
				{
					if (num == 227)
					{
						goto IL_12B;
					}
					switch (num)
					{
					case 232:
					case 233:
						break;
					default:
						goto IL_14D;
					}
				}
				multiPartIdentifier = this.multiPartIdentifier(-1);
				if (this.LA(1) == 200 && (this.LA(2) == 81 || this.LA(2) == 136 || this.LA(2) == 227))
				{
					if (this.inputState.guessing == 0)
					{
						columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
					}
					this.match(200);
					this.specialColumn(columnReferenceExpression);
					goto IL_160;
				}
				if (this.LA(1) == 191 && TSql90ParserInternal.tokenSet_145_.member(this.LA(2)))
				{
					primaryExpression = this.userFunctionCall(multiPartIdentifier);
					goto IL_160;
				}
				if (!TSql90ParserInternal.tokenSet_144_.member(this.LA(1)) || !TSql90ParserInternal.tokenSet_74_.member(this.LA(2)))
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				goto IL_160;
			}
			IL_12B:
			if (this.inputState.guessing == 0)
			{
				columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
			}
			this.specialColumn(columnReferenceExpression);
			goto IL_160;
			IL_14D:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_160:
			if (this.inputState.guessing == 0 && (primaryExpression == null || primaryExpression is ColumnReferenceExpression))
			{
				if (columnReferenceExpression == null)
				{
					columnReferenceExpression = base.FragmentFactory.CreateFragment<ColumnReferenceExpression>();
				}
				columnReferenceExpression.MultiPartIdentifier = multiPartIdentifier;
				TSql80ParserBaseInternal.CheckSpecialColumn(columnReferenceExpression);
				TSql80ParserBaseInternal.CheckTableNameExistsForColumn(columnReferenceExpression, false);
				primaryExpression = columnReferenceExpression;
			}
			return primaryExpression;
		}

		// Token: 0x060017F5 RID: 6133 RVA: 0x000B594C File Offset: 0x000B3B4C
		public NullIfExpression nullIfExpression(ExpressionFlags expressionFlags)
		{
			NullIfExpression nullIfExpression = base.FragmentFactory.CreateFragment<NullIfExpression>();
			IToken token = this.LT(1);
			this.match(101);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(nullIfExpression, token);
			}
			this.match(191);
			ScalarExpression scalarExpression = this.expressionWithFlags(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				nullIfExpression.FirstExpression = scalarExpression;
			}
			this.match(198);
			scalarExpression = this.expressionWithFlags(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				nullIfExpression.SecondExpression = scalarExpression;
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(nullIfExpression, token2);
			}
			return nullIfExpression;
		}

		// Token: 0x060017F6 RID: 6134 RVA: 0x000B5A04 File Offset: 0x000B3C04
		public CoalesceExpression coalesceExpression(ExpressionFlags expressionFlags)
		{
			CoalesceExpression coalesceExpression = base.FragmentFactory.CreateFragment<CoalesceExpression>();
			IToken token = this.LT(1);
			this.match(25);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(coalesceExpression, token);
			}
			this.match(191);
			ScalarExpression item = this.expressionWithFlags(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(coalesceExpression, coalesceExpression.Expressions, item);
			}
			int num = 0;
			while (this.LA(1) == 198)
			{
				this.match(198);
				item = this.expressionWithFlags(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(coalesceExpression, coalesceExpression.Expressions, item);
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(coalesceExpression, token2);
			}
			return coalesceExpression;
		}

		// Token: 0x060017F7 RID: 6135 RVA: 0x000B5AFC File Offset: 0x000B3CFC
		public CaseExpression caseExpression(ExpressionFlags expressionFlags)
		{
			IToken token = this.LT(1);
			this.match(20);
			int num = this.LA(1);
			CaseExpression caseExpression;
			if (num <= 133)
			{
				if (num <= 41)
				{
					if (num <= 25)
					{
						if (num != 20 && num != 25)
						{
							goto IL_1DA;
						}
					}
					else if (num != 34)
					{
						switch (num)
						{
						case 40:
						case 41:
							break;
						default:
							goto IL_1DA;
						}
					}
				}
				else if (num <= 93)
				{
					if (num != 81 && num != 93)
					{
						goto IL_1DA;
					}
				}
				else
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						if (num != 133)
						{
							goto IL_1DA;
						}
						break;
					}
				}
			}
			else if (num <= 163)
			{
				if (num <= 141)
				{
					if (num != 136 && num != 141)
					{
						goto IL_1DA;
					}
				}
				else if (num != 147 && num != 163)
				{
					goto IL_1DA;
				}
			}
			else if (num <= 193)
			{
				if (num == 168)
				{
					caseExpression = this.searchedCaseExpression(expressionFlags);
					goto IL_1ED;
				}
				switch (num)
				{
				case 191:
				case 193:
					break;
				case 192:
					goto IL_1DA;
				default:
					goto IL_1DA;
				}
			}
			else
			{
				switch (num)
				{
				case 197:
				case 199:
				case 200:
					break;
				case 198:
					goto IL_1DA;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_1DA;
					default:
						goto IL_1DA;
					}
					break;
				}
			}
			ScalarExpression scalarExpression = this.expressionWithFlags(expressionFlags);
			caseExpression = this.simpleCaseExpression(scalarExpression, expressionFlags);
			goto IL_1ED;
			IL_1DA:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_1ED:
			switch (this.LA(1))
			{
			case 55:
				this.match(55);
				scalarExpression = this.expressionWithFlags(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					caseExpression.ElseExpression = scalarExpression;
				}
				break;
			case 56:
				break;
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token2 = this.LT(1);
			this.match(56);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(caseExpression, token);
				TSql80ParserBaseInternal.UpdateTokenInfo(caseExpression, token2);
			}
			return caseExpression;
		}

		// Token: 0x060017F8 RID: 6136 RVA: 0x000B5D78 File Offset: 0x000B3F78
		public ConvertCall convertCall()
		{
			ConvertCall convertCall = base.FragmentFactory.CreateFragment<ConvertCall>();
			IToken token = this.LT(1);
			this.match(34);
			this.match(191);
			DataTypeReference dataType = this.scalarDataType();
			this.match(198);
			ScalarExpression scalarExpression = this.expression();
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(convertCall, token);
				convertCall.DataType = dataType;
				convertCall.Parameter = scalarExpression;
			}
			int num = this.LA(1);
			if (num != 192)
			{
				if (num != 198)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				this.match(198);
				scalarExpression = this.expression();
				if (this.inputState.guessing == 0)
				{
					convertCall.Style = scalarExpression;
				}
			}
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(convertCall, token2);
			}
			return convertCall;
		}

		// Token: 0x060017F9 RID: 6137 RVA: 0x000B5E70 File Offset: 0x000B4070
		public ParameterlessCall parameterlessCall()
		{
			ParameterlessCall parameterlessCall = base.FragmentFactory.CreateFragment<ParameterlessCall>();
			int num = this.LA(1);
			if (num <= 141)
			{
				switch (num)
				{
				case 40:
				{
					IToken token = this.LT(1);
					this.match(40);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token);
						parameterlessCall.ParameterlessCallType = ParameterlessCallType.CurrentTimestamp;
						return parameterlessCall;
					}
					return parameterlessCall;
				}
				case 41:
				{
					IToken token2 = this.LT(1);
					this.match(41);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token2);
						parameterlessCall.ParameterlessCallType = ParameterlessCallType.CurrentUser;
						return parameterlessCall;
					}
					return parameterlessCall;
				}
				default:
					if (num == 141)
					{
						IToken token3 = this.LT(1);
						this.match(141);
						if (this.inputState.guessing == 0)
						{
							TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token3);
							parameterlessCall.ParameterlessCallType = ParameterlessCallType.SessionUser;
							return parameterlessCall;
						}
						return parameterlessCall;
					}
					break;
				}
			}
			else if (num != 147)
			{
				if (num == 163)
				{
					IToken token4 = this.LT(1);
					this.match(163);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token4);
						parameterlessCall.ParameterlessCallType = ParameterlessCallType.User;
						return parameterlessCall;
					}
					return parameterlessCall;
				}
			}
			else
			{
				IToken token5 = this.LT(1);
				this.match(147);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(parameterlessCall, token5);
					parameterlessCall.ParameterlessCallType = ParameterlessCallType.SystemUser;
					return parameterlessCall;
				}
				return parameterlessCall;
			}
			throw new NoViableAltException(this.LT(1), this.getFilename());
		}

		// Token: 0x060017FA RID: 6138 RVA: 0x000B5FF4 File Offset: 0x000B41F4
		public ParenthesisExpression expressionParenthesis(ExpressionFlags expressionFlags)
		{
			ParenthesisExpression parenthesisExpression = base.FragmentFactory.CreateFragment<ParenthesisExpression>();
			IToken token = this.LT(1);
			this.match(191);
			ScalarExpression expression = this.expressionWithFlags(expressionFlags);
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(parenthesisExpression, token);
				parenthesisExpression.Expression = expression;
				TSql80ParserBaseInternal.UpdateTokenInfo(parenthesisExpression, token2);
			}
			return parenthesisExpression;
		}

		// Token: 0x060017FB RID: 6139 RVA: 0x000B6064 File Offset: 0x000B4264
		public UserDefinedTypeCallTarget userDefinedTypeCallTarget()
		{
			UserDefinedTypeCallTarget userDefinedTypeCallTarget = base.FragmentFactory.CreateFragment<UserDefinedTypeCallTarget>();
			SchemaObjectName schemaObjectName = this.schemaObjectTwoPartName();
			IToken token = this.LT(1);
			this.match(203);
			if (this.inputState.guessing == 0)
			{
				userDefinedTypeCallTarget.SchemaObjectName = schemaObjectName;
				TSql80ParserBaseInternal.UpdateTokenInfo(userDefinedTypeCallTarget, token);
			}
			return userDefinedTypeCallTarget;
		}

		// Token: 0x060017FC RID: 6140 RVA: 0x000B60B8 File Offset: 0x000B42B8
		public FunctionCall udtFunctionExpression(UserDefinedTypeCallTarget vCallTarget)
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			Identifier functionName = this.identifier();
			if (this.inputState.guessing == 0)
			{
				functionCall.CallTarget = vCallTarget;
				functionCall.FunctionName = functionName;
			}
			this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
			return functionCall;
		}

		// Token: 0x060017FD RID: 6141 RVA: 0x000B6104 File Offset: 0x000B4304
		public UserDefinedTypePropertyAccess udtPropertyExpression(UserDefinedTypeCallTarget vCallTarget)
		{
			UserDefinedTypePropertyAccess userDefinedTypePropertyAccess = base.FragmentFactory.CreateFragment<UserDefinedTypePropertyAccess>();
			Identifier propertyName = this.identifier();
			if (this.inputState.guessing == 0)
			{
				userDefinedTypePropertyAccess.CallTarget = vCallTarget;
				userDefinedTypePropertyAccess.PropertyName = propertyName;
			}
			return userDefinedTypePropertyAccess;
		}

		// Token: 0x060017FE RID: 6142 RVA: 0x000B6140 File Offset: 0x000B4340
		public FunctionCall basicFunctionCall()
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			Identifier functionName = this.identifier();
			if (this.inputState.guessing == 0)
			{
				functionCall.FunctionName = functionName;
			}
			this.parenthesizedOptExpressionWithDefaultList(functionCall, functionCall.Parameters);
			return functionCall;
		}

		// Token: 0x060017FF RID: 6143 RVA: 0x000B6184 File Offset: 0x000B4384
		public OverClause overClause()
		{
			OverClause overClause = this.overClauseBeginning();
			int num = this.LA(1);
			if (num != 113)
			{
				if (num != 192)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			else
			{
				OrderByClause orderByClause = this.orderByClause();
				if (this.inputState.guessing == 0)
				{
					overClause.OrderByClause = orderByClause;
				}
			}
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(overClause, token);
			}
			return overClause;
		}

		// Token: 0x06001800 RID: 6144 RVA: 0x000B620C File Offset: 0x000B440C
		public OverClause overClauseBeginning()
		{
			OverClause overClause = base.FragmentFactory.CreateFragment<OverClause>();
			IToken token = this.LT(1);
			this.match(115);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(overClause, token);
			}
			this.match(191);
			int num = this.LA(1);
			if (num != 113 && num != 192)
			{
				if (num != 232)
				{
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
				IToken token2 = this.LT(1);
				this.match(232);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.Match(token2, "PARTITION");
				}
				this.match(18);
				this.expressionList(overClause, overClause.Partitions);
			}
			return overClause;
		}

		// Token: 0x06001801 RID: 6145 RVA: 0x000B62CC File Offset: 0x000B44CC
		public OverClause overClauseNoOrderBy()
		{
			OverClause overClause = this.overClauseBeginning();
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(overClause, token);
			}
			return overClause;
		}

		// Token: 0x06001802 RID: 6146 RVA: 0x000B630C File Offset: 0x000B450C
		public void regularBuiltInFunctionCall(FunctionCall vParent)
		{
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_19B;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_19B;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_19B;
					}
				}
			}
			else if (num <= 141)
			{
				if (num != 133 && num != 136 && num != 141)
				{
					goto IL_19B;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_19B;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 192:
					goto IL_1AE;
				case 194:
				case 196:
				case 198:
					goto IL_19B;
				case 195:
				{
					ColumnReferenceExpression item = this.starColumnReferenceExpression();
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, vParent.Parameters, item);
						goto IL_1AE;
					}
					goto IL_1AE;
				}
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_19B;
					default:
						goto IL_19B;
					}
					break;
				}
			}
			this.expressionList(vParent, vParent.Parameters);
			goto IL_1AE;
			IL_19B:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_1AE:
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			if (this.LA(1) == 115)
			{
				OverClause overClause = this.overClause();
				if (this.inputState.guessing == 0)
				{
					vParent.OverClause = overClause;
					return;
				}
				return;
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_144_.member(this.LA(1)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001803 RID: 6147 RVA: 0x000B653C File Offset: 0x000B473C
		public void aggregateBuiltInFunctionCall(FunctionCall vParent)
		{
			IToken distinctToken = null;
			UniqueRowFilter uniqueRowFilter = this.uniqueRowFilter(out distinctToken);
			ScalarExpression item = this.expression();
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				vParent.UniqueRowFilter = uniqueRowFilter;
				TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(vParent, vParent.Parameters, item);
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
			if (this.LA(1) == 115)
			{
				OverClause overClause = this.overClauseNoOrderBy();
				if (this.inputState.guessing == 0)
				{
					vParent.OverClause = overClause;
					TSql90ParserBaseInternal.CheckForDistinctInWindowedAggregate(vParent, distinctToken);
					return;
				}
				return;
			}
			else
			{
				if (TSql90ParserInternal.tokenSet_144_.member(this.LA(1)))
				{
					return;
				}
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
		}

		// Token: 0x06001804 RID: 6148 RVA: 0x000B65F0 File Offset: 0x000B47F0
		public void reservedBuiltInFunctionCallParameters(TSqlFragment vParent, IList<ScalarExpression> parameters)
		{
			this.match(191);
			int num = this.LA(1);
			if (num <= 101)
			{
				if (num <= 34)
				{
					if (num != 20 && num != 25 && num != 34)
					{
						goto IL_17E;
					}
				}
				else if (num <= 81)
				{
					switch (num)
					{
					case 40:
					case 41:
						break;
					default:
						if (num != 81)
						{
							goto IL_17E;
						}
						break;
					}
				}
				else if (num != 93)
				{
					switch (num)
					{
					case 100:
					case 101:
						break;
					default:
						goto IL_17E;
					}
				}
			}
			else if (num <= 141)
			{
				if (num != 133 && num != 136 && num != 141)
				{
					goto IL_17E;
				}
			}
			else if (num <= 163)
			{
				if (num != 147 && num != 163)
				{
					goto IL_17E;
				}
			}
			else
			{
				switch (num)
				{
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 192:
					goto IL_191;
				case 194:
				case 195:
				case 196:
				case 198:
					goto IL_17E;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_17E;
					default:
						goto IL_17E;
					}
					break;
				}
			}
			this.expressionList(vParent, parameters);
			goto IL_191;
			IL_17E:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_191:
			IToken token = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(vParent, token);
			}
		}

		// Token: 0x06001805 RID: 6149 RVA: 0x000B67B8 File Offset: 0x000B49B8
		public SimpleWhenClause simpleWhenClause(ExpressionFlags expressionFlags)
		{
			SimpleWhenClause simpleWhenClause = base.FragmentFactory.CreateFragment<SimpleWhenClause>();
			IToken token = this.LT(1);
			this.match(168);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(simpleWhenClause, token);
			}
			ScalarExpression scalarExpression = this.expressionWithFlags(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				simpleWhenClause.WhenExpression = scalarExpression;
			}
			this.match(150);
			scalarExpression = this.expressionWithFlags(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				simpleWhenClause.ThenExpression = scalarExpression;
			}
			return simpleWhenClause;
		}

		// Token: 0x06001806 RID: 6150 RVA: 0x000B6840 File Offset: 0x000B4A40
		public SearchedWhenClause searchedWhenClause(ExpressionFlags expressionFlags)
		{
			SearchedWhenClause searchedWhenClause = base.FragmentFactory.CreateFragment<SearchedWhenClause>();
			IToken token = this.LT(1);
			this.match(168);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(searchedWhenClause, token);
			}
			BooleanExpression whenExpression = this.booleanExpressionWithFlags(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				searchedWhenClause.WhenExpression = whenExpression;
			}
			this.match(150);
			ScalarExpression thenExpression = this.expressionWithFlags(expressionFlags);
			if (this.inputState.guessing == 0)
			{
				searchedWhenClause.ThenExpression = thenExpression;
			}
			return searchedWhenClause;
		}

		// Token: 0x06001807 RID: 6151 RVA: 0x000B68CC File Offset: 0x000B4ACC
		public SimpleCaseExpression simpleCaseExpression(ScalarExpression inputExpression, ExpressionFlags expressionFlags)
		{
			SimpleCaseExpression simpleCaseExpression = base.FragmentFactory.CreateFragment<SimpleCaseExpression>();
			simpleCaseExpression.InputExpression = inputExpression;
			int num = 0;
			while (this.LA(1) == 168)
			{
				SimpleWhenClause item = this.simpleWhenClause(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SimpleWhenClause>(simpleCaseExpression, simpleCaseExpression.WhenClauses, item);
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return simpleCaseExpression;
		}

		// Token: 0x06001808 RID: 6152 RVA: 0x000B6940 File Offset: 0x000B4B40
		public SearchedCaseExpression searchedCaseExpression(ExpressionFlags expressionFlags)
		{
			SearchedCaseExpression searchedCaseExpression = base.FragmentFactory.CreateFragment<SearchedCaseExpression>();
			int num = 0;
			while (this.LA(1) == 168)
			{
				SearchedWhenClause item = this.searchedWhenClause(expressionFlags);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<SearchedWhenClause>(searchedCaseExpression, searchedCaseExpression.WhenClauses, item);
				}
				num++;
			}
			if (num < 1)
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return searchedCaseExpression;
		}

		// Token: 0x06001809 RID: 6153 RVA: 0x000B69AC File Offset: 0x000B4BAC
		public void specialColumn(ColumnReferenceExpression vResult)
		{
			int num = this.LA(1);
			if (num != 81)
			{
				if (num != 136)
				{
					if (num != 227)
					{
						throw new NoViableAltException(this.LT(1), this.getFilename());
					}
					IToken token = this.LT(1);
					this.match(227);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token);
						vResult.ColumnType = PseudoColumnHelper.Instance.ParseOption(token, SqlVersionFlags.TSql90);
						return;
					}
				}
				else
				{
					IToken token2 = this.LT(1);
					this.match(136);
					if (this.inputState.guessing == 0)
					{
						TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token2);
						vResult.ColumnType = ColumnType.RowGuidCol;
						return;
					}
				}
			}
			else
			{
				IToken token3 = this.LT(1);
				this.match(81);
				if (this.inputState.guessing == 0)
				{
					TSql80ParserBaseInternal.UpdateTokenInfo(vResult, token3);
					vResult.ColumnType = ColumnType.IdentityCol;
					return;
				}
			}
		}

		// Token: 0x0600180A RID: 6154 RVA: 0x000B6A8C File Offset: 0x000B4C8C
		public FunctionCall userFunctionCall(MultiPartIdentifier vIdentifiers)
		{
			FunctionCall functionCall = base.FragmentFactory.CreateFragment<FunctionCall>();
			IToken token = null;
			this.match(191);
			if (this.inputState.guessing == 0)
			{
				base.PutIdentifiersIntoFunctionCall(functionCall, vIdentifiers);
			}
			int num = this.LA(1);
			if (num <= 81)
			{
				if (num <= 34)
				{
					if (num <= 20)
					{
						if (num != 5)
						{
							if (num != 20)
							{
								goto IL_3C8;
							}
							goto IL_1DF;
						}
					}
					else
					{
						if (num != 25 && num != 34)
						{
							goto IL_3C8;
						}
						goto IL_1DF;
					}
				}
				else if (num <= 47)
				{
					switch (num)
					{
					case 40:
					case 41:
						goto IL_1DF;
					default:
						if (num != 47)
						{
							goto IL_3C8;
						}
						goto IL_1DF;
					}
				}
				else if (num != 51)
				{
					if (num != 81)
					{
						goto IL_3C8;
					}
					goto IL_1DF;
				}
				UniqueRowFilter uniqueRowFilter = this.uniqueRowFilter(out token);
				ScalarExpression item = this.expression();
				if (this.inputState.guessing == 0)
				{
					functionCall.UniqueRowFilter = uniqueRowFilter;
					TSql80ParserBaseInternal.AddAndUpdateTokenInfo<ScalarExpression>(functionCall, functionCall.Parameters, item);
					goto IL_3DB;
				}
				goto IL_3DB;
			}
			else if (num <= 136)
			{
				if (num <= 101)
				{
					if (num != 93)
					{
						switch (num)
						{
						case 100:
						case 101:
							break;
						default:
							goto IL_3C8;
						}
					}
				}
				else if (num != 133 && num != 136)
				{
					goto IL_3C8;
				}
			}
			else if (num <= 147)
			{
				if (num != 141 && num != 147)
				{
					goto IL_3C8;
				}
			}
			else if (num != 163)
			{
				switch (num)
				{
				case 191:
				case 192:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 194:
				case 195:
				case 196:
				case 198:
					goto IL_3C8;
				default:
					switch (num)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_3C8;
					default:
						goto IL_3C8;
					}
					break;
				}
			}
			IL_1DF:
			int num2 = this.LA(1);
			if (num2 <= 93)
			{
				if (num2 <= 34)
				{
					if (num2 != 20 && num2 != 25 && num2 != 34)
					{
						goto IL_380;
					}
				}
				else if (num2 <= 47)
				{
					switch (num2)
					{
					case 40:
					case 41:
						break;
					default:
						if (num2 != 47)
						{
							goto IL_380;
						}
						break;
					}
				}
				else if (num2 != 81 && num2 != 93)
				{
					goto IL_380;
				}
			}
			else if (num2 <= 141)
			{
				if (num2 <= 133)
				{
					switch (num2)
					{
					case 100:
					case 101:
						break;
					default:
						if (num2 != 133)
						{
							goto IL_380;
						}
						break;
					}
				}
				else if (num2 != 136 && num2 != 141)
				{
					goto IL_380;
				}
			}
			else if (num2 <= 163)
			{
				if (num2 != 147 && num2 != 163)
				{
					goto IL_380;
				}
			}
			else
			{
				switch (num2)
				{
				case 191:
				case 193:
				case 197:
				case 199:
				case 200:
					break;
				case 192:
					goto IL_3DB;
				case 194:
				case 195:
				case 196:
				case 198:
					goto IL_380;
				default:
					switch (num2)
					{
					case 211:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 227:
					case 228:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
						break;
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 226:
					case 229:
						goto IL_380;
					default:
						goto IL_380;
					}
					break;
				}
			}
			this.expressionWithDefaultList(functionCall, functionCall.Parameters);
			goto IL_3DB;
			IL_380:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_3C8:
			throw new NoViableAltException(this.LT(1), this.getFilename());
			IL_3DB:
			IToken token2 = this.LT(1);
			this.match(192);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(functionCall, token2);
			}
			if (this.LA(1) == 115)
			{
				OverClause overClause = this.overClauseNoOrderBy();
				if (this.inputState.guessing == 0)
				{
					functionCall.OverClause = overClause;
				}
			}
			else if (!TSql90ParserInternal.tokenSet_144_.member(this.LA(1)))
			{
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			return functionCall;
		}

		// Token: 0x0600180B RID: 6155 RVA: 0x000B6EEC File Offset: 0x000B50EC
		public ValueExpression globalVariableOrVariableReference()
		{
			ValueExpression valueExpression = null;
			IToken token = this.LT(1);
			this.match(234);
			if (this.inputState.guessing == 0)
			{
				if (token.getText().StartsWith("@@", StringComparison.Ordinal))
				{
					GlobalVariableExpression globalVariableExpression = base.FragmentFactory.CreateFragment<GlobalVariableExpression>();
					globalVariableExpression.Name = token.getText();
					valueExpression = globalVariableExpression;
				}
				else
				{
					VariableReference variableReference = base.FragmentFactory.CreateFragment<VariableReference>();
					variableReference.Name = token.getText();
					valueExpression = variableReference;
				}
				TSql80ParserBaseInternal.UpdateTokenInfo(valueExpression, token);
			}
			return valueExpression;
		}

		// Token: 0x0600180C RID: 6156 RVA: 0x000B6F70 File Offset: 0x000B5170
		public SchemaObjectNameOrValueExpression objectOrVariable()
		{
			SchemaObjectNameOrValueExpression schemaObjectNameOrValueExpression = base.FragmentFactory.CreateFragment<SchemaObjectNameOrValueExpression>();
			int num = this.LA(1);
			if (num != 200)
			{
				switch (num)
				{
				case 232:
				case 233:
					break;
				case 234:
				{
					VariableReference valueExpression = this.variable();
					if (this.inputState.guessing == 0)
					{
						schemaObjectNameOrValueExpression.ValueExpression = valueExpression;
						return schemaObjectNameOrValueExpression;
					}
					return schemaObjectNameOrValueExpression;
				}
				default:
					throw new NoViableAltException(this.LT(1), this.getFilename());
				}
			}
			SchemaObjectName schemaObjectName = this.schemaObjectThreePartName();
			if (this.inputState.guessing == 0)
			{
				schemaObjectNameOrValueExpression.SchemaObjectName = schemaObjectName;
			}
			return schemaObjectNameOrValueExpression;
		}

		// Token: 0x0600180D RID: 6157 RVA: 0x000B7004 File Offset: 0x000B5204
		public MoneyLiteral moneyLiteral()
		{
			MoneyLiteral moneyLiteral = base.FragmentFactory.CreateFragment<MoneyLiteral>();
			IToken token = this.LT(1);
			this.match(225);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(moneyLiteral, token);
				moneyLiteral.Value = token.getText();
			}
			return moneyLiteral;
		}

		// Token: 0x0600180E RID: 6158 RVA: 0x000B7054 File Offset: 0x000B5254
		public OdbcLiteral odbcLiteral()
		{
			OdbcLiteral odbcLiteral = base.FragmentFactory.CreateFragment<OdbcLiteral>();
			IToken token = this.LT(1);
			this.match(193);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token);
			}
			IToken token2 = this.LT(1);
			this.match(232);
			switch (this.LA(1))
			{
			case 230:
			{
				IToken token3 = this.LT(1);
				this.match(230);
				if (this.inputState.guessing == 0)
				{
					odbcLiteral.OdbcLiteralType = TSql80ParserBaseInternal.ParseOdbcLiteralType(token2);
					TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token3);
					odbcLiteral.Value = TSql80ParserBaseInternal.DecodeAsciiStringLiteral(token3.getText());
				}
				break;
			}
			case 231:
			{
				IToken token4 = this.LT(1);
				this.match(231);
				if (this.inputState.guessing == 0)
				{
					odbcLiteral.OdbcLiteralType = TSql80ParserBaseInternal.ParseOdbcLiteralType(token2);
					odbcLiteral.IsNational = true;
					TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token4);
					odbcLiteral.Value = TSql80ParserBaseInternal.DecodeUnicodeStringLiteral(token4.getText());
				}
				break;
			}
			default:
				throw new NoViableAltException(this.LT(1), this.getFilename());
			}
			IToken token5 = this.LT(1);
			this.match(194);
			if (this.inputState.guessing == 0)
			{
				TSql80ParserBaseInternal.UpdateTokenInfo(odbcLiteral, token5);
			}
			return odbcLiteral;
		}

		// Token: 0x0600180F RID: 6159 RVA: 0x000B71AC File Offset: 0x000B53AC
		private void initializeFactory()
		{
		}

		// Token: 0x06001810 RID: 6160 RVA: 0x000B71B0 File Offset: 0x000B53B0
		private static long[] mk_tokenSet_0_()
		{
			long[] array = new long[8];
			array[0] = 3585973655481528914L;
			array[1] = -1675334557835686887L;
			array[2] = -9209407656945396390L;
			array[3] = 6322594533441L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001811 RID: 6161 RVA: 0x000B7208 File Offset: 0x000B5408
		private static long[] mk_tokenSet_1_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -1134907106097364993L;
			array[3] = 17437434049535L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001812 RID: 6162 RVA: 0x000B7254 File Offset: 0x000B5454
		private static long[] mk_tokenSet_2_()
		{
			long[] array = new long[8];
			array[0] = 3585973655481528914L;
			array[1] = -1675334557835686887L;
			array[2] = -9209407519506442918L;
			array[3] = 6322594533441L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001813 RID: 6163 RVA: 0x000B72AC File Offset: 0x000B54AC
		private static long[] mk_tokenSet_3_()
		{
			long[] array = new long[8];
			array[0] = 3549804119831261264L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099780063232L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001814 RID: 6164 RVA: 0x000B7304 File Offset: 0x000B5504
		private static long[] mk_tokenSet_4_()
		{
			long[] array = new long[8];
			array[0] = 2255115563040800L;
			array[1] = 206695464960L;
			array[2] = -9223372002477723360L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001815 RID: 6165 RVA: 0x000B7390 File Offset: 0x000B5590
		private static long[] mk_tokenSet_5_()
		{
			return new long[]
			{
				140737488355328L,
				216172782113784320L,
				275012127232L,
				0L,
				0L,
				0L
			};
		}

		// Token: 0x06001816 RID: 6166 RVA: 0x000B73B0 File Offset: 0x000B55B0
		private static long[] mk_tokenSet_6_()
		{
			long[] array = new long[8];
			array[0] = 3549804119831261266L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 7696984047872L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001817 RID: 6167 RVA: 0x000B7408 File Offset: 0x000B5608
		private static long[] mk_tokenSet_7_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -9205359837376937985L;
			array[3] = 35029619577258L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001818 RID: 6168 RVA: 0x000B7454 File Offset: 0x000B5654
		private static long[] mk_tokenSet_8_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 7696581394688L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001819 RID: 6169 RVA: 0x000B7498 File Offset: 0x000B5698
		private static long[] mk_tokenSet_9_()
		{
			long[] array = new long[8];
			array[0] = 3549944857319616594L;
			array[1] = 7530023046149835777L;
			array[2] = -9209548396581235622L;
			array[3] = 26130446815618L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600181A RID: 6170 RVA: 0x000B74F0 File Offset: 0x000B56F0
		private static long[] mk_tokenSet_10_()
		{
			long[] array = new long[8];
			array[0] = 3549804119831261266L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914280960L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600181B RID: 6171 RVA: 0x000B7548 File Offset: 0x000B5748
		private static long[] mk_tokenSet_11_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -9205359837376937985L;
			array[3] = 17437433532842L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600181C RID: 6172 RVA: 0x000B75C8 File Offset: 0x000B57C8
		private static long[] mk_tokenSet_12_()
		{
			return new long[]
			{
				16777216L,
				17180917760L,
				2147483648L,
				0L,
				0L,
				0L
			};
		}

		// Token: 0x0600181D RID: 6173 RVA: 0x000B75E8 File Offset: 0x000B57E8
		private static long[] mk_tokenSet_13_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 8796093022208L;
			array[2] = long.MinValue;
			array[3] = 7696581394688L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600181E RID: 6174 RVA: 0x000B7668 File Offset: 0x000B5868
		private static long[] mk_tokenSet_14_()
		{
			return new long[]
			{
				281474976710656L,
				4194304L,
				-9223363236466782208L,
				0L,
				0L,
				0L
			};
		}

		// Token: 0x0600181F RID: 6175 RVA: 0x000B7688 File Offset: 0x000B5888
		private static long[] mk_tokenSet_15_()
		{
			long[] array = new long[8];
			array[0] = 2255115563040800L;
			array[1] = 2313579177083008L;
			array[2] = -9223372002477723360L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001820 RID: 6176 RVA: 0x000B76E0 File Offset: 0x000B58E0
		private static long[] mk_tokenSet_16_()
		{
			long[] array = new long[8];
			array[0] = 2048L;
			array[1] = 1048576L;
			array[2] = 34359740416L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001821 RID: 6177 RVA: 0x000B7730 File Offset: 0x000B5930
		private static long[] mk_tokenSet_17_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001822 RID: 6178 RVA: 0x000B7788 File Offset: 0x000B5988
		private static long[] mk_tokenSet_18_()
		{
			long[] array = new long[8];
			array[0] = 140737488355328L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 8537858113666L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001823 RID: 6179 RVA: 0x000B77D8 File Offset: 0x000B59D8
		private static long[] mk_tokenSet_19_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714369L;
			array[2] = -9209548396581235622L;
			array[3] = 1112262332480L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001824 RID: 6180 RVA: 0x000B7830 File Offset: 0x000B5A30
		private static long[] mk_tokenSet_20_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714369L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001825 RID: 6181 RVA: 0x000B7888 File Offset: 0x000B5A88
		private static long[] mk_tokenSet_21_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530025176453614593L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001826 RID: 6182 RVA: 0x000B78E0 File Offset: 0x000B5AE0
		private static long[] mk_tokenSet_22_()
		{
			long[] array = new long[8];
			array[0] = 9011597301252608L;
			array[1] = 4294967296L;
			array[2] = 0L;
			array[3] = 3298534883328L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001827 RID: 6183 RVA: 0x000B7930 File Offset: 0x000B5B30
		private static long[] mk_tokenSet_23_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 618475290624L;
			array[2] = 0L;
			array[3] = 8537858113666L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001828 RID: 6184 RVA: 0x000B7978 File Offset: 0x000B5B78
		private static long[] mk_tokenSet_24_()
		{
			long[] array = new long[8];
			array[0] = 3549804119831261264L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099780067328L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001829 RID: 6185 RVA: 0x000B79D0 File Offset: 0x000B5BD0
		private static long[] mk_tokenSet_25_()
		{
			long[] array = new long[8];
			array[0] = 8796093022208L;
			array[1] = 0L;
			array[2] = 100663296L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600182A RID: 6186 RVA: 0x000B7A1C File Offset: 0x000B5C1C
		private static long[] mk_tokenSet_26_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 128L;
			array[2] = 0L;
			array[3] = 7696581394432L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600182B RID: 6187 RVA: 0x000B7A64 File Offset: 0x000B5C64
		private static long[] mk_tokenSet_27_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 7697118265472L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x0600182C RID: 6188 RVA: 0x000B7AA8 File Offset: 0x000B5CA8
		private static long[] mk_tokenSet_28_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1100451156992L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600182D RID: 6189 RVA: 0x000B7B00 File Offset: 0x000B5D00
		private static long[] mk_tokenSet_29_()
		{
			long[] array = new long[8];
			array[0] = 32L;
			array[1] = 1048576L;
			array[2] = 128L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600182E RID: 6190 RVA: 0x000B7B4C File Offset: 0x000B5D4C
		private static long[] mk_tokenSet_30_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695432192L;
			array[2] = -9223372002477727456L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600182F RID: 6191 RVA: 0x000B7BA4 File Offset: 0x000B5DA4
		private static long[] mk_tokenSet_31_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530023046149966849L;
			array[2] = -9209548396581235366L;
			array[3] = 8560272478464L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001830 RID: 6192 RVA: 0x000B7BFC File Offset: 0x000B5DFC
		private static long[] mk_tokenSet_32_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 131072L;
			array[2] = 256L;
			array[3] = 3332894621952L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001831 RID: 6193 RVA: 0x000B7C48 File Offset: 0x000B5E48
		private static long[] mk_tokenSet_33_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 7700876361984L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001832 RID: 6194 RVA: 0x000B7C8C File Offset: 0x000B5E8C
		private static long[] mk_tokenSet_34_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 5226975199232L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001833 RID: 6195 RVA: 0x000B7CD4 File Offset: 0x000B5ED4
		private static long[] mk_tokenSet_35_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 825170591872L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001834 RID: 6196 RVA: 0x000B7D18 File Offset: 0x000B5F18
		private static long[] mk_tokenSet_36_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225746L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001835 RID: 6197 RVA: 0x000B7D70 File Offset: 0x000B5F70
		private static long[] mk_tokenSet_37_()
		{
			long[] array = new long[8];
			array[0] = -16L;
			array[1] = -2199023257729L;
			array[2] = 18012199477837823L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001836 RID: 6198 RVA: 0x000B7DC0 File Offset: 0x000B5FC0
		private static long[] mk_tokenSet_38_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695432192L;
			array[2] = -9223372002494504672L;
			array[3] = 17437030875554L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001837 RID: 6199 RVA: 0x000B7E18 File Offset: 0x000B6018
		private static long[] mk_tokenSet_39_()
		{
			long[] array = new long[8];
			array[0] = 3585836232666689618L;
			array[1] = 7530023184125791233L;
			array[2] = -2292018235068254854L;
			array[3] = 17437433928618L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001838 RID: 6200 RVA: 0x000B7E70 File Offset: 0x000B6070
		private static long[] mk_tokenSet_40_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 3298937540608L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001839 RID: 6201 RVA: 0x000B7EC8 File Offset: 0x000B60C8
		private static long[] mk_tokenSet_41_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 8537858113667L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600183A RID: 6202 RVA: 0x000B7F10 File Offset: 0x000B6110
		private static long[] mk_tokenSet_42_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285120L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600183B RID: 6203 RVA: 0x000B7F68 File Offset: 0x000B6168
		private static long[] mk_tokenSet_43_()
		{
			long[] array = new long[8];
			array[0] = 3585832916917334610L;
			array[1] = 7530022977430359049L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600183C RID: 6204 RVA: 0x000B7FC0 File Offset: 0x000B61C0
		private static long[] mk_tokenSet_44_()
		{
			long[] array = new long[8];
			array[0] = 4451790753032763090L;
			array[1] = -1668717695120654951L;
			array[2] = -1137405643984874118L;
			array[3] = 8521618289663L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600183D RID: 6205 RVA: 0x000B8018 File Offset: 0x000B6218
		private static long[] mk_tokenSet_45_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396572847014L;
			array[3] = 1099914301504L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600183E RID: 6206 RVA: 0x000B8070 File Offset: 0x000B6270
		private static long[] mk_tokenSet_46_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396572847014L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600183F RID: 6207 RVA: 0x000B80C8 File Offset: 0x000B62C8
		private static long[] mk_tokenSet_47_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359169L;
			array[2] = -9209548396572847014L;
			array[3] = 1099914285120L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001840 RID: 6208 RVA: 0x000B8120 File Offset: 0x000B6320
		private static long[] mk_tokenSet_48_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359169L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914301504L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001841 RID: 6209 RVA: 0x000B8178 File Offset: 0x000B6378
		private static long[] mk_tokenSet_49_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359169L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001842 RID: 6210 RVA: 0x000B81D0 File Offset: 0x000B63D0
		private static long[] mk_tokenSet_50_()
		{
			long[] array = new long[8];
			array[0] = 9007199254740992L;
			array[1] = 4294967296L;
			array[2] = 0L;
			array[3] = 3298534883328L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001843 RID: 6211 RVA: 0x000B8220 File Offset: 0x000B6420
		private static long[] mk_tokenSet_51_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 103079215104L;
			array[2] = 0L;
			array[3] = 65L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001844 RID: 6212 RVA: 0x000B8264 File Offset: 0x000B6464
		private static long[] mk_tokenSet_52_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 8537858113666L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001845 RID: 6213 RVA: 0x000B82AC File Offset: 0x000B64AC
		private static long[] mk_tokenSet_53_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 1111859658817L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001846 RID: 6214 RVA: 0x000B82F0 File Offset: 0x000B64F0
		private static long[] mk_tokenSet_54_()
		{
			long[] array = new long[8];
			array[0] = 18014398509482064L;
			for (int i = 1; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 1099511627776L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001847 RID: 6215 RVA: 0x000B8340 File Offset: 0x000B6540
		private static long[] mk_tokenSet_55_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359049L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001848 RID: 6216 RVA: 0x000B8398 File Offset: 0x000B6598
		private static long[] mk_tokenSet_56_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850227794L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001849 RID: 6217 RVA: 0x000B83F0 File Offset: 0x000B65F0
		private static long[] mk_tokenSet_57_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977564576769L;
			array[2] = -9209548396581235622L;
			array[3] = 4128403099648L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600184A RID: 6218 RVA: 0x000B8448 File Offset: 0x000B6648
		private static long[] mk_tokenSet_58_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225746L;
			array[1] = 7530022977430359049L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600184B RID: 6219 RVA: 0x000B84A0 File Offset: 0x000B66A0
		private static long[] mk_tokenSet_59_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 3298937540864L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600184C RID: 6220 RVA: 0x000B84F8 File Offset: 0x000B66F8
		private static long[] mk_tokenSet_60_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -9205359837376937985L;
			array[3] = 17437433532906L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600184D RID: 6221 RVA: 0x000B8578 File Offset: 0x000B6778
		private static long[] mk_tokenSet_61_()
		{
			return new long[]
			{
				562984313159680L,
				2048L,
				16L,
				0L,
				0L,
				0L
			};
		}

		// Token: 0x0600184E RID: 6222 RVA: 0x000B8598 File Offset: 0x000B6798
		private static long[] mk_tokenSet_62_()
		{
			long[] array = new long[8];
			array[0] = -16L;
			array[1] = -1L;
			array[2] = -9205359837376937985L;
			array[3] = 17437299315114L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600184F RID: 6223 RVA: 0x000B85E4 File Offset: 0x000B67E4
		private static long[] mk_tokenSet_63_()
		{
			long[] array = new long[8];
			array[0] = 8704L;
			array[1] = 0L;
			array[2] = 140737488355336L;
			array[3] = 64L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001850 RID: 6224 RVA: 0x000B862C File Offset: 0x000B682C
		private static long[] mk_tokenSet_64_()
		{
			long[] array = new long[8];
			array[0] = -16L;
			array[1] = -2199023257729L;
			array[2] = 18012199477837823L;
			array[3] = 1099511629824L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001851 RID: 6225 RVA: 0x000B867C File Offset: 0x000B687C
		private static long[] mk_tokenSet_65_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 128L;
			array[2] = -9223372036846387200L;
			array[3] = 3298534883584L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001852 RID: 6226 RVA: 0x000B86C8 File Offset: 0x000B68C8
		private static long[] mk_tokenSet_66_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714935491585L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001853 RID: 6227 RVA: 0x000B8720 File Offset: 0x000B6920
		private static long[] mk_tokenSet_67_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977447136257L;
			array[2] = -9209548396581235622L;
			array[3] = 3298937540608L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001854 RID: 6228 RVA: 0x000B8778 File Offset: 0x000B6978
		private static long[] mk_tokenSet_68_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 128L;
			array[2] = 0L;
			array[3] = 4398583382144L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001855 RID: 6229 RVA: 0x000B87C0 File Offset: 0x000B69C0
		private static long[] mk_tokenSet_69_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 3298937540928L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001856 RID: 6230 RVA: 0x000B8818 File Offset: 0x000B6A18
		private static long[] mk_tokenSet_70_()
		{
			long[] array = new long[8];
			array[0] = 3585973655414419538L;
			array[1] = -1675334557835686895L;
			array[2] = -9209548394433751718L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001857 RID: 6231 RVA: 0x000B8870 File Offset: 0x000B6A70
		private static long[] mk_tokenSet_71_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -9205359837376937985L;
			array[3] = 17437433532907L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001858 RID: 6232 RVA: 0x000B88BC File Offset: 0x000B6ABC
		private static long[] mk_tokenSet_72_()
		{
			long[] array = new long[8];
			array[0] = 262144L;
			for (int i = 1; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883584L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001859 RID: 6233 RVA: 0x000B8908 File Offset: 0x000B6B08
		private static long[] mk_tokenSet_73_()
		{
			long[] array = new long[8];
			array[0] = 4162293738409996370L;
			array[1] = 7531854764416711945L;
			array[2] = -9207857346623974278L;
			array[3] = 1099914285125L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600185A RID: 6234 RVA: 0x000B8960 File Offset: 0x000B6B60
		private static long[] mk_tokenSet_74_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -1134907106097364993L;
			array[3] = 17437434051583L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600185B RID: 6235 RVA: 0x000B89AC File Offset: 0x000B6BAC
		private static long[] mk_tokenSet_75_()
		{
			long[] array = new long[8];
			array[0] = 577023736616583170L;
			array[1] = 8390664L;
			array[2] = 8797166764048L;
			array[3] = 134221825L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600185C RID: 6236 RVA: 0x000B89FC File Offset: 0x000B6BFC
		private static long[] mk_tokenSet_76_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883592L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x0600185D RID: 6237 RVA: 0x000B8A40 File Offset: 0x000B6C40
		private static long[] mk_tokenSet_77_()
		{
			long[] array = new long[8];
			array[0] = 577023736616583170L;
			array[1] = 562949961824392L;
			array[2] = 10996190019600L;
			array[3] = 3298669105473L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600185E RID: 6238 RVA: 0x000B8A98 File Offset: 0x000B6C98
		private static long[] mk_tokenSet_78_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695464960L;
			array[2] = -9223372002494504672L;
			array[3] = 17437030875554L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600185F RID: 6239 RVA: 0x000B8AF0 File Offset: 0x000B6CF0
		private static long[] mk_tokenSet_79_()
		{
			long[] array = new long[8];
			array[0] = 577027052433048066L;
			array[1] = 563156657256584L;
			array[2] = -2305830879151771344L;
			array[3] = 17437165509611L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001860 RID: 6240 RVA: 0x000B8B48 File Offset: 0x000B6D48
		private static long[] mk_tokenSet_80_()
		{
			long[] array = new long[8];
			array[0] = 4162293669690519634L;
			array[1] = 7530726664880532489L;
			array[2] = -9209548395507493798L;
			array[3] = 1099914285057L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001861 RID: 6241 RVA: 0x000B8BA0 File Offset: 0x000B6DA0
		private static long[] mk_tokenSet_81_()
		{
			long[] array = new long[8];
			array[0] = 4162293669690519634L;
			array[1] = 7530726664897313929L;
			array[2] = -9209546196484238246L;
			array[3] = 3298937540929L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001862 RID: 6242 RVA: 0x000B8BF8 File Offset: 0x000B6DF8
		private static long[] mk_tokenSet_82_()
		{
			long[] array = new long[8];
			array[0] = 4162296985506984530L;
			array[1] = 7530726871592746121L;
			array[2] = -2292016034971257478L;
			array[3] = 17437433945067L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001863 RID: 6243 RVA: 0x000B8C50 File Offset: 0x000B6E50
		private static long[] mk_tokenSet_83_()
		{
			long[] array = new long[8];
			array[0] = 4162296985506984530L;
			array[1] = 7530726871592746121L;
			array[2] = -2292016034971257478L;
			array[3] = 17437433928683L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001864 RID: 6244 RVA: 0x000B8CA8 File Offset: 0x000B6EA8
		private static long[] mk_tokenSet_84_()
		{
			long[] array = new long[8];
			array[0] = 512L;
			for (int i = 1; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 4123168604160L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001865 RID: 6245 RVA: 0x000B8CF4 File Offset: 0x000B6EF4
		private static long[] mk_tokenSet_85_()
		{
			long[] array = new long[8];
			array[0] = 4162293669690519634L;
			array[1] = 7530726664897313929L;
			array[2] = -9209546196484238246L;
			array[3] = 4123571261505L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001866 RID: 6246 RVA: 0x000B8D4C File Offset: 0x000B6F4C
		private static long[] mk_tokenSet_86_()
		{
			long[] array = new long[8];
			array[0] = 4162293669690519634L;
			array[1] = 7530726664897313929L;
			array[2] = -9209546196484238246L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001867 RID: 6247 RVA: 0x000B8DA4 File Offset: 0x000B6FA4
		private static long[] mk_tokenSet_87_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163714935491713L;
			array[2] = -9209546128838503334L;
			array[3] = 3298937540928L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001868 RID: 6248 RVA: 0x000B8DFC File Offset: 0x000B6FFC
		private static long[] mk_tokenSet_88_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695432192L;
			array[2] = -9223372002494504672L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001869 RID: 6249 RVA: 0x000B8E54 File Offset: 0x000B7054
		private static long[] mk_tokenSet_89_()
		{
			long[] array = new long[8];
			array[0] = 3585976970155045458L;
			array[1] = 7530163921630923905L;
			array[2] = -2292015967325522566L;
			array[3] = 17437433928682L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600186A RID: 6250 RVA: 0x000B8EAC File Offset: 0x000B70AC
		private static long[] mk_tokenSet_90_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163714935491713L;
			array[2] = -9209546128838503334L;
			array[3] = 4123571261504L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600186B RID: 6251 RVA: 0x000B8F04 File Offset: 0x000B7104
		private static long[] mk_tokenSet_91_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163714935491713L;
			array[2] = -9209546128838503334L;
			array[3] = 1099914285120L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600186C RID: 6252 RVA: 0x000B8F5C File Offset: 0x000B715C
		private static long[] mk_tokenSet_92_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -9205359837376937985L;
			array[3] = 17437433534890L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600186D RID: 6253 RVA: 0x000B8FA8 File Offset: 0x000B71A8
		private static long[] mk_tokenSet_93_()
		{
			long[] array = new long[8];
			array[0] = 4162293738409996882L;
			array[1] = 7531854764416728329L;
			array[2] = -9207857346623974278L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600186E RID: 6254 RVA: 0x000B9030 File Offset: 0x000B7230
		private static long[] mk_tokenSet_94_()
		{
			return new long[]
			{
				68719476736L,
				1125900512919808L,
				1688849860263968L,
				0L,
				0L,
				0L
			};
		}

		// Token: 0x0600186F RID: 6255 RVA: 0x000B9050 File Offset: 0x000B7250
		private static long[] mk_tokenSet_95_()
		{
			long[] array = new long[8];
			array[0] = 4294967296L;
			array[1] = 131941395333184L;
			array[2] = long.MinValue;
			array[3] = 7696581396736L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001870 RID: 6256 RVA: 0x000B90A8 File Offset: 0x000B72A8
		private static long[] mk_tokenSet_96_()
		{
			long[] array = new long[8];
			array[0] = 4162293738409996882L;
			array[1] = 7531854764416728329L;
			array[2] = -9205605546810289030L;
			array[3] = 3298937540933L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001871 RID: 6257 RVA: 0x000B9130 File Offset: 0x000B7330
		private static long[] mk_tokenSet_97_()
		{
			return new long[]
			{
				68719476736L,
				1125900512919808L,
				32L,
				0L,
				0L,
				0L
			};
		}

		// Token: 0x06001872 RID: 6258 RVA: 0x000B9150 File Offset: 0x000B7350
		private static long[] mk_tokenSet_98_()
		{
			long[] array = new long[8];
			array[0] = 68719477248L;
			array[1] = 1125900512936192L;
			array[2] = -9221111440948064224L;
			array[3] = 3298534883584L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001873 RID: 6259 RVA: 0x000B91A8 File Offset: 0x000B73A8
		private static long[] mk_tokenSet_99_()
		{
			long[] array = new long[8];
			array[0] = 4162293738409996882L;
			array[1] = 7531854764416711945L;
			array[2] = -9207857346623974278L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001874 RID: 6260 RVA: 0x000B9200 File Offset: 0x000B7400
		private static long[] mk_tokenSet_100_()
		{
			long[] array = new long[8];
			array[0] = 4162293738409996882L;
			array[1] = 7531854764416728329L;
			array[2] = -9205605546810289030L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001875 RID: 6261 RVA: 0x000B9258 File Offset: 0x000B7458
		private static long[] mk_tokenSet_101_()
		{
			long[] array = new long[8];
			array[0] = 144053237710848L;
			array[1] = 206695432192L;
			array[2] = -9223372002494504672L;
			array[3] = 17437030875555L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001876 RID: 6262 RVA: 0x000B92B0 File Offset: 0x000B74B0
		private static long[] mk_tokenSet_102_()
		{
			long[] array = new long[8];
			array[0] = 4162434475898351698L;
			array[1] = 7531854764416712073L;
			array[2] = -9207857277904497542L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001877 RID: 6263 RVA: 0x000B9308 File Offset: 0x000B7508
		private static long[] mk_tokenSet_103_()
		{
			long[] array = new long[8];
			array[0] = 4162434475898351698L;
			array[1] = 7531854764416712073L;
			array[2] = -9207857277904497542L;
			array[3] = 1099914285125L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001878 RID: 6264 RVA: 0x000B9360 File Offset: 0x000B7560
		private static long[] mk_tokenSet_104_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163714918714497L;
			array[2] = -9209546128838503334L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001879 RID: 6265 RVA: 0x000B93B8 File Offset: 0x000B75B8
		private static long[] mk_tokenSet_105_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714497L;
			array[2] = -9209546197557980070L;
			array[3] = 1099914285056L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600187A RID: 6266 RVA: 0x000B9410 File Offset: 0x000B7610
		private static long[] mk_tokenSet_106_()
		{
			long[] array = new long[8];
			array[0] = 4611689336324227072L;
			array[1] = 241055170592L;
			array[2] = -9223371997662666464L;
			array[3] = 17437030875554L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600187B RID: 6267 RVA: 0x000B9468 File Offset: 0x000B7668
		private static long[] mk_tokenSet_107_()
		{
			long[] array = new long[8];
			array[0] = 3458905251308896256L;
			array[1] = 0L;
			array[2] = -9223371968135294976L;
			array[3] = 1099511627776L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600187C RID: 6268 RVA: 0x000B94B8 File Offset: 0x000B76B8
		private static long[] mk_tokenSet_108_()
		{
			long[] array = new long[8];
			array[0] = 2255115563040800L;
			array[1] = 9002788487168L;
			array[2] = -9223371933758246624L;
			array[3] = 17437030875562L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600187D RID: 6269 RVA: 0x000B9510 File Offset: 0x000B7710
		private static long[] mk_tokenSet_109_()
		{
			long[] array = new long[6];
			array[0] = 3458905251308896256L;
			array[2] = -9223371968135294976L;
			return array;
		}

		// Token: 0x0600187E RID: 6270 RVA: 0x000B9540 File Offset: 0x000B7740
		private static long[] mk_tokenSet_110_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534899968L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x0600187F RID: 6271 RVA: 0x000B9584 File Offset: 0x000B7784
		private static long[] mk_tokenSet_111_()
		{
			long[] array = new long[8];
			array[0] = 3585836232666689618L;
			array[1] = 7530163921614146689L;
			array[2] = -2292016036044999302L;
			array[3] = 17437433928682L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001880 RID: 6272 RVA: 0x000B95DC File Offset: 0x000B77DC
		private static long[] mk_tokenSet_112_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 1; i++)
			{
				array[i] = 0L;
			}
			array[2] = long.MinValue;
			array[3] = 3298534883584L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001881 RID: 6273 RVA: 0x000B962C File Offset: 0x000B782C
		private static long[] mk_tokenSet_113_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163714918714497L;
			array[2] = -9209546128838503334L;
			array[3] = 3298937540864L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001882 RID: 6274 RVA: 0x000B9684 File Offset: 0x000B7884
		private static long[] mk_tokenSet_114_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 1064960L;
			array[2] = 0L;
			array[3] = 1099511627840L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001883 RID: 6275 RVA: 0x000B96CC File Offset: 0x000B78CC
		private static long[] mk_tokenSet_115_()
		{
			long[] array = new long[8];
			array[0] = 4162293738409996370L;
			array[1] = 7531854764416711945L;
			array[2] = -9207857346623974278L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001884 RID: 6276 RVA: 0x000B9724 File Offset: 0x000B7924
		private static long[] mk_tokenSet_116_()
		{
			long[] array = new long[8];
			array[0] = 4162293738409996370L;
			array[1] = 7531854764416728329L;
			array[2] = -9205605546810289030L;
			array[3] = 3298937540677L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001885 RID: 6277 RVA: 0x000B977C File Offset: 0x000B797C
		private static long[] mk_tokenSet_117_()
		{
			long[] array = new long[8];
			array[0] = 4162293669153648722L;
			array[1] = 7530163714927102977L;
			array[2] = -9209548395507493798L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001886 RID: 6278 RVA: 0x000B97D4 File Offset: 0x000B79D4
		private static long[] mk_tokenSet_118_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 9570149275275264L;
			array[2] = 1073741824L;
			array[3] = 1099511627841L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001887 RID: 6279 RVA: 0x000B9820 File Offset: 0x000B7A20
		private static long[] mk_tokenSet_119_()
		{
			long[] array = new long[8];
			array[0] = 3549804119831261266L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 7696984051968L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001888 RID: 6280 RVA: 0x000B98A8 File Offset: 0x000B7AA8
		private static long[] mk_tokenSet_120_()
		{
			return new long[]
			{
				281474976710656L,
				274882101248L,
				4294967296L,
				0L,
				0L,
				0L
			};
		}

		// Token: 0x06001889 RID: 6281 RVA: 0x000B98C8 File Offset: 0x000B7AC8
		private static long[] mk_tokenSet_121_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 128L;
			array[2] = 0L;
			array[3] = 3298534883648L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600188A RID: 6282 RVA: 0x000B9910 File Offset: 0x000B7B10
		private static long[] mk_tokenSet_122_()
		{
			long[] array = new long[8];
			array[0] = 3315816464896L;
			array[1] = 206695432320L;
			array[2] = -2305841875341790944L;
			array[3] = 17437031271402L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600188B RID: 6283 RVA: 0x000B9968 File Offset: 0x000B7B68
		private static long[] mk_tokenSet_123_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 8796093022208L;
			array[2] = 0L;
			array[3] = 7696581394688L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600188C RID: 6284 RVA: 0x000B99B0 File Offset: 0x000B7BB0
		private static long[] mk_tokenSet_124_()
		{
			long[] array = new long[8];
			array[0] = 3585973654338580562L;
			array[1] = 7530163783638191105L;
			array[2] = -9209548396581235622L;
			array[3] = 26130446815618L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600188D RID: 6285 RVA: 0x000B9A08 File Offset: 0x000B7C08
		private static long[] mk_tokenSet_125_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714369L;
			array[2] = -9209548396581235622L;
			array[3] = 1112262316097L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600188E RID: 6286 RVA: 0x000B9A60 File Offset: 0x000B7C60
		private static long[] mk_tokenSet_126_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530163714918714369L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600188F RID: 6287 RVA: 0x000B9AB8 File Offset: 0x000B7CB8
		private static long[] mk_tokenSet_127_()
		{
			long[] array = new long[8];
			array[0] = 140738564194304L;
			array[1] = 18014398509482000L;
			array[2] = (long)(int.MinValue);
			array[3] = 3298534883328L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001890 RID: 6288 RVA: 0x000B9B0C File Offset: 0x000B7D0C
		private static long[] mk_tokenSet_128_()
		{
			long[] array = new long[8];
			array[0] = 3585973655414419538L;
			array[1] = -1675334557835719663L;
			array[2] = -9209548394433751974L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001891 RID: 6289 RVA: 0x000B9B98 File Offset: 0x000B7D98
		private static long[] mk_tokenSet_129_()
		{
			return new long[]
			{
				140738564194304L,
				-9205357535266078704L,
				2147483648L,
				0L,
				0L,
				0L
			};
		}

		// Token: 0x06001892 RID: 6290 RVA: 0x000B9BB8 File Offset: 0x000B7DB8
		private static long[] mk_tokenSet_130_()
		{
			long[] array = new long[8];
			array[0] = 3585973655481528402L;
			array[1] = -1675334557835686895L;
			array[2] = -9209548256994798246L;
			array[3] = 3298937540929L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001893 RID: 6291 RVA: 0x000B9C10 File Offset: 0x000B7E10
		private static long[] mk_tokenSet_131_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 1610612896L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001894 RID: 6292 RVA: 0x000B9C50 File Offset: 0x000B7E50
		private static long[] mk_tokenSet_132_()
		{
			long[] array = new long[8];
			array[0] = 3585973655414419538L;
			array[1] = -1675332358812431343L;
			array[2] = -9209548394433751718L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001895 RID: 6293 RVA: 0x000B9CA8 File Offset: 0x000B7EA8
		private static long[] mk_tokenSet_133_()
		{
			long[] array = new long[8];
			array[0] = 3585832916850225234L;
			array[1] = 7530022977430359041L;
			array[2] = -9209548396581235622L;
			array[3] = 1099914285121L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001896 RID: 6294 RVA: 0x000B9D00 File Offset: 0x000B7F00
		private static long[] mk_tokenSet_134_()
		{
			long[] array = new long[8];
			array[0] = -14L;
			array[1] = -1L;
			array[2] = -9205359837376937985L;
			array[3] = 17437433532843L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001897 RID: 6295 RVA: 0x000B9D4C File Offset: 0x000B7F4C
		private static long[] mk_tokenSet_135_()
		{
			long[] array = new long[8];
			array[0] = 3315816480768L;
			array[1] = 242162991104L;
			array[2] = -1152920370734943968L;
			array[3] = 17437031394234L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x06001898 RID: 6296 RVA: 0x000B9DA4 File Offset: 0x000B7FA4
		private static long[] mk_tokenSet_136_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883585L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x06001899 RID: 6297 RVA: 0x000B9DE8 File Offset: 0x000B7FE8
		private static long[] mk_tokenSet_137_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883649L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x0600189A RID: 6298 RVA: 0x000B9E2C File Offset: 0x000B802C
		private static long[] mk_tokenSet_138_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534883648L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x0600189B RID: 6299 RVA: 0x000B9E70 File Offset: 0x000B8070
		private static long[] mk_tokenSet_139_()
		{
			long[] array = new long[8];
			for (int i = 0; i <= 2; i++)
			{
				array[i] = 0L;
			}
			array[3] = 3298534885632L;
			for (int j = 4; j <= 7; j++)
			{
				array[j] = 0L;
			}
			return array;
		}

		// Token: 0x0600189C RID: 6300 RVA: 0x000B9EB4 File Offset: 0x000B80B4
		private static long[] mk_tokenSet_140_()
		{
			long[] array = new long[8];
			array[0] = 3315749355520L;
			array[1] = 206695432192L;
			array[2] = -9223372002494504672L;
			array[3] = 17437030351106L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600189D RID: 6301 RVA: 0x000B9F0C File Offset: 0x000B810C
		private static long[] mk_tokenSet_141_()
		{
			long[] array = new long[8];
			array[0] = 4451794068849227474L;
			array[1] = -1668717557681570407L;
			array[2] = -1137405609624603270L;
			array[3] = 17437434049535L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600189E RID: 6302 RVA: 0x000B9F64 File Offset: 0x000B8164
		private static long[] mk_tokenSet_142_()
		{
			long[] array = new long[8];
			array[0] = 4451790753032763090L;
			array[1] = -1668717695120654951L;
			array[2] = -1137405643984874118L;
			array[3] = 4123571778559L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x0600189F RID: 6303 RVA: 0x000B9FBC File Offset: 0x000B81BC
		private static long[] mk_tokenSet_143_()
		{
			long[] array = new long[8];
			array[0] = 0L;
			array[1] = 68719476736L;
			array[2] = 0L;
			array[3] = 5239323230210L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x060018A0 RID: 6304 RVA: 0x000BA004 File Offset: 0x000B8204
		private static long[] mk_tokenSet_144_()
		{
			long[] array = new long[8];
			array[0] = 4451790753099871954L;
			array[1] = -1668717695120654951L;
			array[2] = -1137405643984874118L;
			array[3] = 4123571778559L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x060018A1 RID: 6305 RVA: 0x000BA05C File Offset: 0x000B825C
		private static long[] mk_tokenSet_145_()
		{
			long[] array = new long[8];
			array[0] = 2395853051396128L;
			array[1] = 206695432192L;
			array[2] = -9223372002494504672L;
			array[3] = 17437030875555L;
			for (int i = 4; i <= 7; i++)
			{
				array[i] = 0L;
			}
			return array;
		}

		// Token: 0x040016D3 RID: 5843
		public const int EOF = 1;

		// Token: 0x040016D4 RID: 5844
		public const int NULL_TREE_LOOKAHEAD = 3;

		// Token: 0x040016D5 RID: 5845
		public const int Add = 4;

		// Token: 0x040016D6 RID: 5846
		public const int All = 5;

		// Token: 0x040016D7 RID: 5847
		public const int Alter = 6;

		// Token: 0x040016D8 RID: 5848
		public const int And = 7;

		// Token: 0x040016D9 RID: 5849
		public const int Any = 8;

		// Token: 0x040016DA RID: 5850
		public const int As = 9;

		// Token: 0x040016DB RID: 5851
		public const int Asc = 10;

		// Token: 0x040016DC RID: 5852
		public const int Authorization = 11;

		// Token: 0x040016DD RID: 5853
		public const int Backup = 12;

		// Token: 0x040016DE RID: 5854
		public const int Begin = 13;

		// Token: 0x040016DF RID: 5855
		public const int Between = 14;

		// Token: 0x040016E0 RID: 5856
		public const int Break = 15;

		// Token: 0x040016E1 RID: 5857
		public const int Browse = 16;

		// Token: 0x040016E2 RID: 5858
		public const int Bulk = 17;

		// Token: 0x040016E3 RID: 5859
		public const int By = 18;

		// Token: 0x040016E4 RID: 5860
		public const int Cascade = 19;

		// Token: 0x040016E5 RID: 5861
		public const int Case = 20;

		// Token: 0x040016E6 RID: 5862
		public const int Check = 21;

		// Token: 0x040016E7 RID: 5863
		public const int Checkpoint = 22;

		// Token: 0x040016E8 RID: 5864
		public const int Close = 23;

		// Token: 0x040016E9 RID: 5865
		public const int Clustered = 24;

		// Token: 0x040016EA RID: 5866
		public const int Coalesce = 25;

		// Token: 0x040016EB RID: 5867
		public const int Collate = 26;

		// Token: 0x040016EC RID: 5868
		public const int Column = 27;

		// Token: 0x040016ED RID: 5869
		public const int Commit = 28;

		// Token: 0x040016EE RID: 5870
		public const int Compute = 29;

		// Token: 0x040016EF RID: 5871
		public const int Constraint = 30;

		// Token: 0x040016F0 RID: 5872
		public const int Contains = 31;

		// Token: 0x040016F1 RID: 5873
		public const int ContainsTable = 32;

		// Token: 0x040016F2 RID: 5874
		public const int Continue = 33;

		// Token: 0x040016F3 RID: 5875
		public const int Convert = 34;

		// Token: 0x040016F4 RID: 5876
		public const int Create = 35;

		// Token: 0x040016F5 RID: 5877
		public const int Cross = 36;

		// Token: 0x040016F6 RID: 5878
		public const int Current = 37;

		// Token: 0x040016F7 RID: 5879
		public const int CurrentDate = 38;

		// Token: 0x040016F8 RID: 5880
		public const int CurrentTime = 39;

		// Token: 0x040016F9 RID: 5881
		public const int CurrentTimestamp = 40;

		// Token: 0x040016FA RID: 5882
		public const int CurrentUser = 41;

		// Token: 0x040016FB RID: 5883
		public const int Cursor = 42;

		// Token: 0x040016FC RID: 5884
		public const int Database = 43;

		// Token: 0x040016FD RID: 5885
		public const int Dbcc = 44;

		// Token: 0x040016FE RID: 5886
		public const int Deallocate = 45;

		// Token: 0x040016FF RID: 5887
		public const int Declare = 46;

		// Token: 0x04001700 RID: 5888
		public const int Default = 47;

		// Token: 0x04001701 RID: 5889
		public const int Delete = 48;

		// Token: 0x04001702 RID: 5890
		public const int Deny = 49;

		// Token: 0x04001703 RID: 5891
		public const int Desc = 50;

		// Token: 0x04001704 RID: 5892
		public const int Distinct = 51;

		// Token: 0x04001705 RID: 5893
		public const int Distributed = 52;

		// Token: 0x04001706 RID: 5894
		public const int Double = 53;

		// Token: 0x04001707 RID: 5895
		public const int Drop = 54;

		// Token: 0x04001708 RID: 5896
		public const int Else = 55;

		// Token: 0x04001709 RID: 5897
		public const int End = 56;

		// Token: 0x0400170A RID: 5898
		public const int Errlvl = 57;

		// Token: 0x0400170B RID: 5899
		public const int Escape = 58;

		// Token: 0x0400170C RID: 5900
		public const int Except = 59;

		// Token: 0x0400170D RID: 5901
		public const int Exec = 60;

		// Token: 0x0400170E RID: 5902
		public const int Execute = 61;

		// Token: 0x0400170F RID: 5903
		public const int Exists = 62;

		// Token: 0x04001710 RID: 5904
		public const int Exit = 63;

		// Token: 0x04001711 RID: 5905
		public const int Fetch = 64;

		// Token: 0x04001712 RID: 5906
		public const int File = 65;

		// Token: 0x04001713 RID: 5907
		public const int FillFactor = 66;

		// Token: 0x04001714 RID: 5908
		public const int For = 67;

		// Token: 0x04001715 RID: 5909
		public const int Foreign = 68;

		// Token: 0x04001716 RID: 5910
		public const int FreeText = 69;

		// Token: 0x04001717 RID: 5911
		public const int FreeTextTable = 70;

		// Token: 0x04001718 RID: 5912
		public const int From = 71;

		// Token: 0x04001719 RID: 5913
		public const int Full = 72;

		// Token: 0x0400171A RID: 5914
		public const int Function = 73;

		// Token: 0x0400171B RID: 5915
		public const int GoTo = 74;

		// Token: 0x0400171C RID: 5916
		public const int Grant = 75;

		// Token: 0x0400171D RID: 5917
		public const int Group = 76;

		// Token: 0x0400171E RID: 5918
		public const int Having = 77;

		// Token: 0x0400171F RID: 5919
		public const int HoldLock = 78;

		// Token: 0x04001720 RID: 5920
		public const int Identity = 79;

		// Token: 0x04001721 RID: 5921
		public const int IdentityInsert = 80;

		// Token: 0x04001722 RID: 5922
		public const int IdentityColumn = 81;

		// Token: 0x04001723 RID: 5923
		public const int If = 82;

		// Token: 0x04001724 RID: 5924
		public const int In = 83;

		// Token: 0x04001725 RID: 5925
		public const int Index = 84;

		// Token: 0x04001726 RID: 5926
		public const int Inner = 85;

		// Token: 0x04001727 RID: 5927
		public const int Insert = 86;

		// Token: 0x04001728 RID: 5928
		public const int Intersect = 87;

		// Token: 0x04001729 RID: 5929
		public const int Into = 88;

		// Token: 0x0400172A RID: 5930
		public const int Is = 89;

		// Token: 0x0400172B RID: 5931
		public const int Join = 90;

		// Token: 0x0400172C RID: 5932
		public const int Key = 91;

		// Token: 0x0400172D RID: 5933
		public const int Kill = 92;

		// Token: 0x0400172E RID: 5934
		public const int Left = 93;

		// Token: 0x0400172F RID: 5935
		public const int Like = 94;

		// Token: 0x04001730 RID: 5936
		public const int LineNo = 95;

		// Token: 0x04001731 RID: 5937
		public const int National = 96;

		// Token: 0x04001732 RID: 5938
		public const int NoCheck = 97;

		// Token: 0x04001733 RID: 5939
		public const int NonClustered = 98;

		// Token: 0x04001734 RID: 5940
		public const int Not = 99;

		// Token: 0x04001735 RID: 5941
		public const int Null = 100;

		// Token: 0x04001736 RID: 5942
		public const int NullIf = 101;

		// Token: 0x04001737 RID: 5943
		public const int Of = 102;

		// Token: 0x04001738 RID: 5944
		public const int Off = 103;

		// Token: 0x04001739 RID: 5945
		public const int Offsets = 104;

		// Token: 0x0400173A RID: 5946
		public const int On = 105;

		// Token: 0x0400173B RID: 5947
		public const int Open = 106;

		// Token: 0x0400173C RID: 5948
		public const int OpenDataSource = 107;

		// Token: 0x0400173D RID: 5949
		public const int OpenQuery = 108;

		// Token: 0x0400173E RID: 5950
		public const int OpenRowSet = 109;

		// Token: 0x0400173F RID: 5951
		public const int OpenXml = 110;

		// Token: 0x04001740 RID: 5952
		public const int Option = 111;

		// Token: 0x04001741 RID: 5953
		public const int Or = 112;

		// Token: 0x04001742 RID: 5954
		public const int Order = 113;

		// Token: 0x04001743 RID: 5955
		public const int Outer = 114;

		// Token: 0x04001744 RID: 5956
		public const int Over = 115;

		// Token: 0x04001745 RID: 5957
		public const int Percent = 116;

		// Token: 0x04001746 RID: 5958
		public const int Plan = 117;

		// Token: 0x04001747 RID: 5959
		public const int Primary = 118;

		// Token: 0x04001748 RID: 5960
		public const int Print = 119;

		// Token: 0x04001749 RID: 5961
		public const int Proc = 120;

		// Token: 0x0400174A RID: 5962
		public const int Procedure = 121;

		// Token: 0x0400174B RID: 5963
		public const int Public = 122;

		// Token: 0x0400174C RID: 5964
		public const int Raiserror = 123;

		// Token: 0x0400174D RID: 5965
		public const int Read = 124;

		// Token: 0x0400174E RID: 5966
		public const int ReadText = 125;

		// Token: 0x0400174F RID: 5967
		public const int Reconfigure = 126;

		// Token: 0x04001750 RID: 5968
		public const int References = 127;

		// Token: 0x04001751 RID: 5969
		public const int Replication = 128;

		// Token: 0x04001752 RID: 5970
		public const int Restore = 129;

		// Token: 0x04001753 RID: 5971
		public const int Restrict = 130;

		// Token: 0x04001754 RID: 5972
		public const int Return = 131;

		// Token: 0x04001755 RID: 5973
		public const int Revoke = 132;

		// Token: 0x04001756 RID: 5974
		public const int Right = 133;

		// Token: 0x04001757 RID: 5975
		public const int Rollback = 134;

		// Token: 0x04001758 RID: 5976
		public const int RowCount = 135;

		// Token: 0x04001759 RID: 5977
		public const int RowGuidColumn = 136;

		// Token: 0x0400175A RID: 5978
		public const int Rule = 137;

		// Token: 0x0400175B RID: 5979
		public const int Save = 138;

		// Token: 0x0400175C RID: 5980
		public const int Schema = 139;

		// Token: 0x0400175D RID: 5981
		public const int Select = 140;

		// Token: 0x0400175E RID: 5982
		public const int SessionUser = 141;

		// Token: 0x0400175F RID: 5983
		public const int Set = 142;

		// Token: 0x04001760 RID: 5984
		public const int SetUser = 143;

		// Token: 0x04001761 RID: 5985
		public const int Shutdown = 144;

		// Token: 0x04001762 RID: 5986
		public const int Some = 145;

		// Token: 0x04001763 RID: 5987
		public const int Statistics = 146;

		// Token: 0x04001764 RID: 5988
		public const int SystemUser = 147;

		// Token: 0x04001765 RID: 5989
		public const int Table = 148;

		// Token: 0x04001766 RID: 5990
		public const int TextSize = 149;

		// Token: 0x04001767 RID: 5991
		public const int Then = 150;

		// Token: 0x04001768 RID: 5992
		public const int To = 151;

		// Token: 0x04001769 RID: 5993
		public const int Top = 152;

		// Token: 0x0400176A RID: 5994
		public const int Tran = 153;

		// Token: 0x0400176B RID: 5995
		public const int Transaction = 154;

		// Token: 0x0400176C RID: 5996
		public const int Trigger = 155;

		// Token: 0x0400176D RID: 5997
		public const int Truncate = 156;

		// Token: 0x0400176E RID: 5998
		public const int TSEqual = 157;

		// Token: 0x0400176F RID: 5999
		public const int Union = 158;

		// Token: 0x04001770 RID: 6000
		public const int Unique = 159;

		// Token: 0x04001771 RID: 6001
		public const int Update = 160;

		// Token: 0x04001772 RID: 6002
		public const int UpdateText = 161;

		// Token: 0x04001773 RID: 6003
		public const int Use = 162;

		// Token: 0x04001774 RID: 6004
		public const int User = 163;

		// Token: 0x04001775 RID: 6005
		public const int Values = 164;

		// Token: 0x04001776 RID: 6006
		public const int Varying = 165;

		// Token: 0x04001777 RID: 6007
		public const int View = 166;

		// Token: 0x04001778 RID: 6008
		public const int WaitFor = 167;

		// Token: 0x04001779 RID: 6009
		public const int When = 168;

		// Token: 0x0400177A RID: 6010
		public const int Where = 169;

		// Token: 0x0400177B RID: 6011
		public const int While = 170;

		// Token: 0x0400177C RID: 6012
		public const int With = 171;

		// Token: 0x0400177D RID: 6013
		public const int WriteText = 172;

		// Token: 0x0400177E RID: 6014
		public const int Disk = 173;

		// Token: 0x0400177F RID: 6015
		public const int Precision = 174;

		// Token: 0x04001780 RID: 6016
		public const int External = 175;

		// Token: 0x04001781 RID: 6017
		public const int Revert = 176;

		// Token: 0x04001782 RID: 6018
		public const int Pivot = 177;

		// Token: 0x04001783 RID: 6019
		public const int Unpivot = 178;

		// Token: 0x04001784 RID: 6020
		public const int TableSample = 179;

		// Token: 0x04001785 RID: 6021
		public const int Dump = 180;

		// Token: 0x04001786 RID: 6022
		public const int Load = 181;

		// Token: 0x04001787 RID: 6023
		public const int Merge = 182;

		// Token: 0x04001788 RID: 6024
		public const int StopList = 183;

		// Token: 0x04001789 RID: 6025
		public const int SemanticKeyPhraseTable = 184;

		// Token: 0x0400178A RID: 6026
		public const int SemanticSimilarityTable = 185;

		// Token: 0x0400178B RID: 6027
		public const int SemanticSimilarityDetailsTable = 186;

		// Token: 0x0400178C RID: 6028
		public const int TryConvert = 187;

		// Token: 0x0400178D RID: 6029
		public const int Bang = 188;

		// Token: 0x0400178E RID: 6030
		public const int PercentSign = 189;

		// Token: 0x0400178F RID: 6031
		public const int Ampersand = 190;

		// Token: 0x04001790 RID: 6032
		public const int LeftParenthesis = 191;

		// Token: 0x04001791 RID: 6033
		public const int RightParenthesis = 192;

		// Token: 0x04001792 RID: 6034
		public const int LeftCurly = 193;

		// Token: 0x04001793 RID: 6035
		public const int RightCurly = 194;

		// Token: 0x04001794 RID: 6036
		public const int Star = 195;

		// Token: 0x04001795 RID: 6037
		public const int MultiplyEquals = 196;

		// Token: 0x04001796 RID: 6038
		public const int Plus = 197;

		// Token: 0x04001797 RID: 6039
		public const int Comma = 198;

		// Token: 0x04001798 RID: 6040
		public const int Minus = 199;

		// Token: 0x04001799 RID: 6041
		public const int Dot = 200;

		// Token: 0x0400179A RID: 6042
		public const int Divide = 201;

		// Token: 0x0400179B RID: 6043
		public const int Colon = 202;

		// Token: 0x0400179C RID: 6044
		public const int DoubleColon = 203;

		// Token: 0x0400179D RID: 6045
		public const int Semicolon = 204;

		// Token: 0x0400179E RID: 6046
		public const int LessThan = 205;

		// Token: 0x0400179F RID: 6047
		public const int EqualsSign = 206;

		// Token: 0x040017A0 RID: 6048
		public const int RightOuterJoin = 207;

		// Token: 0x040017A1 RID: 6049
		public const int GreaterThan = 208;

		// Token: 0x040017A2 RID: 6050
		public const int Circumflex = 209;

		// Token: 0x040017A3 RID: 6051
		public const int VerticalLine = 210;

		// Token: 0x040017A4 RID: 6052
		public const int Tilde = 211;

		// Token: 0x040017A5 RID: 6053
		public const int AddEquals = 212;

		// Token: 0x040017A6 RID: 6054
		public const int SubtractEquals = 213;

		// Token: 0x040017A7 RID: 6055
		public const int DivideEquals = 214;

		// Token: 0x040017A8 RID: 6056
		public const int ModEquals = 215;

		// Token: 0x040017A9 RID: 6057
		public const int BitwiseAndEquals = 216;

		// Token: 0x040017AA RID: 6058
		public const int BitwiseOrEquals = 217;

		// Token: 0x040017AB RID: 6059
		public const int BitwiseXorEquals = 218;

		// Token: 0x040017AC RID: 6060
		public const int Go = 219;

		// Token: 0x040017AD RID: 6061
		public const int Label = 220;

		// Token: 0x040017AE RID: 6062
		public const int Integer = 221;

		// Token: 0x040017AF RID: 6063
		public const int Numeric = 222;

		// Token: 0x040017B0 RID: 6064
		public const int Real = 223;

		// Token: 0x040017B1 RID: 6065
		public const int HexLiteral = 224;

		// Token: 0x040017B2 RID: 6066
		public const int Money = 225;

		// Token: 0x040017B3 RID: 6067
		public const int SqlCommandIdentifier = 226;

		// Token: 0x040017B4 RID: 6068
		public const int PseudoColumn = 227;

		// Token: 0x040017B5 RID: 6069
		public const int DollarPartition = 228;

		// Token: 0x040017B6 RID: 6070
		public const int AsciiStringOrQuotedIdentifier = 229;

		// Token: 0x040017B7 RID: 6071
		public const int AsciiStringLiteral = 230;

		// Token: 0x040017B8 RID: 6072
		public const int UnicodeStringLiteral = 231;

		// Token: 0x040017B9 RID: 6073
		public const int Identifier = 232;

		// Token: 0x040017BA RID: 6074
		public const int QuotedIdentifier = 233;

		// Token: 0x040017BB RID: 6075
		public const int Variable = 234;

		// Token: 0x040017BC RID: 6076
		public const int OdbcInitiator = 235;

		// Token: 0x040017BD RID: 6077
		public const int ProcNameSemicolon = 236;

		// Token: 0x040017BE RID: 6078
		public const int SingleLineComment = 237;

		// Token: 0x040017BF RID: 6079
		public const int MultilineComment = 238;

		// Token: 0x040017C0 RID: 6080
		public const int WhiteSpace = 239;

		// Token: 0x040017C1 RID: 6081
		public static readonly string[] tokenNames_ = new string[]
		{
			"\"<0>\"",
			"\"EOF\"",
			"\"<2>\"",
			"\"NULL_TREE_LOOKAHEAD\"",
			"\"add\"",
			"\"all\"",
			"\"alter\"",
			"\"and\"",
			"\"any\"",
			"\"as\"",
			"\"asc\"",
			"\"authorization\"",
			"\"backup\"",
			"\"begin\"",
			"\"between\"",
			"\"break\"",
			"\"browse\"",
			"\"bulk\"",
			"\"by\"",
			"\"cascade\"",
			"\"case\"",
			"\"check\"",
			"\"checkpoint\"",
			"\"close\"",
			"\"clustered\"",
			"\"coalesce\"",
			"\"collate\"",
			"\"column\"",
			"\"commit\"",
			"\"compute\"",
			"\"constraint\"",
			"\"contains\"",
			"\"containstable\"",
			"\"continue\"",
			"\"convert\"",
			"\"create\"",
			"\"cross\"",
			"\"current\"",
			"\"current_date\"",
			"\"current_time\"",
			"\"current_timestamp\"",
			"\"current_user\"",
			"\"cursor\"",
			"\"database\"",
			"\"dbcc\"",
			"\"deallocate\"",
			"\"declare\"",
			"\"default\"",
			"\"delete\"",
			"\"deny\"",
			"\"desc\"",
			"\"distinct\"",
			"\"distributed\"",
			"\"double\"",
			"\"drop\"",
			"\"else\"",
			"\"end\"",
			"\"errlvl\"",
			"\"escape\"",
			"\"except\"",
			"\"exec\"",
			"\"execute\"",
			"\"exists\"",
			"\"exit\"",
			"\"fetch\"",
			"\"file\"",
			"\"fillfactor\"",
			"\"for\"",
			"\"foreign\"",
			"\"freetext\"",
			"\"freetexttable\"",
			"\"from\"",
			"\"full\"",
			"\"function\"",
			"\"goto\"",
			"\"grant\"",
			"\"group\"",
			"\"having\"",
			"\"holdlock\"",
			"\"identity\"",
			"\"identity_insert\"",
			"\"identitycol\"",
			"\"if\"",
			"\"in\"",
			"\"index\"",
			"\"inner\"",
			"\"insert\"",
			"\"intersect\"",
			"\"into\"",
			"\"is\"",
			"\"join\"",
			"\"key\"",
			"\"kill\"",
			"\"left\"",
			"\"like\"",
			"\"lineno\"",
			"\"national\"",
			"\"nocheck\"",
			"\"nonclustered\"",
			"\"not\"",
			"\"null\"",
			"\"nullif\"",
			"\"of\"",
			"\"off\"",
			"\"offsets\"",
			"\"on\"",
			"\"open\"",
			"\"opendatasource\"",
			"\"openquery\"",
			"\"openrowset\"",
			"\"openxml\"",
			"\"option\"",
			"\"or\"",
			"\"order\"",
			"\"outer\"",
			"\"over\"",
			"\"percent\"",
			"\"plan\"",
			"\"primary\"",
			"\"print\"",
			"\"proc\"",
			"\"procedure\"",
			"\"public\"",
			"\"raiserror\"",
			"\"read\"",
			"\"readtext\"",
			"\"reconfigure\"",
			"\"references\"",
			"\"replication\"",
			"\"restore\"",
			"\"restrict\"",
			"\"return\"",
			"\"revoke\"",
			"\"right\"",
			"\"rollback\"",
			"\"rowcount\"",
			"\"rowguidcol\"",
			"\"rule\"",
			"\"save\"",
			"\"schema\"",
			"\"select\"",
			"\"session_user\"",
			"\"set\"",
			"\"setuser\"",
			"\"shutdown\"",
			"\"some\"",
			"\"statistics\"",
			"\"system_user\"",
			"\"table\"",
			"\"textsize\"",
			"\"then\"",
			"\"to\"",
			"\"top\"",
			"\"tran\"",
			"\"transaction\"",
			"\"trigger\"",
			"\"truncate\"",
			"\"tsequal\"",
			"\"union\"",
			"\"unique\"",
			"\"update\"",
			"\"updatetext\"",
			"\"use\"",
			"\"user\"",
			"\"values\"",
			"\"varying\"",
			"\"view\"",
			"\"waitfor\"",
			"\"when\"",
			"\"where\"",
			"\"while\"",
			"\"with\"",
			"\"writetext\"",
			"\"Disk\"",
			"\"Precision\"",
			"\"External\"",
			"\"Revert\"",
			"\"Pivot\"",
			"\"Unpivot\"",
			"\"TableSample\"",
			"\"Dump\"",
			"\"Load\"",
			"\"Merge\"",
			"\"StopList\"",
			"\"SemanticKeyPhraseTable\"",
			"\"SemanticSimilarityTable\"",
			"\"SemanticSimilarityDetailsTable\"",
			"\"TryConvert\"",
			"\"Bang\"",
			"\"PercentSign\"",
			"\"Ampersand\"",
			"\"LeftParenthesis\"",
			"\"RightParenthesis\"",
			"\"LeftCurly\"",
			"\"RightCurly\"",
			"\"Star\"",
			"\"MultiplyEquals\"",
			"\"Plus\"",
			"\"Comma\"",
			"\"Minus\"",
			"\"Dot\"",
			"\"Divide\"",
			"\"Colon\"",
			"\"DoubleColon\"",
			"\"Semicolon\"",
			"\"LessThan\"",
			"\"EqualsSign\"",
			"\"RightOuterJoin\"",
			"\"GreaterThan\"",
			"\"Circumflex\"",
			"\"VerticalLine\"",
			"\"Tilde\"",
			"\"AddEquals\"",
			"\"SubtractEquals\"",
			"\"DivideEquals\"",
			"\"ModEquals\"",
			"\"BitwiseAndEquals\"",
			"\"BitwiseOrEquals\"",
			"\"BitwiseXorEquals\"",
			"\"Go\"",
			"\"Label\"",
			"\"Integer\"",
			"\"Numeric\"",
			"\"Real\"",
			"\"HexLiteral\"",
			"\"Money\"",
			"\"SqlCommandIdentifier\"",
			"\"PseudoColumn\"",
			"\"DollarPartition\"",
			"\"AsciiStringOrQuotedIdentifier\"",
			"\"AsciiStringLiteral\"",
			"\"UnicodeStringLiteral\"",
			"\"Identifier\"",
			"\"QuotedIdentifier\"",
			"\"Variable\"",
			"\"OdbcInitiator\"",
			"\"ProcNameSemicolon\"",
			"\"SingleLineComment\"",
			"\"MultilineComment\"",
			"\"WhiteSpace\""
		};

		// Token: 0x040017C2 RID: 6082
		public static readonly BitSet tokenSet_0_ = new BitSet(TSql90ParserInternal.mk_tokenSet_0_());

		// Token: 0x040017C3 RID: 6083
		public static readonly BitSet tokenSet_1_ = new BitSet(TSql90ParserInternal.mk_tokenSet_1_());

		// Token: 0x040017C4 RID: 6084
		public static readonly BitSet tokenSet_2_ = new BitSet(TSql90ParserInternal.mk_tokenSet_2_());

		// Token: 0x040017C5 RID: 6085
		public static readonly BitSet tokenSet_3_ = new BitSet(TSql90ParserInternal.mk_tokenSet_3_());

		// Token: 0x040017C6 RID: 6086
		public static readonly BitSet tokenSet_4_ = new BitSet(TSql90ParserInternal.mk_tokenSet_4_());

		// Token: 0x040017C7 RID: 6087
		public static readonly BitSet tokenSet_5_ = new BitSet(TSql90ParserInternal.mk_tokenSet_5_());

		// Token: 0x040017C8 RID: 6088
		public static readonly BitSet tokenSet_6_ = new BitSet(TSql90ParserInternal.mk_tokenSet_6_());

		// Token: 0x040017C9 RID: 6089
		public static readonly BitSet tokenSet_7_ = new BitSet(TSql90ParserInternal.mk_tokenSet_7_());

		// Token: 0x040017CA RID: 6090
		public static readonly BitSet tokenSet_8_ = new BitSet(TSql90ParserInternal.mk_tokenSet_8_());

		// Token: 0x040017CB RID: 6091
		public static readonly BitSet tokenSet_9_ = new BitSet(TSql90ParserInternal.mk_tokenSet_9_());

		// Token: 0x040017CC RID: 6092
		public static readonly BitSet tokenSet_10_ = new BitSet(TSql90ParserInternal.mk_tokenSet_10_());

		// Token: 0x040017CD RID: 6093
		public static readonly BitSet tokenSet_11_ = new BitSet(TSql90ParserInternal.mk_tokenSet_11_());

		// Token: 0x040017CE RID: 6094
		public static readonly BitSet tokenSet_12_ = new BitSet(TSql90ParserInternal.mk_tokenSet_12_());

		// Token: 0x040017CF RID: 6095
		public static readonly BitSet tokenSet_13_ = new BitSet(TSql90ParserInternal.mk_tokenSet_13_());

		// Token: 0x040017D0 RID: 6096
		public static readonly BitSet tokenSet_14_ = new BitSet(TSql90ParserInternal.mk_tokenSet_14_());

		// Token: 0x040017D1 RID: 6097
		public static readonly BitSet tokenSet_15_ = new BitSet(TSql90ParserInternal.mk_tokenSet_15_());

		// Token: 0x040017D2 RID: 6098
		public static readonly BitSet tokenSet_16_ = new BitSet(TSql90ParserInternal.mk_tokenSet_16_());

		// Token: 0x040017D3 RID: 6099
		public static readonly BitSet tokenSet_17_ = new BitSet(TSql90ParserInternal.mk_tokenSet_17_());

		// Token: 0x040017D4 RID: 6100
		public static readonly BitSet tokenSet_18_ = new BitSet(TSql90ParserInternal.mk_tokenSet_18_());

		// Token: 0x040017D5 RID: 6101
		public static readonly BitSet tokenSet_19_ = new BitSet(TSql90ParserInternal.mk_tokenSet_19_());

		// Token: 0x040017D6 RID: 6102
		public static readonly BitSet tokenSet_20_ = new BitSet(TSql90ParserInternal.mk_tokenSet_20_());

		// Token: 0x040017D7 RID: 6103
		public static readonly BitSet tokenSet_21_ = new BitSet(TSql90ParserInternal.mk_tokenSet_21_());

		// Token: 0x040017D8 RID: 6104
		public static readonly BitSet tokenSet_22_ = new BitSet(TSql90ParserInternal.mk_tokenSet_22_());

		// Token: 0x040017D9 RID: 6105
		public static readonly BitSet tokenSet_23_ = new BitSet(TSql90ParserInternal.mk_tokenSet_23_());

		// Token: 0x040017DA RID: 6106
		public static readonly BitSet tokenSet_24_ = new BitSet(TSql90ParserInternal.mk_tokenSet_24_());

		// Token: 0x040017DB RID: 6107
		public static readonly BitSet tokenSet_25_ = new BitSet(TSql90ParserInternal.mk_tokenSet_25_());

		// Token: 0x040017DC RID: 6108
		public static readonly BitSet tokenSet_26_ = new BitSet(TSql90ParserInternal.mk_tokenSet_26_());

		// Token: 0x040017DD RID: 6109
		public static readonly BitSet tokenSet_27_ = new BitSet(TSql90ParserInternal.mk_tokenSet_27_());

		// Token: 0x040017DE RID: 6110
		public static readonly BitSet tokenSet_28_ = new BitSet(TSql90ParserInternal.mk_tokenSet_28_());

		// Token: 0x040017DF RID: 6111
		public static readonly BitSet tokenSet_29_ = new BitSet(TSql90ParserInternal.mk_tokenSet_29_());

		// Token: 0x040017E0 RID: 6112
		public static readonly BitSet tokenSet_30_ = new BitSet(TSql90ParserInternal.mk_tokenSet_30_());

		// Token: 0x040017E1 RID: 6113
		public static readonly BitSet tokenSet_31_ = new BitSet(TSql90ParserInternal.mk_tokenSet_31_());

		// Token: 0x040017E2 RID: 6114
		public static readonly BitSet tokenSet_32_ = new BitSet(TSql90ParserInternal.mk_tokenSet_32_());

		// Token: 0x040017E3 RID: 6115
		public static readonly BitSet tokenSet_33_ = new BitSet(TSql90ParserInternal.mk_tokenSet_33_());

		// Token: 0x040017E4 RID: 6116
		public static readonly BitSet tokenSet_34_ = new BitSet(TSql90ParserInternal.mk_tokenSet_34_());

		// Token: 0x040017E5 RID: 6117
		public static readonly BitSet tokenSet_35_ = new BitSet(TSql90ParserInternal.mk_tokenSet_35_());

		// Token: 0x040017E6 RID: 6118
		public static readonly BitSet tokenSet_36_ = new BitSet(TSql90ParserInternal.mk_tokenSet_36_());

		// Token: 0x040017E7 RID: 6119
		public static readonly BitSet tokenSet_37_ = new BitSet(TSql90ParserInternal.mk_tokenSet_37_());

		// Token: 0x040017E8 RID: 6120
		public static readonly BitSet tokenSet_38_ = new BitSet(TSql90ParserInternal.mk_tokenSet_38_());

		// Token: 0x040017E9 RID: 6121
		public static readonly BitSet tokenSet_39_ = new BitSet(TSql90ParserInternal.mk_tokenSet_39_());

		// Token: 0x040017EA RID: 6122
		public static readonly BitSet tokenSet_40_ = new BitSet(TSql90ParserInternal.mk_tokenSet_40_());

		// Token: 0x040017EB RID: 6123
		public static readonly BitSet tokenSet_41_ = new BitSet(TSql90ParserInternal.mk_tokenSet_41_());

		// Token: 0x040017EC RID: 6124
		public static readonly BitSet tokenSet_42_ = new BitSet(TSql90ParserInternal.mk_tokenSet_42_());

		// Token: 0x040017ED RID: 6125
		public static readonly BitSet tokenSet_43_ = new BitSet(TSql90ParserInternal.mk_tokenSet_43_());

		// Token: 0x040017EE RID: 6126
		public static readonly BitSet tokenSet_44_ = new BitSet(TSql90ParserInternal.mk_tokenSet_44_());

		// Token: 0x040017EF RID: 6127
		public static readonly BitSet tokenSet_45_ = new BitSet(TSql90ParserInternal.mk_tokenSet_45_());

		// Token: 0x040017F0 RID: 6128
		public static readonly BitSet tokenSet_46_ = new BitSet(TSql90ParserInternal.mk_tokenSet_46_());

		// Token: 0x040017F1 RID: 6129
		public static readonly BitSet tokenSet_47_ = new BitSet(TSql90ParserInternal.mk_tokenSet_47_());

		// Token: 0x040017F2 RID: 6130
		public static readonly BitSet tokenSet_48_ = new BitSet(TSql90ParserInternal.mk_tokenSet_48_());

		// Token: 0x040017F3 RID: 6131
		public static readonly BitSet tokenSet_49_ = new BitSet(TSql90ParserInternal.mk_tokenSet_49_());

		// Token: 0x040017F4 RID: 6132
		public static readonly BitSet tokenSet_50_ = new BitSet(TSql90ParserInternal.mk_tokenSet_50_());

		// Token: 0x040017F5 RID: 6133
		public static readonly BitSet tokenSet_51_ = new BitSet(TSql90ParserInternal.mk_tokenSet_51_());

		// Token: 0x040017F6 RID: 6134
		public static readonly BitSet tokenSet_52_ = new BitSet(TSql90ParserInternal.mk_tokenSet_52_());

		// Token: 0x040017F7 RID: 6135
		public static readonly BitSet tokenSet_53_ = new BitSet(TSql90ParserInternal.mk_tokenSet_53_());

		// Token: 0x040017F8 RID: 6136
		public static readonly BitSet tokenSet_54_ = new BitSet(TSql90ParserInternal.mk_tokenSet_54_());

		// Token: 0x040017F9 RID: 6137
		public static readonly BitSet tokenSet_55_ = new BitSet(TSql90ParserInternal.mk_tokenSet_55_());

		// Token: 0x040017FA RID: 6138
		public static readonly BitSet tokenSet_56_ = new BitSet(TSql90ParserInternal.mk_tokenSet_56_());

		// Token: 0x040017FB RID: 6139
		public static readonly BitSet tokenSet_57_ = new BitSet(TSql90ParserInternal.mk_tokenSet_57_());

		// Token: 0x040017FC RID: 6140
		public static readonly BitSet tokenSet_58_ = new BitSet(TSql90ParserInternal.mk_tokenSet_58_());

		// Token: 0x040017FD RID: 6141
		public static readonly BitSet tokenSet_59_ = new BitSet(TSql90ParserInternal.mk_tokenSet_59_());

		// Token: 0x040017FE RID: 6142
		public static readonly BitSet tokenSet_60_ = new BitSet(TSql90ParserInternal.mk_tokenSet_60_());

		// Token: 0x040017FF RID: 6143
		public static readonly BitSet tokenSet_61_ = new BitSet(TSql90ParserInternal.mk_tokenSet_61_());

		// Token: 0x04001800 RID: 6144
		public static readonly BitSet tokenSet_62_ = new BitSet(TSql90ParserInternal.mk_tokenSet_62_());

		// Token: 0x04001801 RID: 6145
		public static readonly BitSet tokenSet_63_ = new BitSet(TSql90ParserInternal.mk_tokenSet_63_());

		// Token: 0x04001802 RID: 6146
		public static readonly BitSet tokenSet_64_ = new BitSet(TSql90ParserInternal.mk_tokenSet_64_());

		// Token: 0x04001803 RID: 6147
		public static readonly BitSet tokenSet_65_ = new BitSet(TSql90ParserInternal.mk_tokenSet_65_());

		// Token: 0x04001804 RID: 6148
		public static readonly BitSet tokenSet_66_ = new BitSet(TSql90ParserInternal.mk_tokenSet_66_());

		// Token: 0x04001805 RID: 6149
		public static readonly BitSet tokenSet_67_ = new BitSet(TSql90ParserInternal.mk_tokenSet_67_());

		// Token: 0x04001806 RID: 6150
		public static readonly BitSet tokenSet_68_ = new BitSet(TSql90ParserInternal.mk_tokenSet_68_());

		// Token: 0x04001807 RID: 6151
		public static readonly BitSet tokenSet_69_ = new BitSet(TSql90ParserInternal.mk_tokenSet_69_());

		// Token: 0x04001808 RID: 6152
		public static readonly BitSet tokenSet_70_ = new BitSet(TSql90ParserInternal.mk_tokenSet_70_());

		// Token: 0x04001809 RID: 6153
		public static readonly BitSet tokenSet_71_ = new BitSet(TSql90ParserInternal.mk_tokenSet_71_());

		// Token: 0x0400180A RID: 6154
		public static readonly BitSet tokenSet_72_ = new BitSet(TSql90ParserInternal.mk_tokenSet_72_());

		// Token: 0x0400180B RID: 6155
		public static readonly BitSet tokenSet_73_ = new BitSet(TSql90ParserInternal.mk_tokenSet_73_());

		// Token: 0x0400180C RID: 6156
		public static readonly BitSet tokenSet_74_ = new BitSet(TSql90ParserInternal.mk_tokenSet_74_());

		// Token: 0x0400180D RID: 6157
		public static readonly BitSet tokenSet_75_ = new BitSet(TSql90ParserInternal.mk_tokenSet_75_());

		// Token: 0x0400180E RID: 6158
		public static readonly BitSet tokenSet_76_ = new BitSet(TSql90ParserInternal.mk_tokenSet_76_());

		// Token: 0x0400180F RID: 6159
		public static readonly BitSet tokenSet_77_ = new BitSet(TSql90ParserInternal.mk_tokenSet_77_());

		// Token: 0x04001810 RID: 6160
		public static readonly BitSet tokenSet_78_ = new BitSet(TSql90ParserInternal.mk_tokenSet_78_());

		// Token: 0x04001811 RID: 6161
		public static readonly BitSet tokenSet_79_ = new BitSet(TSql90ParserInternal.mk_tokenSet_79_());

		// Token: 0x04001812 RID: 6162
		public static readonly BitSet tokenSet_80_ = new BitSet(TSql90ParserInternal.mk_tokenSet_80_());

		// Token: 0x04001813 RID: 6163
		public static readonly BitSet tokenSet_81_ = new BitSet(TSql90ParserInternal.mk_tokenSet_81_());

		// Token: 0x04001814 RID: 6164
		public static readonly BitSet tokenSet_82_ = new BitSet(TSql90ParserInternal.mk_tokenSet_82_());

		// Token: 0x04001815 RID: 6165
		public static readonly BitSet tokenSet_83_ = new BitSet(TSql90ParserInternal.mk_tokenSet_83_());

		// Token: 0x04001816 RID: 6166
		public static readonly BitSet tokenSet_84_ = new BitSet(TSql90ParserInternal.mk_tokenSet_84_());

		// Token: 0x04001817 RID: 6167
		public static readonly BitSet tokenSet_85_ = new BitSet(TSql90ParserInternal.mk_tokenSet_85_());

		// Token: 0x04001818 RID: 6168
		public static readonly BitSet tokenSet_86_ = new BitSet(TSql90ParserInternal.mk_tokenSet_86_());

		// Token: 0x04001819 RID: 6169
		public static readonly BitSet tokenSet_87_ = new BitSet(TSql90ParserInternal.mk_tokenSet_87_());

		// Token: 0x0400181A RID: 6170
		public static readonly BitSet tokenSet_88_ = new BitSet(TSql90ParserInternal.mk_tokenSet_88_());

		// Token: 0x0400181B RID: 6171
		public static readonly BitSet tokenSet_89_ = new BitSet(TSql90ParserInternal.mk_tokenSet_89_());

		// Token: 0x0400181C RID: 6172
		public static readonly BitSet tokenSet_90_ = new BitSet(TSql90ParserInternal.mk_tokenSet_90_());

		// Token: 0x0400181D RID: 6173
		public static readonly BitSet tokenSet_91_ = new BitSet(TSql90ParserInternal.mk_tokenSet_91_());

		// Token: 0x0400181E RID: 6174
		public static readonly BitSet tokenSet_92_ = new BitSet(TSql90ParserInternal.mk_tokenSet_92_());

		// Token: 0x0400181F RID: 6175
		public static readonly BitSet tokenSet_93_ = new BitSet(TSql90ParserInternal.mk_tokenSet_93_());

		// Token: 0x04001820 RID: 6176
		public static readonly BitSet tokenSet_94_ = new BitSet(TSql90ParserInternal.mk_tokenSet_94_());

		// Token: 0x04001821 RID: 6177
		public static readonly BitSet tokenSet_95_ = new BitSet(TSql90ParserInternal.mk_tokenSet_95_());

		// Token: 0x04001822 RID: 6178
		public static readonly BitSet tokenSet_96_ = new BitSet(TSql90ParserInternal.mk_tokenSet_96_());

		// Token: 0x04001823 RID: 6179
		public static readonly BitSet tokenSet_97_ = new BitSet(TSql90ParserInternal.mk_tokenSet_97_());

		// Token: 0x04001824 RID: 6180
		public static readonly BitSet tokenSet_98_ = new BitSet(TSql90ParserInternal.mk_tokenSet_98_());

		// Token: 0x04001825 RID: 6181
		public static readonly BitSet tokenSet_99_ = new BitSet(TSql90ParserInternal.mk_tokenSet_99_());

		// Token: 0x04001826 RID: 6182
		public static readonly BitSet tokenSet_100_ = new BitSet(TSql90ParserInternal.mk_tokenSet_100_());

		// Token: 0x04001827 RID: 6183
		public static readonly BitSet tokenSet_101_ = new BitSet(TSql90ParserInternal.mk_tokenSet_101_());

		// Token: 0x04001828 RID: 6184
		public static readonly BitSet tokenSet_102_ = new BitSet(TSql90ParserInternal.mk_tokenSet_102_());

		// Token: 0x04001829 RID: 6185
		public static readonly BitSet tokenSet_103_ = new BitSet(TSql90ParserInternal.mk_tokenSet_103_());

		// Token: 0x0400182A RID: 6186
		public static readonly BitSet tokenSet_104_ = new BitSet(TSql90ParserInternal.mk_tokenSet_104_());

		// Token: 0x0400182B RID: 6187
		public static readonly BitSet tokenSet_105_ = new BitSet(TSql90ParserInternal.mk_tokenSet_105_());

		// Token: 0x0400182C RID: 6188
		public static readonly BitSet tokenSet_106_ = new BitSet(TSql90ParserInternal.mk_tokenSet_106_());

		// Token: 0x0400182D RID: 6189
		public static readonly BitSet tokenSet_107_ = new BitSet(TSql90ParserInternal.mk_tokenSet_107_());

		// Token: 0x0400182E RID: 6190
		public static readonly BitSet tokenSet_108_ = new BitSet(TSql90ParserInternal.mk_tokenSet_108_());

		// Token: 0x0400182F RID: 6191
		public static readonly BitSet tokenSet_109_ = new BitSet(TSql90ParserInternal.mk_tokenSet_109_());

		// Token: 0x04001830 RID: 6192
		public static readonly BitSet tokenSet_110_ = new BitSet(TSql90ParserInternal.mk_tokenSet_110_());

		// Token: 0x04001831 RID: 6193
		public static readonly BitSet tokenSet_111_ = new BitSet(TSql90ParserInternal.mk_tokenSet_111_());

		// Token: 0x04001832 RID: 6194
		public static readonly BitSet tokenSet_112_ = new BitSet(TSql90ParserInternal.mk_tokenSet_112_());

		// Token: 0x04001833 RID: 6195
		public static readonly BitSet tokenSet_113_ = new BitSet(TSql90ParserInternal.mk_tokenSet_113_());

		// Token: 0x04001834 RID: 6196
		public static readonly BitSet tokenSet_114_ = new BitSet(TSql90ParserInternal.mk_tokenSet_114_());

		// Token: 0x04001835 RID: 6197
		public static readonly BitSet tokenSet_115_ = new BitSet(TSql90ParserInternal.mk_tokenSet_115_());

		// Token: 0x04001836 RID: 6198
		public static readonly BitSet tokenSet_116_ = new BitSet(TSql90ParserInternal.mk_tokenSet_116_());

		// Token: 0x04001837 RID: 6199
		public static readonly BitSet tokenSet_117_ = new BitSet(TSql90ParserInternal.mk_tokenSet_117_());

		// Token: 0x04001838 RID: 6200
		public static readonly BitSet tokenSet_118_ = new BitSet(TSql90ParserInternal.mk_tokenSet_118_());

		// Token: 0x04001839 RID: 6201
		public static readonly BitSet tokenSet_119_ = new BitSet(TSql90ParserInternal.mk_tokenSet_119_());

		// Token: 0x0400183A RID: 6202
		public static readonly BitSet tokenSet_120_ = new BitSet(TSql90ParserInternal.mk_tokenSet_120_());

		// Token: 0x0400183B RID: 6203
		public static readonly BitSet tokenSet_121_ = new BitSet(TSql90ParserInternal.mk_tokenSet_121_());

		// Token: 0x0400183C RID: 6204
		public static readonly BitSet tokenSet_122_ = new BitSet(TSql90ParserInternal.mk_tokenSet_122_());

		// Token: 0x0400183D RID: 6205
		public static readonly BitSet tokenSet_123_ = new BitSet(TSql90ParserInternal.mk_tokenSet_123_());

		// Token: 0x0400183E RID: 6206
		public static readonly BitSet tokenSet_124_ = new BitSet(TSql90ParserInternal.mk_tokenSet_124_());

		// Token: 0x0400183F RID: 6207
		public static readonly BitSet tokenSet_125_ = new BitSet(TSql90ParserInternal.mk_tokenSet_125_());

		// Token: 0x04001840 RID: 6208
		public static readonly BitSet tokenSet_126_ = new BitSet(TSql90ParserInternal.mk_tokenSet_126_());

		// Token: 0x04001841 RID: 6209
		public static readonly BitSet tokenSet_127_ = new BitSet(TSql90ParserInternal.mk_tokenSet_127_());

		// Token: 0x04001842 RID: 6210
		public static readonly BitSet tokenSet_128_ = new BitSet(TSql90ParserInternal.mk_tokenSet_128_());

		// Token: 0x04001843 RID: 6211
		public static readonly BitSet tokenSet_129_ = new BitSet(TSql90ParserInternal.mk_tokenSet_129_());

		// Token: 0x04001844 RID: 6212
		public static readonly BitSet tokenSet_130_ = new BitSet(TSql90ParserInternal.mk_tokenSet_130_());

		// Token: 0x04001845 RID: 6213
		public static readonly BitSet tokenSet_131_ = new BitSet(TSql90ParserInternal.mk_tokenSet_131_());

		// Token: 0x04001846 RID: 6214
		public static readonly BitSet tokenSet_132_ = new BitSet(TSql90ParserInternal.mk_tokenSet_132_());

		// Token: 0x04001847 RID: 6215
		public static readonly BitSet tokenSet_133_ = new BitSet(TSql90ParserInternal.mk_tokenSet_133_());

		// Token: 0x04001848 RID: 6216
		public static readonly BitSet tokenSet_134_ = new BitSet(TSql90ParserInternal.mk_tokenSet_134_());

		// Token: 0x04001849 RID: 6217
		public static readonly BitSet tokenSet_135_ = new BitSet(TSql90ParserInternal.mk_tokenSet_135_());

		// Token: 0x0400184A RID: 6218
		public static readonly BitSet tokenSet_136_ = new BitSet(TSql90ParserInternal.mk_tokenSet_136_());

		// Token: 0x0400184B RID: 6219
		public static readonly BitSet tokenSet_137_ = new BitSet(TSql90ParserInternal.mk_tokenSet_137_());

		// Token: 0x0400184C RID: 6220
		public static readonly BitSet tokenSet_138_ = new BitSet(TSql90ParserInternal.mk_tokenSet_138_());

		// Token: 0x0400184D RID: 6221
		public static readonly BitSet tokenSet_139_ = new BitSet(TSql90ParserInternal.mk_tokenSet_139_());

		// Token: 0x0400184E RID: 6222
		public static readonly BitSet tokenSet_140_ = new BitSet(TSql90ParserInternal.mk_tokenSet_140_());

		// Token: 0x0400184F RID: 6223
		public static readonly BitSet tokenSet_141_ = new BitSet(TSql90ParserInternal.mk_tokenSet_141_());

		// Token: 0x04001850 RID: 6224
		public static readonly BitSet tokenSet_142_ = new BitSet(TSql90ParserInternal.mk_tokenSet_142_());

		// Token: 0x04001851 RID: 6225
		public static readonly BitSet tokenSet_143_ = new BitSet(TSql90ParserInternal.mk_tokenSet_143_());

		// Token: 0x04001852 RID: 6226
		public static readonly BitSet tokenSet_144_ = new BitSet(TSql90ParserInternal.mk_tokenSet_144_());

		// Token: 0x04001853 RID: 6227
		public static readonly BitSet tokenSet_145_ = new BitSet(TSql90ParserInternal.mk_tokenSet_145_());
	}
}
